// Activ8rlives.BloodPressure2Animation
using Activ8rlives;
using NGraphics;
using System;
using System.Collections.Generic;
using Vernacular;

public class BloodPressure2Animation : NControlViewBase
{
	private class Zone
	{
		public Color color;

		public double start;

		public double end;

		public bool show_legend;
	}

	private IBloodPressure2AnimationSource source_;

	private static Color MeasureColor = NGraphics.Colors.Red;

	private static Color PointerColor = NGraphics.Colors.DarkGray;

	private static Color LegendColor = Activ8rlives.Colors.A8_BLUE_N;

	private static Color ValueColor = Activ8rlives.Colors.A8_BLUE_N;

	private static SolidBrush legend_brush_ = new SolidBrush(LegendColor);

	private static SolidBrush pointer_brush_ = new SolidBrush(PointerColor);

	private static SolidBrush value_brush_ = new SolidBrush(ValueColor);

	private static double MinPressure = 0.0;

	private static double MaxPressure = 300.0;

	private static double MinAngle = Math.PI / 9.0;

	private static double InnerRadius = 0.7;

	private static double PointerRadius = 0.9;

	private static double MeasureRadius = 0.6;

	private static double HubRadius = 0.5;

	private static double PointerRootAngle = Math.PI / 36.0;

	private static double ZoneSpacing = Math.PI / 180.0;

	private static double LegendSizeCM = 0.3;

	private static double ValueSizeCM = 0.3;

	private static double HubWidth = 0.15;

	private static double MeasureWidth = 0.1;

	private static double SpacingSizeCM = LegendSizeCM / 3.0;

	private static double MaxAngle = Math.PI - MinAngle;

	private Font legend_font_;

	private Font value_font_;

	private double legend_text_width_;

	private double value_text_height_;

	private double legend_text_height_;

	private static List<Zone> Zones = new List<Zone>
	{
		new Zone
		{
			show_legend = true,
			color = Activ8rlives.Colors.A8_BLUE_N,
			start = 0.0,
			end = 37.5
		},
		new Zone
		{
			show_legend = false,
			color = Activ8rlives.Colors.A8_PINK_N,
			start = 37.5,
			end = 75.0
		},
		new Zone
		{
			show_legend = false,
			color = Activ8rlives.Colors.A8_BLUE_N,
			start = 75.0,
			end = 112.5
		},
		new Zone
		{
			show_legend = false,
			color = Activ8rlives.Colors.A8_PINK_N,
			start = 112.5,
			end = 150.0
		},
		new Zone
		{
			show_legend = true,
			color = Activ8rlives.Colors.A8_BLUE_N,
			start = 150.0,
			end = 187.5
		},
		new Zone
		{
			show_legend = false,
			color = Activ8rlives.Colors.A8_PINK_N,
			start = 187.5,
			end = 225.0
		},
		new Zone
		{
			show_legend = false,
			color = Activ8rlives.Colors.A8_BLUE_N,
			start = 225.0,
			end = 262.5
		},
		new Zone
		{
			show_legend = false,
			color = Activ8rlives.Colors.A8_PINK_N,
			start = 262.5,
			end = 300.0
		}
	};

	public BloodPressure2Animation(IBloodPressure2AnimationSource source)
		: base(CommonApp.CurrentCommonApp.getGraphicsPlatform())
	{
		source_ = source;
		legend_font_ = new Font(base.Graphics.FontName, NCM(LegendSizeCM));
		value_font_ = new Font(base.Graphics.FontName, NCM(ValueSizeCM));
		int count = Zones.Count;
		TextMetrics textMetrics = base.Graphics.MeasureText(Zones[0].start.ToString(MetaData.SYS.MetricFormat), legend_font_);
		TextMetrics textMetrics2 = base.Graphics.MeasureText(Zones[count - 1].start.ToString(MetaData.SYS.MetricFormat), legend_font_);
		legend_text_width_ = Math.Max(textMetrics.Width, textMetrics2.Width);
		legend_text_height_ = Math.Max(textMetrics.Size.Height, textMetrics2.Size.Height);
		TextMetrics textMetrics3 = base.Graphics.MeasureText("0", value_font_);
		TextMetrics textMetrics4 = base.Graphics.MeasureText(Catalog.GetString(MetaData.SYS.MetricUnits), value_font_);
		value_text_height_ = textMetrics3.Size.Height + textMetrics4.Size.Height;
	}

	private double PressureToAngle(double value)
	{
		return MaxAngle - (MaxAngle - MinAngle) * ((value - MinPressure) / (MaxPressure - MinPressure));
	}

	private Point RadiusPoint(Point center, double angle, double radius)
	{
		return new Point(center.X + Math.Cos(angle) * radius, center.Y - Math.Sin(angle) * radius);
	}

	public override void Draw(ICanvas canvas, Rect rect)
	{
		int count = Zones.Count;
		double val = source_.GetPressure();
		val = Math.Max(val, MinPressure);
		val = Math.Min(val, MaxPressure);
		double num = NCM(SpacingSizeCM);
		double num2 = HubRadius - HubWidth / 2.0;
		double val2 = (rect.Width / 2.0 - legend_text_width_ - num) / Math.Cos(MinAngle);
		double val3 = (rect.Height - num - value_text_height_ - legend_text_height_) / (1.0 - num2 * Math.Sin(MinAngle));
		double num3 = Math.Min(val2, val3);
		Point center = rect.Center.offsetY((0.0 - rect.Height) / 2.0 + num3 + legend_text_height_);
		double num4 = (0.0 - num3) * Math.Sin(MinAngle) * num2;
		new Size(InnerRadius * num3);
		Size radius = new Size(1.0 * num3);
		for (int i = 0; i < count; i++)
		{
			double num5 = PressureToAngle(Zones[i].start);
			double num6 = PressureToAngle(Zones[i].end);
			double legend_angle = num5;
			if (i > 0)
			{
				num5 -= ZoneSpacing;
			}
			if (i < count - 1)
			{
				num6 += ZoneSpacing;
			}
			Point point = RadiusPoint(center, num5, InnerRadius * num3);
			Point point2 = RadiusPoint(center, num5, 1.0 * num3);
			Point point3 = RadiusPoint(center, num6, 1.0 * num3);
			Point point4 = RadiusPoint(center, num6, InnerRadius * num3);
			Path path = new Path();
			path.MoveTo(point);
			path.LineTo(point);
			path.LineTo(point2);
			path.ArcTo(radius, largeArc: false, sweepClockwise: true, point3);
			path.LineTo(point4);
			path.LineTo(point);
			path.Close();
			canvas.DrawPath(path.Operations, null, new SolidBrush(Zones[i].color));
			if (Zones[i].show_legend)
			{
				DrawLegend(canvas, num3, center, legend_angle, Zones[i].start.ToString(MetaData.SYS.MetricFormat));
			}
		}
		DrawLegend(canvas, num3, center, PressureToAngle(Zones[count - 1].end), Zones[count - 1].end.ToString(MetaData.SYS.MetricFormat));
		double num7 = HubRadius * num3;
		string text = val.ToString(MetaData.SYS.MetricFormat);
		TextMetrics textMetrics = base.Graphics.MeasureText(text, value_font_);
		canvas.DrawText(text, center.offset((0.0 - textMetrics.Width) / 2.0, num4 + textMetrics.Ascent), value_font_, value_brush_);
		string @string = Catalog.GetString(MetaData.SYS.MetricUnits);
		TextMetrics textMetrics2 = base.Graphics.MeasureText(@string, value_font_);
		canvas.DrawText(@string, center.offset((0.0 - textMetrics2.Width) / 2.0, num4 + textMetrics.Size.Height + textMetrics2.Ascent), value_font_, value_brush_);
		int hiPressure = source_.GetHiPressure();
		int loPressure = source_.GetLoPressure();
		if (hiPressure > loPressure && loPressure >= 0)
		{
			double num8 = MeasureRadius * num3;
			double angle = PressureToAngle(hiPressure);
			double angle2 = PressureToAngle(loPressure);
			Point point5 = RadiusPoint(center, angle, num8);
			Point point6 = RadiusPoint(center, angle2, num8);
			Path path2 = new Path(new Pen(MeasureColor, num3 * MeasureWidth));
			path2.MoveTo(point6);
			path2.ArcTo(new Size(num8), largeArc: false, sweepClockwise: true, point5);
			path2.Draw(canvas);
		}
		Path path3 = new Path(new Pen(PointerColor, num3 * HubWidth));
		path3.MoveTo(RadiusPoint(center, MinAngle - PointerRootAngle / 2.0, num7));
		path3.ArcTo(new Size(num7), largeArc: false, sweepClockwise: false, RadiusPoint(center, MaxAngle + PointerRootAngle / 2.0, num7));
		path3.Draw(canvas);
		double num9 = PressureToAngle(val);
		Point point7 = RadiusPoint(center, num9 - PointerRootAngle / 2.0, num7);
		Point point8 = RadiusPoint(center, num9 + PointerRootAngle / 2.0, num7);
		Point point9 = RadiusPoint(center, num9, PointerRadius * num3);
		Path path4 = new Path(null, pointer_brush_);
		path4.MoveTo(point9);
		path4.LineTo(point8);
		path4.LineTo(point7);
		path4.Close();
		path4.Draw(canvas);
	}

	private void DrawLegend(ICanvas canvas, double size, Point center, double legend_angle, string legend)
	{
		double num = NCM(SpacingSizeCM);
		Point point = RadiusPoint(center, legend_angle, 1.0 * size);
		TextMetrics textMetrics = base.Graphics.MeasureText(legend, legend_font_);
		if (legend_angle > Math.PI * 3.0 / 4.0 - ZoneSpacing)
		{
			canvas.DrawText(legend, point.offsetX(0.0 - textMetrics.Width - num), legend_font_, legend_brush_);
		}
		else if (legend_angle < Math.PI / 4.0 + ZoneSpacing)
		{
			canvas.DrawText(legend, point.offsetX(num), legend_font_, legend_brush_);
		}
		else
		{
			canvas.DrawText(legend, point.offset((0.0 - textMetrics.Width) / 2.0, 0.0 - num), legend_font_, legend_brush_);
		}
	}
}

// Activ8rlives.BloodPressure2AnimationContainer
using Activ8rlives;
using System;
using System.CodeDom.Compiler;
using System.Reflection;
using Vernacular.Xaml;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Devices/BloodPressure2/BloodPressure2AnimationContainer.xaml")]
public class BloodPressure2AnimationContainer : StackLayout
{
	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private StackLayout _loading;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _state_text;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private ContentView _container;

	public BloodPressure2AnimationContainer(IBloodPressure2AnimationSource source)
	{
		InitializeComponent();
		_container.Content = new BloodPressure2Animation(source);
	}

	public void Invalidate()
	{
		(_container.Content as BloodPressure2Animation).Invalidate();
	}

	public void SetText(string _txt)
	{
		_state_text.Text = _txt;
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BloodPressure2AnimationContainer).GetTypeInfo().get_Assembly().GetName(), "Devices/BloodPressure2/BloodPressure2AnimationContainer.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		Color a8_BLUE_X = Colors.A8_BLUE_X;
		Label label = new Label();
		Color a8_DARKGREY_X = Colors.A8_DARKGREY_X;
		Label label2 = new Label();
		Color a8_LIGHTGREY_X = Colors.A8_LIGHTGREY_X;
		Color a8_BLUE_X2 = Colors.A8_BLUE_X;
		ActivityIndicator activityIndicator = new ActivityIndicator();
		Color a8_DARKGREY_X2 = Colors.A8_DARKGREY_X;
		Label label3 = new Label();
		StackLayout stackLayout = new StackLayout();
		ContentView contentView = new ContentView();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(label, nameScope);
		NameScope.SetNameScope(label2, nameScope);
		NameScope.SetNameScope(stackLayout, nameScope);
		((INameScope)nameScope).RegisterName("_loading", (object)stackLayout);
		if (stackLayout.StyleId == null)
		{
			stackLayout.StyleId = "_loading";
		}
		NameScope.SetNameScope(activityIndicator, nameScope);
		NameScope.SetNameScope(label3, nameScope);
		((INameScope)nameScope).RegisterName("_state_text", (object)label3);
		if (label3.StyleId == null)
		{
			label3.StyleId = "_state_text";
		}
		NameScope.SetNameScope(contentView, nameScope);
		((INameScope)nameScope).RegisterName("_container", (object)contentView);
		if (contentView.StyleId == null)
		{
			contentView.StyleId = "_container";
		}
		_loading = stackLayout;
		_state_text = label3;
		_container = contentView;
		SetValue(StackLayout.SpacingProperty, 15.0);
		label.SetValue(Catalog.MessageProperty, "Measuring your blood pressure...");
		Label label4 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 2];
		array[0] = label;
		array[1] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, Label.FontSizeProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BloodPressure2AnimationContainer).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(10, 13)));
		label4.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider));
		label.SetValue(Label.TextColorProperty, a8_BLUE_X);
		label.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Children.Add(label);
		label2.SetValue(Catalog.MessageProperty, "Stay calm, still and quiet. Try not to talk, as this can affect the result.");
		Label label5 = label2;
		BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 2];
		array2[0] = label2;
		array2[1] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.FontSizeProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BloodPressure2AnimationContainer).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(17, 13)));
		label5.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider2));
		label2.SetValue(Label.TextColorProperty, a8_DARKGREY_X);
		label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label2.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		Children.Add(label2);
		stackLayout.SetValue(VisualElement.BackgroundColorProperty, a8_LIGHTGREY_X);
		stackLayout.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("true"));
		stackLayout.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout.SetValue(StackLayout.SpacingProperty, 15.0);
		stackLayout.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		activityIndicator.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		activityIndicator.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		activityIndicator.SetValue(ActivityIndicator.ColorProperty, a8_BLUE_X2);
		activityIndicator.SetValue(ActivityIndicator.IsRunningProperty, true);
		stackLayout.Children.Add(activityIndicator);
		label3.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label3.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		label3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		label3.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label6 = label3;
		BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 3];
		array3[0] = label3;
		array3[1] = stackLayout;
		array3[2] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, Label.FontSizeProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BloodPressure2AnimationContainer).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(24, 182)));
		label6.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider3));
		label3.SetValue(Label.TextColorProperty, a8_DARKGREY_X2);
		stackLayout.Children.Add(label3);
		Children.Add(stackLayout);
		contentView.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		contentView.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
		Children.Add(contentView);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BloodPressure2AnimationContainer));
		_loading = this.FindByName<StackLayout>("_loading");
		_state_text = this.FindByName<Label>("_state_text");
		_container = this.FindByName<ContentView>("_container");
	}
}

// Activ8rlives.BloodPressure2Contants
using Activ8rlivesBase;
using System;

public class BloodPressure2Contants
{
	public static Guid svc = "fff0".AsGuid();

	public static Guid readwrite6_char = "fff6".AsGuid();

	public static ServiceDescriptor svc1 = new ServiceDescriptor
	{
		Service = svc,
		Characteristics = new Guid[1]
		{
			readwrite6_char
		}
	};
}

// Activ8rlives.BloodPressure2Device
public class BloodPressure2Device
{
	public string Identifier
	{
		get;
		set;
	}

	public int IsBlue
	{
		get;
		set;
	}
}

// Activ8rlives.BloodPressure2Error
using Activ8rlives;
using System;
using System.CodeDom.Compiler;
using System.Reflection;
using Vernacular.Xaml;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Devices/BloodPressure2/BloodPressure2Error.xaml")]
public class BloodPressure2Error : StackLayout
{
	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _error;

	public BloodPressure2Error()
	{
		base.Resources = Theme.GetResourceDictionary();
		InitializeComponent();
	}

	public void SetErrorText(string _txt)
	{
		_error.Text = _txt;
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BloodPressure2Error).GetTypeInfo().get_Assembly().GetName(), "Devices/BloodPressure2/BloodPressure2Error.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		StaticResourceExtension staticResourceExtension = new StaticResourceExtension();
		Image image = new Image();
		StaticResourceExtension staticResourceExtension2 = new StaticResourceExtension();
		Label label = new Label();
		StaticResourceExtension staticResourceExtension3 = new StaticResourceExtension();
		Label label2 = new Label();
		StaticResourceExtension staticResourceExtension4 = new StaticResourceExtension();
		Label label3 = new Label();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(image, nameScope);
		NameScope.SetNameScope(label, nameScope);
		NameScope.SetNameScope(label2, nameScope);
		((INameScope)nameScope).RegisterName("_error", (object)label2);
		if (label2.StyleId == null)
		{
			label2.StyleId = "_error";
		}
		NameScope.SetNameScope(label3, nameScope);
		_error = label2;
		SetValue(StackLayout.SpacingProperty, 15.0);
		staticResourceExtension.Key = "PageBGColor";
		StaticResourceExtension staticResourceExtension5 = staticResourceExtension;
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 1];
		array[0] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, VisualElement.BackgroundColorProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BloodPressure2Error).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(8, 5)));
		object obj = ((IMarkupExtension)staticResourceExtension5).ProvideValue((IServiceProvider)xamlServiceProvider);
		BackgroundColor = (Color)obj;
		image.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("device_icon_bloodpressure2_blue"));
		image.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		Children.Add(image);
		label.SetValue(Catalog.MessageProperty, "Something went wrong...");
		Label label4 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 2];
		array2[0] = label;
		array2[1] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.FontSizeProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BloodPressure2Error).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(13, 13)));
		label4.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider2));
		staticResourceExtension2.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension6 = staticResourceExtension2;
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 2];
		array3[0] = label;
		array3[1] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, Label.TextColorProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BloodPressure2Error).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(14, 13)));
		object obj2 = ((IMarkupExtension)staticResourceExtension6).ProvideValue((IServiceProvider)xamlServiceProvider3);
		label.TextColor = (Color)obj2;
		label.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Children.Add(label);
		label2.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		Label label5 = label2;
		BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
		Type typeFromHandle7 = typeof(IProvideValueTarget);
		object[] array4 = new object[0 + 2];
		array4[0] = label2;
		array4[1] = this;
		xamlServiceProvider4.Add(typeFromHandle7, new SimpleValueTargetProvider(array4, Label.FontSizeProperty));
		xamlServiceProvider4.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle8 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
		xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver4.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver4.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(BloodPressure2Error).GetTypeInfo().get_Assembly()));
		xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(21, 13)));
		label5.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider4));
		staticResourceExtension3.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension7 = staticResourceExtension3;
		XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
		Type typeFromHandle9 = typeof(IProvideValueTarget);
		object[] array5 = new object[0 + 2];
		array5[0] = label2;
		array5[1] = this;
		xamlServiceProvider5.Add(typeFromHandle9, new SimpleValueTargetProvider(array5, Label.TextColorProperty));
		xamlServiceProvider5.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle10 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
		xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver5.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver5.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(BloodPressure2Error).GetTypeInfo().get_Assembly()));
		xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(22, 13)));
		object obj3 = ((IMarkupExtension)staticResourceExtension7).ProvideValue((IServiceProvider)xamlServiceProvider5);
		label2.TextColor = (Color)obj3;
		label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label2.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		Children.Add(label2);
		label3.SetValue(Catalog.MessageProperty, "Press 'Next' to try taking another reading");
		Label label6 = label3;
		BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
		Type typeFromHandle11 = typeof(IProvideValueTarget);
		object[] array6 = new object[0 + 2];
		array6[0] = label3;
		array6[1] = this;
		xamlServiceProvider6.Add(typeFromHandle11, new SimpleValueTargetProvider(array6, Label.FontSizeProperty));
		xamlServiceProvider6.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle12 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
		xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver6.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver6.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(BloodPressure2Error).GetTypeInfo().get_Assembly()));
		xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(27, 13)));
		label6.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider6));
		staticResourceExtension4.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension8 = staticResourceExtension4;
		XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
		Type typeFromHandle13 = typeof(IProvideValueTarget);
		object[] array7 = new object[0 + 2];
		array7[0] = label3;
		array7[1] = this;
		xamlServiceProvider7.Add(typeFromHandle13, new SimpleValueTargetProvider(array7, Label.TextColorProperty));
		xamlServiceProvider7.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle14 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
		xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver7.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver7.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(BloodPressure2Error).GetTypeInfo().get_Assembly()));
		xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(28, 13)));
		object obj4 = ((IMarkupExtension)staticResourceExtension8).ProvideValue((IServiceProvider)xamlServiceProvider7);
		label3.TextColor = (Color)obj4;
		label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label3.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		Children.Add(label3);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BloodPressure2Error));
		_error = this.FindByName<Label>("_error");
	}
}

// Activ8rlives.BloodPressure2Fit
using Activ8rlives;
using System;
using System.CodeDom.Compiler;
using System.Reflection;
using Vernacular.Xaml;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Devices/BloodPressure2/BloodPressure2Fit.xaml")]
public class BloodPressure2Fit : StackLayout
{
	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _take_reading_btn;

	public BloodPressure2Fit(BluetoothBloodPressure2State_Fit _state)
	{
		InitializeComponent();
		_take_reading_btn.Clicked += delegate
		{
			_state.OnButton1();
		};
	}

	public void SetButtonVisibility(bool vis)
	{
		_take_reading_btn.IsVisible = vis;
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly().GetName(), "Devices/BloodPressure2/BloodPressure2Fit.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		Image image = new Image();
		Color a8_BLUE_X = Colors.A8_BLUE_X;
		Label label = new Label();
		Color a8_DARKGREY_X = Colors.A8_DARKGREY_X;
		Label label2 = new Label();
		Color a8_LIGHTGREY_X = Colors.A8_LIGHTGREY_X;
		Color a8_DARKGREY_X2 = Colors.A8_DARKGREY_X;
		Label label3 = new Label();
		StackLayout stackLayout = new StackLayout();
		Color a8_DARKGREY_X3 = Colors.A8_DARKGREY_X;
		Label label4 = new Label();
		Color a8_LIGHTGREY_X2 = Colors.A8_LIGHTGREY_X;
		Color a8_DARKGREY_X4 = Colors.A8_DARKGREY_X;
		Label label5 = new Label();
		StackLayout stackLayout2 = new StackLayout();
		Image image2 = new Image();
		Color a8_DARKGREY_X5 = Colors.A8_DARKGREY_X;
		Label label6 = new Label();
		Color a8_LIGHTGREY_X3 = Colors.A8_LIGHTGREY_X;
		Color a8_DARKGREY_X6 = Colors.A8_DARKGREY_X;
		Label label7 = new Label();
		StackLayout stackLayout3 = new StackLayout();
		Image image3 = new Image();
		Color a8_DARKGREY_X7 = Colors.A8_DARKGREY_X;
		Label label8 = new Label();
		Color a8_LIGHTGREY_X4 = Colors.A8_LIGHTGREY_X;
		Color a8_DARKGREY_X8 = Colors.A8_DARKGREY_X;
		Label label9 = new Label();
		StackLayout stackLayout4 = new StackLayout();
		Image image4 = new Image();
		Color a8_DARKGREY_X9 = Colors.A8_DARKGREY_X;
		Label label10 = new Label();
		Color a8_LIGHTGREY_X5 = Colors.A8_LIGHTGREY_X;
		Color a8_DARKGREY_X10 = Colors.A8_DARKGREY_X;
		Label label11 = new Label();
		StackLayout stackLayout5 = new StackLayout();
		Color a8_DARKGREY_X11 = Colors.A8_DARKGREY_X;
		Label label12 = new Label();
		Color a8_DARKGREY_X12 = Colors.A8_DARKGREY_X;
		Label label13 = new Label();
		SkipBP2ChecksEditor skipBP2ChecksEditor = new SkipBP2ChecksEditor();
		StackLayout stackLayout6 = new StackLayout();
		BlueButton blueButton = new BlueButton();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(image, nameScope);
		NameScope.SetNameScope(label, nameScope);
		NameScope.SetNameScope(label2, nameScope);
		NameScope.SetNameScope(stackLayout, nameScope);
		NameScope.SetNameScope(label3, nameScope);
		NameScope.SetNameScope(label4, nameScope);
		NameScope.SetNameScope(stackLayout2, nameScope);
		NameScope.SetNameScope(label5, nameScope);
		NameScope.SetNameScope(image2, nameScope);
		NameScope.SetNameScope(label6, nameScope);
		NameScope.SetNameScope(stackLayout3, nameScope);
		NameScope.SetNameScope(label7, nameScope);
		NameScope.SetNameScope(image3, nameScope);
		NameScope.SetNameScope(label8, nameScope);
		NameScope.SetNameScope(stackLayout4, nameScope);
		NameScope.SetNameScope(label9, nameScope);
		NameScope.SetNameScope(image4, nameScope);
		NameScope.SetNameScope(label10, nameScope);
		NameScope.SetNameScope(stackLayout5, nameScope);
		NameScope.SetNameScope(label11, nameScope);
		NameScope.SetNameScope(label12, nameScope);
		NameScope.SetNameScope(stackLayout6, nameScope);
		NameScope.SetNameScope(label13, nameScope);
		NameScope.SetNameScope(skipBP2ChecksEditor, nameScope);
		NameScope.SetNameScope(blueButton, nameScope);
		((INameScope)nameScope).RegisterName("_take_reading_btn", (object)blueButton);
		if (blueButton.StyleId == null)
		{
			blueButton.StyleId = "_take_reading_btn";
		}
		_take_reading_btn = blueButton;
		SetValue(StackLayout.SpacingProperty, 15.0);
		SetValue(VisualElement.BackgroundColorProperty, Color.White);
		image.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("bpressure2_reading"));
		image.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		Children.Add(image);
		label.SetValue(Catalog.MessageProperty, "How to fit the cuff correctly...");
		Label label14 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 2];
		array[0] = label;
		array[1] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, Label.FontSizeProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(13, 4)));
		label14.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider));
		label.SetValue(Label.TextColorProperty, a8_BLUE_X);
		label.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Children.Add(label);
		label2.SetValue(Catalog.MessageProperty, "Follow this guide to make sure you get an accurate blood pressure reading.");
		Label label15 = label2;
		BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 2];
		array2[0] = label2;
		array2[1] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.FontSizeProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(20, 4)));
		label15.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider2));
		label2.SetValue(Label.TextColorProperty, a8_DARKGREY_X);
		label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label2.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		Children.Add(label2);
		stackLayout.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		stackLayout.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout.SetValue(VisualElement.BackgroundColorProperty, a8_LIGHTGREY_X);
		label3.SetValue(Catalog.MessageProperty, "1");
		Label label16 = label3;
		BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 3];
		array3[0] = label3;
		array3[1] = stackLayout;
		array3[2] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, Label.FontSizeProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(27, 4)));
		label16.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("22", (IServiceProvider)xamlServiceProvider3));
		label3.SetValue(Label.TextColorProperty, a8_DARKGREY_X2);
		label3.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label3.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout.Children.Add(label3);
		Children.Add(stackLayout);
		label4.SetValue(Catalog.MessageProperty, "Sit down with your arm resting on a table");
		Label label17 = label4;
		BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
		Type typeFromHandle7 = typeof(IProvideValueTarget);
		object[] array4 = new object[0 + 2];
		array4[0] = label4;
		array4[1] = this;
		xamlServiceProvider4.Add(typeFromHandle7, new SimpleValueTargetProvider(array4, Label.FontSizeProperty));
		xamlServiceProvider4.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle8 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
		xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver4.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver4.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly()));
		xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(35, 4)));
		label17.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider4));
		label4.SetValue(Label.TextColorProperty, a8_DARKGREY_X3);
		label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label4.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		label4.SetValue(View.MarginProperty, new Thickness(10.0, 0.0, 10.0, 0.0));
		label4.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		Children.Add(label4);
		stackLayout2.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		stackLayout2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout2.SetValue(VisualElement.BackgroundColorProperty, a8_LIGHTGREY_X2);
		label5.SetValue(Catalog.MessageProperty, "2");
		Label label18 = label5;
		BindableProperty fontSizeProperty5 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
		Type typeFromHandle9 = typeof(IProvideValueTarget);
		object[] array5 = new object[0 + 3];
		array5[0] = label5;
		array5[1] = stackLayout2;
		array5[2] = this;
		xamlServiceProvider5.Add(typeFromHandle9, new SimpleValueTargetProvider(array5, Label.FontSizeProperty));
		xamlServiceProvider5.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle10 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
		xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver5.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver5.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly()));
		xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(44, 4)));
		label18.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("22", (IServiceProvider)xamlServiceProvider5));
		label5.SetValue(Label.TextColorProperty, a8_DARKGREY_X4);
		label5.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label5.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout2.Children.Add(label5);
		Children.Add(stackLayout2);
		image2.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("bpressure2_reading_heart"));
		image2.SetValue(View.MarginProperty, new Thickness(0.0, 10.0, 0.0, 10.0));
		image2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		Children.Add(image2);
		label6.SetValue(Catalog.MessageProperty, "The monitor should be level with your heart");
		Label label19 = label6;
		BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
		Type typeFromHandle11 = typeof(IProvideValueTarget);
		object[] array6 = new object[0 + 2];
		array6[0] = label6;
		array6[1] = this;
		xamlServiceProvider6.Add(typeFromHandle11, new SimpleValueTargetProvider(array6, Label.FontSizeProperty));
		xamlServiceProvider6.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle12 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
		xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver6.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver6.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly()));
		xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(54, 4)));
		label19.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider6));
		label6.SetValue(Label.TextColorProperty, a8_DARKGREY_X5);
		label6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label6.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		label6.SetValue(View.MarginProperty, new Thickness(10.0, 0.0, 10.0, 0.0));
		label6.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		Children.Add(label6);
		stackLayout3.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		stackLayout3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout3.SetValue(VisualElement.BackgroundColorProperty, a8_LIGHTGREY_X3);
		label7.SetValue(Catalog.MessageProperty, "3");
		Label label20 = label7;
		BindableProperty fontSizeProperty7 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
		Type typeFromHandle13 = typeof(IProvideValueTarget);
		object[] array7 = new object[0 + 3];
		array7[0] = label7;
		array7[1] = stackLayout3;
		array7[2] = this;
		xamlServiceProvider7.Add(typeFromHandle13, new SimpleValueTargetProvider(array7, Label.FontSizeProperty));
		xamlServiceProvider7.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle14 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
		xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver7.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver7.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly()));
		xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(63, 4)));
		label20.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("22", (IServiceProvider)xamlServiceProvider7));
		label7.SetValue(Label.TextColorProperty, a8_DARKGREY_X6);
		label7.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label7.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout3.Children.Add(label7);
		Children.Add(stackLayout3);
		image3.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("bpressure2_reading_elbow"));
		image3.SetValue(View.MarginProperty, new Thickness(0.0, 10.0, 0.0, 10.0));
		image3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		Children.Add(image3);
		label8.SetValue(Catalog.MessageProperty, "Position the bottom of the cuff two finger's width above your elbow");
		Label label21 = label8;
		BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
		Type typeFromHandle15 = typeof(IProvideValueTarget);
		object[] array8 = new object[0 + 2];
		array8[0] = label8;
		array8[1] = this;
		xamlServiceProvider8.Add(typeFromHandle15, new SimpleValueTargetProvider(array8, Label.FontSizeProperty));
		xamlServiceProvider8.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle16 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
		xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver8.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver8.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly()));
		xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(73, 4)));
		label21.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider8));
		label8.SetValue(Label.TextColorProperty, a8_DARKGREY_X7);
		label8.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label8.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		label8.SetValue(View.MarginProperty, new Thickness(10.0, 0.0, 10.0, 0.0));
		label8.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		Children.Add(label8);
		stackLayout4.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		stackLayout4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout4.SetValue(VisualElement.BackgroundColorProperty, a8_LIGHTGREY_X4);
		label9.SetValue(Catalog.MessageProperty, "4");
		Label label22 = label9;
		BindableProperty fontSizeProperty9 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter9 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
		Type typeFromHandle17 = typeof(IProvideValueTarget);
		object[] array9 = new object[0 + 3];
		array9[0] = label9;
		array9[1] = stackLayout4;
		array9[2] = this;
		xamlServiceProvider9.Add(typeFromHandle17, new SimpleValueTargetProvider(array9, Label.FontSizeProperty));
		xamlServiceProvider9.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle18 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
		xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver9.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver9.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly()));
		xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(82, 4)));
		label22.SetValue(fontSizeProperty9, ((IExtendedTypeConverter)fontSizeConverter9).ConvertFromInvariantString("22", (IServiceProvider)xamlServiceProvider9));
		label9.SetValue(Label.TextColorProperty, a8_DARKGREY_X8);
		label9.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label9.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label9.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout4.Children.Add(label9);
		Children.Add(stackLayout4);
		image4.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("bpressure2_reading_arrow"));
		image4.SetValue(View.MarginProperty, new Thickness(0.0, 10.0, 0.0, 10.0));
		image4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		Children.Add(image4);
		label10.SetValue(Catalog.MessageProperty, "Align the red arrow to the large blood vessel on the inside of your arm.");
		Label label23 = label10;
		BindableProperty fontSizeProperty10 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter10 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
		Type typeFromHandle19 = typeof(IProvideValueTarget);
		object[] array10 = new object[0 + 2];
		array10[0] = label10;
		array10[1] = this;
		xamlServiceProvider10.Add(typeFromHandle19, new SimpleValueTargetProvider(array10, Label.FontSizeProperty));
		xamlServiceProvider10.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle20 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
		xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver10.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver10.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly()));
		xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(92, 4)));
		label23.SetValue(fontSizeProperty10, ((IExtendedTypeConverter)fontSizeConverter10).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider10));
		label10.SetValue(Label.TextColorProperty, a8_DARKGREY_X9);
		label10.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label10.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		label10.SetValue(View.MarginProperty, new Thickness(10.0, 0.0, 10.0, 0.0));
		label10.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		Children.Add(label10);
		stackLayout5.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		stackLayout5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout5.SetValue(VisualElement.BackgroundColorProperty, a8_LIGHTGREY_X5);
		label11.SetValue(Catalog.MessageProperty, "5");
		Label label24 = label11;
		BindableProperty fontSizeProperty11 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter11 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
		Type typeFromHandle21 = typeof(IProvideValueTarget);
		object[] array11 = new object[0 + 3];
		array11[0] = label11;
		array11[1] = stackLayout5;
		array11[2] = this;
		xamlServiceProvider11.Add(typeFromHandle21, new SimpleValueTargetProvider(array11, Label.FontSizeProperty));
		xamlServiceProvider11.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle22 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
		xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver11.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver11.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly()));
		xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(101, 4)));
		label24.SetValue(fontSizeProperty11, ((IExtendedTypeConverter)fontSizeConverter11).ConvertFromInvariantString("22", (IServiceProvider)xamlServiceProvider11));
		label11.SetValue(Label.TextColorProperty, a8_DARKGREY_X10);
		label11.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label11.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label11.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout5.Children.Add(label11);
		Children.Add(stackLayout5);
		label12.SetValue(Catalog.MessageProperty, "Fit the cuff securely using the velcro patches");
		Label label25 = label12;
		BindableProperty fontSizeProperty12 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter12 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
		Type typeFromHandle23 = typeof(IProvideValueTarget);
		object[] array12 = new object[0 + 2];
		array12[0] = label12;
		array12[1] = this;
		xamlServiceProvider12.Add(typeFromHandle23, new SimpleValueTargetProvider(array12, Label.FontSizeProperty));
		xamlServiceProvider12.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle24 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
		xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver12.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver12.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly()));
		xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(109, 4)));
		label25.SetValue(fontSizeProperty12, ((IExtendedTypeConverter)fontSizeConverter12).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider12));
		label12.SetValue(Label.TextColorProperty, a8_DARKGREY_X11);
		label12.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label12.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		label12.SetValue(View.MarginProperty, new Thickness(10.0, 0.0, 10.0, 0.0));
		label12.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		Children.Add(label12);
		stackLayout6.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout6.SetValue(View.MarginProperty, new Thickness(0.0, 20.0, 0.0, 0.0));
		stackLayout6.SetValue(StackLayout.SpacingProperty, 10.0);
		label13.SetValue(Catalog.MessageProperty, "Don't show this guide again");
		Label label26 = label13;
		BindableProperty fontSizeProperty13 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter13 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
		Type typeFromHandle25 = typeof(IProvideValueTarget);
		object[] array13 = new object[0 + 3];
		array13[0] = label13;
		array13[1] = stackLayout6;
		array13[2] = this;
		xamlServiceProvider13.Add(typeFromHandle25, new SimpleValueTargetProvider(array13, Label.FontSizeProperty));
		xamlServiceProvider13.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle26 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
		xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver13.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver13.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly()));
		xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(117, 61)));
		label26.SetValue(fontSizeProperty13, ((IExtendedTypeConverter)fontSizeConverter13).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider13));
		label13.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label13.SetValue(Label.TextColorProperty, a8_DARKGREY_X12);
		label13.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label13.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label13.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		stackLayout6.Children.Add(label13);
		skipBP2ChecksEditor.SetValue(View.HorizontalOptionsProperty, LayoutOptions.End);
		stackLayout6.Children.Add(skipBP2ChecksEditor);
		Children.Add(stackLayout6);
		blueButton.SetValue(Catalog.MessageProperty, "Take a reading");
		BlueButton blueButton2 = blueButton;
		BindableProperty fontSizeProperty14 = Button.FontSizeProperty;
		FontSizeConverter fontSizeConverter14 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
		Type typeFromHandle27 = typeof(IProvideValueTarget);
		object[] array14 = new object[0 + 2];
		array14[0] = blueButton;
		array14[1] = this;
		xamlServiceProvider14.Add(typeFromHandle27, new SimpleValueTargetProvider(array14, Button.FontSizeProperty));
		xamlServiceProvider14.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle28 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
		xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver14.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver14.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(BloodPressure2Fit).GetTypeInfo().get_Assembly()));
		xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(121, 82)));
		blueButton2.SetValue(fontSizeProperty14, ((IExtendedTypeConverter)fontSizeConverter14).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider14));
		blueButton.SetValue(Button.FontAttributesProperty, FontAttributes.Bold);
		Children.Add(blueButton);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BloodPressure2Fit));
		_take_reading_btn = this.FindByName<BlueButton>("_take_reading_btn");
	}
}

// Activ8rlives.BloodPressure2Identify
using Activ8rlives;
using System;
using System.CodeDom.Compiler;
using System.Reflection;
using Vernacular.Xaml;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Devices/BloodPressure2/BloodPressure2Identify.xaml")]
public class BloodPressure2Identify : StackLayout
{
	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _identify_btn;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _change_btn;

	public BloodPressure2Identify(BluetoothBloodPressure2State_PrepForScan _state)
	{
		base.Resources = Theme.GetResourceDictionary();
		InitializeComponent();
		_identify_btn.Clicked += delegate
		{
			_state.OnButton1();
		};
		_change_btn.Clicked += delegate
		{
			_state.OnButton2();
		};
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BloodPressure2Identify).GetTypeInfo().get_Assembly().GetName(), "Devices/BloodPressure2/BloodPressure2Identify.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		StaticResourceExtension staticResourceExtension = new StaticResourceExtension();
		Image image = new Image();
		StaticResourceExtension staticResourceExtension2 = new StaticResourceExtension();
		Label label = new Label();
		StaticResourceExtension staticResourceExtension3 = new StaticResourceExtension();
		Label label2 = new Label();
		BlueButton blueButton = new BlueButton();
		StaticResourceExtension staticResourceExtension4 = new StaticResourceExtension();
		Label label3 = new Label();
		BlueButton blueButton2 = new BlueButton();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(image, nameScope);
		NameScope.SetNameScope(label, nameScope);
		NameScope.SetNameScope(label2, nameScope);
		NameScope.SetNameScope(blueButton, nameScope);
		((INameScope)nameScope).RegisterName("_identify_btn", (object)blueButton);
		if (blueButton.StyleId == null)
		{
			blueButton.StyleId = "_identify_btn";
		}
		NameScope.SetNameScope(label3, nameScope);
		NameScope.SetNameScope(blueButton2, nameScope);
		((INameScope)nameScope).RegisterName("_change_btn", (object)blueButton2);
		if (blueButton2.StyleId == null)
		{
			blueButton2.StyleId = "_change_btn";
		}
		_identify_btn = blueButton;
		_change_btn = blueButton2;
		SetValue(StackLayout.SpacingProperty, 15.0);
		staticResourceExtension.Key = "PageBGColor";
		StaticResourceExtension staticResourceExtension5 = staticResourceExtension;
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 1];
		array[0] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, VisualElement.BackgroundColorProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BloodPressure2Identify).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(8, 5)));
		object obj = ((IMarkupExtension)staticResourceExtension5).ProvideValue((IServiceProvider)xamlServiceProvider);
		BackgroundColor = (Color)obj;
		image.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("bpressure2_serial"));
		image.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		Children.Add(image);
		label.SetValue(Catalog.MessageProperty, "Identify your Blood Pressure2 monitor");
		Label label4 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 2];
		array2[0] = label;
		array2[1] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.FontSizeProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BloodPressure2Identify).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(13, 13)));
		label4.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider2));
		staticResourceExtension2.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension6 = staticResourceExtension2;
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 2];
		array3[0] = label;
		array3[1] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, Label.TextColorProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BloodPressure2Identify).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(14, 13)));
		object obj2 = ((IMarkupExtension)staticResourceExtension6).ProvideValue((IServiceProvider)xamlServiceProvider3);
		label.TextColor = (Color)obj2;
		label.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Children.Add(label);
		label2.SetValue(Catalog.MessageProperty, "Take note of the serial number indicated on your monitor.");
		Label label5 = label2;
		BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
		Type typeFromHandle7 = typeof(IProvideValueTarget);
		object[] array4 = new object[0 + 2];
		array4[0] = label2;
		array4[1] = this;
		xamlServiceProvider4.Add(typeFromHandle7, new SimpleValueTargetProvider(array4, Label.FontSizeProperty));
		xamlServiceProvider4.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle8 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
		xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver4.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver4.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(BloodPressure2Identify).GetTypeInfo().get_Assembly()));
		xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(20, 13)));
		label5.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider4));
		staticResourceExtension3.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension7 = staticResourceExtension3;
		XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
		Type typeFromHandle9 = typeof(IProvideValueTarget);
		object[] array5 = new object[0 + 2];
		array5[0] = label2;
		array5[1] = this;
		xamlServiceProvider5.Add(typeFromHandle9, new SimpleValueTargetProvider(array5, Label.TextColorProperty));
		xamlServiceProvider5.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle10 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
		xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver5.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver5.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(BloodPressure2Identify).GetTypeInfo().get_Assembly()));
		xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(21, 13)));
		object obj3 = ((IMarkupExtension)staticResourceExtension7).ProvideValue((IServiceProvider)xamlServiceProvider5);
		label2.TextColor = (Color)obj3;
		label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label2.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		Children.Add(label2);
		blueButton.SetValue(Catalog.MessageProperty, "Identify your monitor");
		BlueButton blueButton3 = blueButton;
		BindableProperty fontSizeProperty3 = Button.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
		Type typeFromHandle11 = typeof(IProvideValueTarget);
		object[] array6 = new object[0 + 2];
		array6[0] = blueButton;
		array6[1] = this;
		xamlServiceProvider6.Add(typeFromHandle11, new SimpleValueTargetProvider(array6, Button.FontSizeProperty));
		xamlServiceProvider6.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle12 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
		xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver6.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver6.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(BloodPressure2Identify).GetTypeInfo().get_Assembly()));
		xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(25, 88)));
		blueButton3.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider6));
		blueButton.SetValue(Button.FontAttributesProperty, FontAttributes.Bold);
		Children.Add(blueButton);
		label3.SetValue(Catalog.MessageProperty, "Or, if you have a different type of blood pressure monitor...");
		Label label6 = label3;
		BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
		Type typeFromHandle13 = typeof(IProvideValueTarget);
		object[] array7 = new object[0 + 2];
		array7[0] = label3;
		array7[1] = this;
		xamlServiceProvider7.Add(typeFromHandle13, new SimpleValueTargetProvider(array7, Label.FontSizeProperty));
		xamlServiceProvider7.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle14 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
		xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver7.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver7.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(BloodPressure2Identify).GetTypeInfo().get_Assembly()));
		xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(28, 13)));
		label6.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider7));
		staticResourceExtension4.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension8 = staticResourceExtension4;
		XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
		Type typeFromHandle15 = typeof(IProvideValueTarget);
		object[] array8 = new object[0 + 2];
		array8[0] = label3;
		array8[1] = this;
		xamlServiceProvider8.Add(typeFromHandle15, new SimpleValueTargetProvider(array8, Label.TextColorProperty));
		xamlServiceProvider8.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle16 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
		xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver8.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver8.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(BloodPressure2Identify).GetTypeInfo().get_Assembly()));
		xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(29, 13)));
		object obj4 = ((IMarkupExtension)staticResourceExtension8).ProvideValue((IServiceProvider)xamlServiceProvider8);
		label3.TextColor = (Color)obj4;
		label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label3.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Children.Add(label3);
		blueButton2.SetValue(Catalog.MessageProperty, "Change monitor type");
		BlueButton blueButton4 = blueButton2;
		BindableProperty fontSizeProperty5 = Button.FontSizeProperty;
		FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
		Type typeFromHandle17 = typeof(IProvideValueTarget);
		object[] array9 = new object[0 + 2];
		array9[0] = blueButton2;
		array9[1] = this;
		xamlServiceProvider9.Add(typeFromHandle17, new SimpleValueTargetProvider(array9, Button.FontSizeProperty));
		xamlServiceProvider9.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle18 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
		xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver9.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver9.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(BloodPressure2Identify).GetTypeInfo().get_Assembly()));
		xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(33, 84)));
		blueButton4.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider9));
		blueButton2.SetValue(Button.FontAttributesProperty, FontAttributes.Bold);
		Children.Add(blueButton2);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BloodPressure2Identify));
		_identify_btn = this.FindByName<BlueButton>("_identify_btn");
		_change_btn = this.FindByName<BlueButton>("_change_btn");
	}
}

// Activ8rlives.BloodPressure2QRCode
using Activ8rlives;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Reflection;
using Vernacular.Xaml;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Devices/BloodPressure2/BloodPressure2QRCode.xaml")]
public class BloodPressure2QRCode : RelativeLayout
{
	private static string web_bp2_1 = "http://www.activ8rlives.com/devices/bloodpressure2?id=";

	private static string web_bp2_2 = "http://www.activ8rlives.com/bp2?id=";

	private static string web_bp2_3 = "http://bit.ly/2qNXJcz?id=";

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ScannerView _scanner;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _esc_btn;

	public Action AppearAction => delegate
	{
		Device.BeginInvokeOnMainThread(delegate
		{
			_scanner.IsScanning = true;
		});
	};

	public Action DisappearAction => delegate
	{
		_scanner.IsScanning = false;
	};

	public BloodPressure2QRCode(BluetoothBloodPressure2State_QR _state, Action<string> found_bp2)
	{
		InitializeComponent();
		_scanner.OnScanComplete += delegate(string type, byte[] data, string text)
		{
			text = text.Trim();
			if (text.StartsWith(web_bp2_1, StringComparison.OrdinalIgnoreCase))
			{
				_scanner.IsScanning = false;
				string tail3 = ExpandTail(text.Substring(web_bp2_1.Length));
				Device.BeginInvokeOnMainThread(delegate
				{
					found_bp2(tail3);
				});
			}
			if (text.StartsWith(web_bp2_2, StringComparison.OrdinalIgnoreCase))
			{
				_scanner.IsScanning = false;
				string tail2 = ExpandTail(text.Substring(web_bp2_2.Length));
				Device.BeginInvokeOnMainThread(delegate
				{
					found_bp2(tail2);
				});
			}
			if (text.StartsWith(web_bp2_3, StringComparison.OrdinalIgnoreCase))
			{
				_scanner.IsScanning = false;
				string tail = ExpandTail(text.Substring(web_bp2_3.Length));
				Device.BeginInvokeOnMainThread(delegate
				{
					found_bp2(tail);
				});
			}
		};
		_esc_btn.Clicked += delegate
		{
			_scanner.IsScanning = false;
			_state.OnButton1();
		};
	}

	private string ExpandTail(string tail)
	{
		tail = tail.Trim();
		if (tail.StartsWith("p", StringComparison.Ordinal))
		{
			return "PINKCS80B" + tail.Substring(1);
		}
		if (tail.StartsWith("b", StringComparison.Ordinal))
		{
			return "BLUECS80B" + tail.Substring(1);
		}
		return tail;
	}

	~BloodPressure2QRCode()
	{
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly().GetName(), "Devices/BloodPressure2/BloodPressure2QRCode.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		ConstraintExpression constraintExpression = new ConstraintExpression();
		ConstraintExpression constraintExpression2 = new ConstraintExpression();
		ConstraintExpression constraintExpression3 = new ConstraintExpression();
		ConstraintExpression constraintExpression4 = new ConstraintExpression();
		Activ8ScannerView activ8ScannerView = new Activ8ScannerView();
		Color a8_VERYDARKGREY_X = Colors.A8_VERYDARKGREY_X;
		ConstraintExpression constraintExpression5 = new ConstraintExpression();
		ConstraintExpression constraintExpression6 = new ConstraintExpression();
		ConstraintExpression constraintExpression7 = new ConstraintExpression();
		ConstraintExpression constraintExpression8 = new ConstraintExpression();
		BoxView boxView = new BoxView();
		Color a8_VERYDARKGREY_X2 = Colors.A8_VERYDARKGREY_X;
		ConstraintExpression constraintExpression9 = new ConstraintExpression();
		ConstraintExpression constraintExpression10 = new ConstraintExpression();
		ConstraintExpression constraintExpression11 = new ConstraintExpression();
		ConstraintExpression constraintExpression12 = new ConstraintExpression();
		BoxView boxView2 = new BoxView();
		Color a8_VERYDARKGREY_X3 = Colors.A8_VERYDARKGREY_X;
		ConstraintExpression constraintExpression13 = new ConstraintExpression();
		ConstraintExpression constraintExpression14 = new ConstraintExpression();
		ConstraintExpression constraintExpression15 = new ConstraintExpression();
		ConstraintExpression constraintExpression16 = new ConstraintExpression();
		BoxView boxView3 = new BoxView();
		Color a8_VERYDARKGREY_X4 = Colors.A8_VERYDARKGREY_X;
		ConstraintExpression constraintExpression17 = new ConstraintExpression();
		ConstraintExpression constraintExpression18 = new ConstraintExpression();
		ConstraintExpression constraintExpression19 = new ConstraintExpression();
		ConstraintExpression constraintExpression20 = new ConstraintExpression();
		BoxView boxView4 = new BoxView();
		Color a8_BLUE_X = Colors.A8_BLUE_X;
		ConstraintExpression constraintExpression21 = new ConstraintExpression();
		ConstraintExpression constraintExpression22 = new ConstraintExpression();
		ConstraintExpression constraintExpression23 = new ConstraintExpression();
		BoxView boxView5 = new BoxView();
		Color a8_BLUE_X2 = Colors.A8_BLUE_X;
		ConstraintExpression constraintExpression24 = new ConstraintExpression();
		ConstraintExpression constraintExpression25 = new ConstraintExpression();
		ConstraintExpression constraintExpression26 = new ConstraintExpression();
		BoxView boxView6 = new BoxView();
		Color a8_BLUE_X3 = Colors.A8_BLUE_X;
		ConstraintExpression constraintExpression27 = new ConstraintExpression();
		ConstraintExpression constraintExpression28 = new ConstraintExpression();
		ConstraintExpression constraintExpression29 = new ConstraintExpression();
		BoxView boxView7 = new BoxView();
		Color a8_BLUE_X4 = Colors.A8_BLUE_X;
		ConstraintExpression constraintExpression30 = new ConstraintExpression();
		ConstraintExpression constraintExpression31 = new ConstraintExpression();
		ConstraintExpression constraintExpression32 = new ConstraintExpression();
		BoxView boxView8 = new BoxView();
		ConstraintExpression constraintExpression33 = new ConstraintExpression();
		ConstraintExpression constraintExpression34 = new ConstraintExpression();
		ConstraintExpression constraintExpression35 = new ConstraintExpression();
		ConstraintExpression constraintExpression36 = new ConstraintExpression();
		Color a8_BLUE_X5 = Colors.A8_BLUE_X;
		Label label = new Label();
		Color a8_LIGHTGREY_X = Colors.A8_LIGHTGREY_X;
		Label label2 = new Label();
		StackLayout stackLayout = new StackLayout();
		ConstraintExpression constraintExpression37 = new ConstraintExpression();
		ConstraintExpression constraintExpression38 = new ConstraintExpression();
		ConstraintExpression constraintExpression39 = new ConstraintExpression();
		ConstraintExpression constraintExpression40 = new ConstraintExpression();
		Image image = new Image();
		BlueButton blueButton = new BlueButton();
		StackLayout stackLayout2 = new StackLayout();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(activ8ScannerView, nameScope);
		((INameScope)nameScope).RegisterName("_scanner", (object)activ8ScannerView);
		if (activ8ScannerView.StyleId == null)
		{
			activ8ScannerView.StyleId = "_scanner";
		}
		NameScope.SetNameScope(boxView, nameScope);
		NameScope.SetNameScope(boxView2, nameScope);
		NameScope.SetNameScope(boxView3, nameScope);
		NameScope.SetNameScope(boxView4, nameScope);
		NameScope.SetNameScope(boxView5, nameScope);
		NameScope.SetNameScope(boxView6, nameScope);
		NameScope.SetNameScope(boxView7, nameScope);
		NameScope.SetNameScope(boxView8, nameScope);
		NameScope.SetNameScope(stackLayout, nameScope);
		NameScope.SetNameScope(label, nameScope);
		NameScope.SetNameScope(label2, nameScope);
		NameScope.SetNameScope(stackLayout2, nameScope);
		NameScope.SetNameScope(image, nameScope);
		NameScope.SetNameScope(blueButton, nameScope);
		((INameScope)nameScope).RegisterName("_esc_btn", (object)blueButton);
		if (blueButton.StyleId == null)
		{
			blueButton.StyleId = "_esc_btn";
		}
		_scanner = activ8ScannerView;
		_esc_btn = blueButton;
		SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(0.0));
		SetValue(View.MarginProperty, new Thickness(0.0, -10.0, 0.0, 0.0));
		constraintExpression.Type = ConstraintType.RelativeToParent;
		constraintExpression.Property = "Width";
		constraintExpression.Factor = 0.0;
		constraintExpression.Constant = 0.0;
		ConstraintExpression constraintExpression41 = constraintExpression;
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 2];
		array[0] = activ8ScannerView;
		array[1] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, RelativeLayout.XConstraintProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(11, 27)));
		Constraint value = ((IMarkupExtension<Constraint>)constraintExpression41).ProvideValue((IServiceProvider)xamlServiceProvider);
		activ8ScannerView.SetValue(RelativeLayout.XConstraintProperty, value);
		constraintExpression2.Type = ConstraintType.RelativeToParent;
		constraintExpression2.Property = "Height";
		constraintExpression2.Factor = 0.0;
		constraintExpression2.Constant = 0.0;
		ConstraintExpression constraintExpression42 = constraintExpression2;
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 2];
		array2[0] = activ8ScannerView;
		array2[1] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, RelativeLayout.YConstraintProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(15, 27)));
		Constraint value2 = ((IMarkupExtension<Constraint>)constraintExpression42).ProvideValue((IServiceProvider)xamlServiceProvider2);
		activ8ScannerView.SetValue(RelativeLayout.YConstraintProperty, value2);
		constraintExpression3.Type = ConstraintType.RelativeToParent;
		constraintExpression3.Property = "Height";
		constraintExpression3.Factor = 1.0;
		constraintExpression3.Constant = 0.0;
		ConstraintExpression constraintExpression43 = constraintExpression3;
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 2];
		array3[0] = activ8ScannerView;
		array3[1] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, RelativeLayout.HeightConstraintProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(19, 27)));
		Constraint value3 = ((IMarkupExtension<Constraint>)constraintExpression43).ProvideValue((IServiceProvider)xamlServiceProvider3);
		activ8ScannerView.SetValue(RelativeLayout.HeightConstraintProperty, value3);
		constraintExpression4.Type = ConstraintType.RelativeToParent;
		constraintExpression4.Property = "Width";
		constraintExpression4.Factor = 1.0;
		constraintExpression4.Constant = 0.0;
		ConstraintExpression constraintExpression44 = constraintExpression4;
		XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
		Type typeFromHandle7 = typeof(IProvideValueTarget);
		object[] array4 = new object[0 + 2];
		array4[0] = activ8ScannerView;
		array4[1] = this;
		xamlServiceProvider4.Add(typeFromHandle7, new SimpleValueTargetProvider(array4, RelativeLayout.WidthConstraintProperty));
		xamlServiceProvider4.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle8 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
		xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver4.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver4.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(23, 27)));
		Constraint value4 = ((IMarkupExtension<Constraint>)constraintExpression44).ProvideValue((IServiceProvider)xamlServiceProvider4);
		activ8ScannerView.SetValue(RelativeLayout.WidthConstraintProperty, value4);
		((ICollection<View>)Children).Add((View)activ8ScannerView);
		boxView.SetValue(BoxView.ColorProperty, a8_VERYDARKGREY_X);
		boxView.SetValue(VisualElement.OpacityProperty, 0.75);
		constraintExpression5.Type = ConstraintType.RelativeToParent;
		constraintExpression5.Property = "Width";
		constraintExpression5.Factor = 0.0;
		constraintExpression5.Constant = 0.0;
		ConstraintExpression constraintExpression45 = constraintExpression5;
		XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
		Type typeFromHandle9 = typeof(IProvideValueTarget);
		object[] array5 = new object[0 + 2];
		array5[0] = boxView;
		array5[1] = this;
		xamlServiceProvider5.Add(typeFromHandle9, new SimpleValueTargetProvider(array5, RelativeLayout.XConstraintProperty));
		xamlServiceProvider5.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle10 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
		xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver5.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver5.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(29, 27)));
		Constraint value5 = ((IMarkupExtension<Constraint>)constraintExpression45).ProvideValue((IServiceProvider)xamlServiceProvider5);
		boxView.SetValue(RelativeLayout.XConstraintProperty, value5);
		constraintExpression6.Type = ConstraintType.RelativeToParent;
		constraintExpression6.Property = "Height";
		constraintExpression6.Factor = 0.0;
		constraintExpression6.Constant = 0.0;
		ConstraintExpression constraintExpression46 = constraintExpression6;
		XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
		Type typeFromHandle11 = typeof(IProvideValueTarget);
		object[] array6 = new object[0 + 2];
		array6[0] = boxView;
		array6[1] = this;
		xamlServiceProvider6.Add(typeFromHandle11, new SimpleValueTargetProvider(array6, RelativeLayout.YConstraintProperty));
		xamlServiceProvider6.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle12 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
		xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver6.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver6.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(33, 27)));
		Constraint value6 = ((IMarkupExtension<Constraint>)constraintExpression46).ProvideValue((IServiceProvider)xamlServiceProvider6);
		boxView.SetValue(RelativeLayout.YConstraintProperty, value6);
		constraintExpression7.Type = ConstraintType.RelativeToParent;
		constraintExpression7.Property = "Height";
		constraintExpression7.Factor = 0.4;
		constraintExpression7.Constant = 0.0;
		ConstraintExpression constraintExpression47 = constraintExpression7;
		XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
		Type typeFromHandle13 = typeof(IProvideValueTarget);
		object[] array7 = new object[0 + 2];
		array7[0] = boxView;
		array7[1] = this;
		xamlServiceProvider7.Add(typeFromHandle13, new SimpleValueTargetProvider(array7, RelativeLayout.HeightConstraintProperty));
		xamlServiceProvider7.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle14 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
		xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver7.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver7.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(37, 27)));
		Constraint value7 = ((IMarkupExtension<Constraint>)constraintExpression47).ProvideValue((IServiceProvider)xamlServiceProvider7);
		boxView.SetValue(RelativeLayout.HeightConstraintProperty, value7);
		constraintExpression8.Type = ConstraintType.RelativeToParent;
		constraintExpression8.Property = "Width";
		constraintExpression8.Factor = 1.0;
		constraintExpression8.Constant = 0.0;
		ConstraintExpression constraintExpression48 = constraintExpression8;
		XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
		Type typeFromHandle15 = typeof(IProvideValueTarget);
		object[] array8 = new object[0 + 2];
		array8[0] = boxView;
		array8[1] = this;
		xamlServiceProvider8.Add(typeFromHandle15, new SimpleValueTargetProvider(array8, RelativeLayout.WidthConstraintProperty));
		xamlServiceProvider8.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle16 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
		xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver8.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver8.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(41, 27)));
		Constraint value8 = ((IMarkupExtension<Constraint>)constraintExpression48).ProvideValue((IServiceProvider)xamlServiceProvider8);
		boxView.SetValue(RelativeLayout.WidthConstraintProperty, value8);
		((ICollection<View>)Children).Add((View)boxView);
		boxView2.SetValue(BoxView.ColorProperty, a8_VERYDARKGREY_X2);
		boxView2.SetValue(VisualElement.OpacityProperty, 0.75);
		constraintExpression9.Type = ConstraintType.RelativeToParent;
		constraintExpression9.Property = "Width";
		constraintExpression9.Factor = 0.0;
		constraintExpression9.Constant = 0.0;
		ConstraintExpression constraintExpression49 = constraintExpression9;
		XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
		Type typeFromHandle17 = typeof(IProvideValueTarget);
		object[] array9 = new object[0 + 2];
		array9[0] = boxView2;
		array9[1] = this;
		xamlServiceProvider9.Add(typeFromHandle17, new SimpleValueTargetProvider(array9, RelativeLayout.XConstraintProperty));
		xamlServiceProvider9.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle18 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
		xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver9.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver9.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(47, 27)));
		Constraint value9 = ((IMarkupExtension<Constraint>)constraintExpression49).ProvideValue((IServiceProvider)xamlServiceProvider9);
		boxView2.SetValue(RelativeLayout.XConstraintProperty, value9);
		constraintExpression10.Type = ConstraintType.RelativeToParent;
		constraintExpression10.Property = "Height";
		constraintExpression10.Factor = 0.4;
		constraintExpression10.Constant = 0.0;
		ConstraintExpression constraintExpression50 = constraintExpression10;
		XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
		Type typeFromHandle19 = typeof(IProvideValueTarget);
		object[] array10 = new object[0 + 2];
		array10[0] = boxView2;
		array10[1] = this;
		xamlServiceProvider10.Add(typeFromHandle19, new SimpleValueTargetProvider(array10, RelativeLayout.YConstraintProperty));
		xamlServiceProvider10.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle20 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
		xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver10.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver10.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(51, 27)));
		Constraint value10 = ((IMarkupExtension<Constraint>)constraintExpression50).ProvideValue((IServiceProvider)xamlServiceProvider10);
		boxView2.SetValue(RelativeLayout.YConstraintProperty, value10);
		constraintExpression11.Type = ConstraintType.RelativeToParent;
		constraintExpression11.Property = "Height";
		constraintExpression11.Factor = 0.3;
		constraintExpression11.Constant = 0.0;
		ConstraintExpression constraintExpression51 = constraintExpression11;
		XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
		Type typeFromHandle21 = typeof(IProvideValueTarget);
		object[] array11 = new object[0 + 2];
		array11[0] = boxView2;
		array11[1] = this;
		xamlServiceProvider11.Add(typeFromHandle21, new SimpleValueTargetProvider(array11, RelativeLayout.HeightConstraintProperty));
		xamlServiceProvider11.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle22 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
		xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver11.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver11.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(55, 27)));
		Constraint value11 = ((IMarkupExtension<Constraint>)constraintExpression51).ProvideValue((IServiceProvider)xamlServiceProvider11);
		boxView2.SetValue(RelativeLayout.HeightConstraintProperty, value11);
		constraintExpression12.Type = ConstraintType.RelativeToParent;
		constraintExpression12.Property = "Width";
		constraintExpression12.Factor = 0.25;
		constraintExpression12.Constant = 0.0;
		ConstraintExpression constraintExpression52 = constraintExpression12;
		XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
		Type typeFromHandle23 = typeof(IProvideValueTarget);
		object[] array12 = new object[0 + 2];
		array12[0] = boxView2;
		array12[1] = this;
		xamlServiceProvider12.Add(typeFromHandle23, new SimpleValueTargetProvider(array12, RelativeLayout.WidthConstraintProperty));
		xamlServiceProvider12.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle24 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
		xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver12.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver12.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(59, 27)));
		Constraint value12 = ((IMarkupExtension<Constraint>)constraintExpression52).ProvideValue((IServiceProvider)xamlServiceProvider12);
		boxView2.SetValue(RelativeLayout.WidthConstraintProperty, value12);
		((ICollection<View>)Children).Add((View)boxView2);
		boxView3.SetValue(BoxView.ColorProperty, a8_VERYDARKGREY_X3);
		boxView3.SetValue(VisualElement.OpacityProperty, 0.75);
		constraintExpression13.Type = ConstraintType.RelativeToParent;
		constraintExpression13.Property = "Width";
		constraintExpression13.Factor = 0.75;
		constraintExpression13.Constant = 0.0;
		ConstraintExpression constraintExpression53 = constraintExpression13;
		XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
		Type typeFromHandle25 = typeof(IProvideValueTarget);
		object[] array13 = new object[0 + 2];
		array13[0] = boxView3;
		array13[1] = this;
		xamlServiceProvider13.Add(typeFromHandle25, new SimpleValueTargetProvider(array13, RelativeLayout.XConstraintProperty));
		xamlServiceProvider13.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle26 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
		xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver13.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver13.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(65, 27)));
		Constraint value13 = ((IMarkupExtension<Constraint>)constraintExpression53).ProvideValue((IServiceProvider)xamlServiceProvider13);
		boxView3.SetValue(RelativeLayout.XConstraintProperty, value13);
		constraintExpression14.Type = ConstraintType.RelativeToParent;
		constraintExpression14.Property = "Height";
		constraintExpression14.Factor = 0.4;
		constraintExpression14.Constant = 0.0;
		ConstraintExpression constraintExpression54 = constraintExpression14;
		XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
		Type typeFromHandle27 = typeof(IProvideValueTarget);
		object[] array14 = new object[0 + 2];
		array14[0] = boxView3;
		array14[1] = this;
		xamlServiceProvider14.Add(typeFromHandle27, new SimpleValueTargetProvider(array14, RelativeLayout.YConstraintProperty));
		xamlServiceProvider14.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle28 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
		xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver14.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver14.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(69, 27)));
		Constraint value14 = ((IMarkupExtension<Constraint>)constraintExpression54).ProvideValue((IServiceProvider)xamlServiceProvider14);
		boxView3.SetValue(RelativeLayout.YConstraintProperty, value14);
		constraintExpression15.Type = ConstraintType.RelativeToParent;
		constraintExpression15.Property = "Height";
		constraintExpression15.Factor = 0.3;
		constraintExpression15.Constant = 0.0;
		ConstraintExpression constraintExpression55 = constraintExpression15;
		XamlServiceProvider xamlServiceProvider15 = new XamlServiceProvider();
		Type typeFromHandle29 = typeof(IProvideValueTarget);
		object[] array15 = new object[0 + 2];
		array15[0] = boxView3;
		array15[1] = this;
		xamlServiceProvider15.Add(typeFromHandle29, new SimpleValueTargetProvider(array15, RelativeLayout.HeightConstraintProperty));
		xamlServiceProvider15.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle30 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver15 = new XmlNamespaceResolver();
		xmlNamespaceResolver15.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver15.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver15.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver15.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider15.Add(typeFromHandle30, new XamlTypeResolver(xmlNamespaceResolver15, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider15.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(73, 27)));
		Constraint value15 = ((IMarkupExtension<Constraint>)constraintExpression55).ProvideValue((IServiceProvider)xamlServiceProvider15);
		boxView3.SetValue(RelativeLayout.HeightConstraintProperty, value15);
		constraintExpression16.Type = ConstraintType.RelativeToParent;
		constraintExpression16.Property = "Width";
		constraintExpression16.Factor = 0.25;
		constraintExpression16.Constant = 0.0;
		ConstraintExpression constraintExpression56 = constraintExpression16;
		XamlServiceProvider xamlServiceProvider16 = new XamlServiceProvider();
		Type typeFromHandle31 = typeof(IProvideValueTarget);
		object[] array16 = new object[0 + 2];
		array16[0] = boxView3;
		array16[1] = this;
		xamlServiceProvider16.Add(typeFromHandle31, new SimpleValueTargetProvider(array16, RelativeLayout.WidthConstraintProperty));
		xamlServiceProvider16.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle32 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver16 = new XmlNamespaceResolver();
		xmlNamespaceResolver16.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver16.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver16.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver16.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider16.Add(typeFromHandle32, new XamlTypeResolver(xmlNamespaceResolver16, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider16.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(77, 27)));
		Constraint value16 = ((IMarkupExtension<Constraint>)constraintExpression56).ProvideValue((IServiceProvider)xamlServiceProvider16);
		boxView3.SetValue(RelativeLayout.WidthConstraintProperty, value16);
		((ICollection<View>)Children).Add((View)boxView3);
		boxView4.SetValue(BoxView.ColorProperty, a8_VERYDARKGREY_X4);
		boxView4.SetValue(VisualElement.OpacityProperty, 0.75);
		constraintExpression17.Type = ConstraintType.RelativeToParent;
		constraintExpression17.Property = "Width";
		constraintExpression17.Factor = 0.0;
		constraintExpression17.Constant = 0.0;
		ConstraintExpression constraintExpression57 = constraintExpression17;
		XamlServiceProvider xamlServiceProvider17 = new XamlServiceProvider();
		Type typeFromHandle33 = typeof(IProvideValueTarget);
		object[] array17 = new object[0 + 2];
		array17[0] = boxView4;
		array17[1] = this;
		xamlServiceProvider17.Add(typeFromHandle33, new SimpleValueTargetProvider(array17, RelativeLayout.XConstraintProperty));
		xamlServiceProvider17.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle34 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver17 = new XmlNamespaceResolver();
		xmlNamespaceResolver17.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver17.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver17.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver17.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider17.Add(typeFromHandle34, new XamlTypeResolver(xmlNamespaceResolver17, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider17.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(83, 27)));
		Constraint value17 = ((IMarkupExtension<Constraint>)constraintExpression57).ProvideValue((IServiceProvider)xamlServiceProvider17);
		boxView4.SetValue(RelativeLayout.XConstraintProperty, value17);
		constraintExpression18.Type = ConstraintType.RelativeToParent;
		constraintExpression18.Property = "Height";
		constraintExpression18.Factor = 0.7;
		constraintExpression18.Constant = 0.0;
		ConstraintExpression constraintExpression58 = constraintExpression18;
		XamlServiceProvider xamlServiceProvider18 = new XamlServiceProvider();
		Type typeFromHandle35 = typeof(IProvideValueTarget);
		object[] array18 = new object[0 + 2];
		array18[0] = boxView4;
		array18[1] = this;
		xamlServiceProvider18.Add(typeFromHandle35, new SimpleValueTargetProvider(array18, RelativeLayout.YConstraintProperty));
		xamlServiceProvider18.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle36 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver18 = new XmlNamespaceResolver();
		xmlNamespaceResolver18.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver18.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver18.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver18.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider18.Add(typeFromHandle36, new XamlTypeResolver(xmlNamespaceResolver18, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider18.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(87, 27)));
		Constraint value18 = ((IMarkupExtension<Constraint>)constraintExpression58).ProvideValue((IServiceProvider)xamlServiceProvider18);
		boxView4.SetValue(RelativeLayout.YConstraintProperty, value18);
		constraintExpression19.Type = ConstraintType.RelativeToParent;
		constraintExpression19.Property = "Height";
		constraintExpression19.Factor = 0.3;
		constraintExpression19.Constant = 0.0;
		ConstraintExpression constraintExpression59 = constraintExpression19;
		XamlServiceProvider xamlServiceProvider19 = new XamlServiceProvider();
		Type typeFromHandle37 = typeof(IProvideValueTarget);
		object[] array19 = new object[0 + 2];
		array19[0] = boxView4;
		array19[1] = this;
		xamlServiceProvider19.Add(typeFromHandle37, new SimpleValueTargetProvider(array19, RelativeLayout.HeightConstraintProperty));
		xamlServiceProvider19.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle38 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver19 = new XmlNamespaceResolver();
		xmlNamespaceResolver19.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver19.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver19.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver19.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider19.Add(typeFromHandle38, new XamlTypeResolver(xmlNamespaceResolver19, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider19.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(91, 27)));
		Constraint value19 = ((IMarkupExtension<Constraint>)constraintExpression59).ProvideValue((IServiceProvider)xamlServiceProvider19);
		boxView4.SetValue(RelativeLayout.HeightConstraintProperty, value19);
		constraintExpression20.Type = ConstraintType.RelativeToParent;
		constraintExpression20.Property = "Width";
		constraintExpression20.Factor = 1.0;
		constraintExpression20.Constant = 0.0;
		ConstraintExpression constraintExpression60 = constraintExpression20;
		XamlServiceProvider xamlServiceProvider20 = new XamlServiceProvider();
		Type typeFromHandle39 = typeof(IProvideValueTarget);
		object[] array20 = new object[0 + 2];
		array20[0] = boxView4;
		array20[1] = this;
		xamlServiceProvider20.Add(typeFromHandle39, new SimpleValueTargetProvider(array20, RelativeLayout.WidthConstraintProperty));
		xamlServiceProvider20.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle40 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver20 = new XmlNamespaceResolver();
		xmlNamespaceResolver20.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver20.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver20.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver20.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider20.Add(typeFromHandle40, new XamlTypeResolver(xmlNamespaceResolver20, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider20.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(95, 27)));
		Constraint value20 = ((IMarkupExtension<Constraint>)constraintExpression60).ProvideValue((IServiceProvider)xamlServiceProvider20);
		boxView4.SetValue(RelativeLayout.WidthConstraintProperty, value20);
		((ICollection<View>)Children).Add((View)boxView4);
		boxView5.SetValue(BoxView.ColorProperty, a8_BLUE_X);
		boxView5.SetValue(VisualElement.HeightRequestProperty, 2.0);
		constraintExpression21.Type = ConstraintType.RelativeToParent;
		constraintExpression21.Property = "Width";
		constraintExpression21.Factor = 0.25;
		constraintExpression21.Constant = 0.0;
		ConstraintExpression constraintExpression61 = constraintExpression21;
		XamlServiceProvider xamlServiceProvider21 = new XamlServiceProvider();
		Type typeFromHandle41 = typeof(IProvideValueTarget);
		object[] array21 = new object[0 + 2];
		array21[0] = boxView5;
		array21[1] = this;
		xamlServiceProvider21.Add(typeFromHandle41, new SimpleValueTargetProvider(array21, RelativeLayout.XConstraintProperty));
		xamlServiceProvider21.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle42 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver21 = new XmlNamespaceResolver();
		xmlNamespaceResolver21.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver21.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver21.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver21.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider21.Add(typeFromHandle42, new XamlTypeResolver(xmlNamespaceResolver21, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider21.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(101, 27)));
		Constraint value21 = ((IMarkupExtension<Constraint>)constraintExpression61).ProvideValue((IServiceProvider)xamlServiceProvider21);
		boxView5.SetValue(RelativeLayout.XConstraintProperty, value21);
		constraintExpression22.Type = ConstraintType.RelativeToParent;
		constraintExpression22.Property = "Height";
		constraintExpression22.Factor = 0.4;
		constraintExpression22.Constant = 0.0;
		ConstraintExpression constraintExpression62 = constraintExpression22;
		XamlServiceProvider xamlServiceProvider22 = new XamlServiceProvider();
		Type typeFromHandle43 = typeof(IProvideValueTarget);
		object[] array22 = new object[0 + 2];
		array22[0] = boxView5;
		array22[1] = this;
		xamlServiceProvider22.Add(typeFromHandle43, new SimpleValueTargetProvider(array22, RelativeLayout.YConstraintProperty));
		xamlServiceProvider22.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle44 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver22 = new XmlNamespaceResolver();
		xmlNamespaceResolver22.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver22.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver22.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver22.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider22.Add(typeFromHandle44, new XamlTypeResolver(xmlNamespaceResolver22, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider22.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(105, 27)));
		Constraint value22 = ((IMarkupExtension<Constraint>)constraintExpression62).ProvideValue((IServiceProvider)xamlServiceProvider22);
		boxView5.SetValue(RelativeLayout.YConstraintProperty, value22);
		constraintExpression23.Type = ConstraintType.RelativeToParent;
		constraintExpression23.Property = "Width";
		constraintExpression23.Factor = 0.5;
		constraintExpression23.Constant = 0.0;
		ConstraintExpression constraintExpression63 = constraintExpression23;
		XamlServiceProvider xamlServiceProvider23 = new XamlServiceProvider();
		Type typeFromHandle45 = typeof(IProvideValueTarget);
		object[] array23 = new object[0 + 2];
		array23[0] = boxView5;
		array23[1] = this;
		xamlServiceProvider23.Add(typeFromHandle45, new SimpleValueTargetProvider(array23, RelativeLayout.WidthConstraintProperty));
		xamlServiceProvider23.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle46 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver23 = new XmlNamespaceResolver();
		xmlNamespaceResolver23.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver23.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver23.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver23.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider23.Add(typeFromHandle46, new XamlTypeResolver(xmlNamespaceResolver23, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider23.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(109, 27)));
		Constraint value23 = ((IMarkupExtension<Constraint>)constraintExpression63).ProvideValue((IServiceProvider)xamlServiceProvider23);
		boxView5.SetValue(RelativeLayout.WidthConstraintProperty, value23);
		((ICollection<View>)Children).Add((View)boxView5);
		boxView6.SetValue(BoxView.ColorProperty, a8_BLUE_X2);
		boxView6.SetValue(VisualElement.HeightRequestProperty, 2.0);
		constraintExpression24.Type = ConstraintType.RelativeToParent;
		constraintExpression24.Property = "Width";
		constraintExpression24.Factor = 0.25;
		constraintExpression24.Constant = 0.0;
		ConstraintExpression constraintExpression64 = constraintExpression24;
		XamlServiceProvider xamlServiceProvider24 = new XamlServiceProvider();
		Type typeFromHandle47 = typeof(IProvideValueTarget);
		object[] array24 = new object[0 + 2];
		array24[0] = boxView6;
		array24[1] = this;
		xamlServiceProvider24.Add(typeFromHandle47, new SimpleValueTargetProvider(array24, RelativeLayout.XConstraintProperty));
		xamlServiceProvider24.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle48 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver24 = new XmlNamespaceResolver();
		xmlNamespaceResolver24.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver24.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver24.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver24.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider24.Add(typeFromHandle48, new XamlTypeResolver(xmlNamespaceResolver24, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider24.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(115, 27)));
		Constraint value24 = ((IMarkupExtension<Constraint>)constraintExpression64).ProvideValue((IServiceProvider)xamlServiceProvider24);
		boxView6.SetValue(RelativeLayout.XConstraintProperty, value24);
		constraintExpression25.Type = ConstraintType.RelativeToParent;
		constraintExpression25.Property = "Height";
		constraintExpression25.Factor = 0.7;
		constraintExpression25.Constant = 0.0;
		ConstraintExpression constraintExpression65 = constraintExpression25;
		XamlServiceProvider xamlServiceProvider25 = new XamlServiceProvider();
		Type typeFromHandle49 = typeof(IProvideValueTarget);
		object[] array25 = new object[0 + 2];
		array25[0] = boxView6;
		array25[1] = this;
		xamlServiceProvider25.Add(typeFromHandle49, new SimpleValueTargetProvider(array25, RelativeLayout.YConstraintProperty));
		xamlServiceProvider25.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle50 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver25 = new XmlNamespaceResolver();
		xmlNamespaceResolver25.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver25.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver25.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver25.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider25.Add(typeFromHandle50, new XamlTypeResolver(xmlNamespaceResolver25, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider25.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(119, 27)));
		Constraint value25 = ((IMarkupExtension<Constraint>)constraintExpression65).ProvideValue((IServiceProvider)xamlServiceProvider25);
		boxView6.SetValue(RelativeLayout.YConstraintProperty, value25);
		constraintExpression26.Type = ConstraintType.RelativeToParent;
		constraintExpression26.Property = "Width";
		constraintExpression26.Factor = 0.5;
		constraintExpression26.Constant = 0.0;
		ConstraintExpression constraintExpression66 = constraintExpression26;
		XamlServiceProvider xamlServiceProvider26 = new XamlServiceProvider();
		Type typeFromHandle51 = typeof(IProvideValueTarget);
		object[] array26 = new object[0 + 2];
		array26[0] = boxView6;
		array26[1] = this;
		xamlServiceProvider26.Add(typeFromHandle51, new SimpleValueTargetProvider(array26, RelativeLayout.WidthConstraintProperty));
		xamlServiceProvider26.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle52 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver26 = new XmlNamespaceResolver();
		xmlNamespaceResolver26.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver26.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver26.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver26.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider26.Add(typeFromHandle52, new XamlTypeResolver(xmlNamespaceResolver26, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider26.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(123, 27)));
		Constraint value26 = ((IMarkupExtension<Constraint>)constraintExpression66).ProvideValue((IServiceProvider)xamlServiceProvider26);
		boxView6.SetValue(RelativeLayout.WidthConstraintProperty, value26);
		((ICollection<View>)Children).Add((View)boxView6);
		boxView7.SetValue(BoxView.ColorProperty, a8_BLUE_X3);
		boxView7.SetValue(VisualElement.WidthRequestProperty, 2.0);
		constraintExpression27.Type = ConstraintType.RelativeToParent;
		constraintExpression27.Property = "Width";
		constraintExpression27.Factor = 0.25;
		constraintExpression27.Constant = 0.0;
		ConstraintExpression constraintExpression67 = constraintExpression27;
		XamlServiceProvider xamlServiceProvider27 = new XamlServiceProvider();
		Type typeFromHandle53 = typeof(IProvideValueTarget);
		object[] array27 = new object[0 + 2];
		array27[0] = boxView7;
		array27[1] = this;
		xamlServiceProvider27.Add(typeFromHandle53, new SimpleValueTargetProvider(array27, RelativeLayout.XConstraintProperty));
		xamlServiceProvider27.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle54 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver27 = new XmlNamespaceResolver();
		xmlNamespaceResolver27.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver27.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver27.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver27.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider27.Add(typeFromHandle54, new XamlTypeResolver(xmlNamespaceResolver27, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider27.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(129, 27)));
		Constraint value27 = ((IMarkupExtension<Constraint>)constraintExpression67).ProvideValue((IServiceProvider)xamlServiceProvider27);
		boxView7.SetValue(RelativeLayout.XConstraintProperty, value27);
		constraintExpression28.Type = ConstraintType.RelativeToParent;
		constraintExpression28.Property = "Height";
		constraintExpression28.Factor = 0.4;
		constraintExpression28.Constant = 0.0;
		ConstraintExpression constraintExpression68 = constraintExpression28;
		XamlServiceProvider xamlServiceProvider28 = new XamlServiceProvider();
		Type typeFromHandle55 = typeof(IProvideValueTarget);
		object[] array28 = new object[0 + 2];
		array28[0] = boxView7;
		array28[1] = this;
		xamlServiceProvider28.Add(typeFromHandle55, new SimpleValueTargetProvider(array28, RelativeLayout.YConstraintProperty));
		xamlServiceProvider28.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle56 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver28 = new XmlNamespaceResolver();
		xmlNamespaceResolver28.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver28.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver28.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver28.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider28.Add(typeFromHandle56, new XamlTypeResolver(xmlNamespaceResolver28, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider28.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(133, 27)));
		Constraint value28 = ((IMarkupExtension<Constraint>)constraintExpression68).ProvideValue((IServiceProvider)xamlServiceProvider28);
		boxView7.SetValue(RelativeLayout.YConstraintProperty, value28);
		constraintExpression29.Type = ConstraintType.RelativeToParent;
		constraintExpression29.Property = "Height";
		constraintExpression29.Factor = 0.3;
		constraintExpression29.Constant = 0.0;
		ConstraintExpression constraintExpression69 = constraintExpression29;
		XamlServiceProvider xamlServiceProvider29 = new XamlServiceProvider();
		Type typeFromHandle57 = typeof(IProvideValueTarget);
		object[] array29 = new object[0 + 2];
		array29[0] = boxView7;
		array29[1] = this;
		xamlServiceProvider29.Add(typeFromHandle57, new SimpleValueTargetProvider(array29, RelativeLayout.HeightConstraintProperty));
		xamlServiceProvider29.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle58 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver29 = new XmlNamespaceResolver();
		xmlNamespaceResolver29.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver29.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver29.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver29.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider29.Add(typeFromHandle58, new XamlTypeResolver(xmlNamespaceResolver29, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider29.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(137, 27)));
		Constraint value29 = ((IMarkupExtension<Constraint>)constraintExpression69).ProvideValue((IServiceProvider)xamlServiceProvider29);
		boxView7.SetValue(RelativeLayout.HeightConstraintProperty, value29);
		((ICollection<View>)Children).Add((View)boxView7);
		boxView8.SetValue(BoxView.ColorProperty, a8_BLUE_X4);
		boxView8.SetValue(VisualElement.WidthRequestProperty, 2.0);
		constraintExpression30.Type = ConstraintType.RelativeToParent;
		constraintExpression30.Property = "Width";
		constraintExpression30.Factor = 0.75;
		constraintExpression30.Constant = 0.0;
		ConstraintExpression constraintExpression70 = constraintExpression30;
		XamlServiceProvider xamlServiceProvider30 = new XamlServiceProvider();
		Type typeFromHandle59 = typeof(IProvideValueTarget);
		object[] array30 = new object[0 + 2];
		array30[0] = boxView8;
		array30[1] = this;
		xamlServiceProvider30.Add(typeFromHandle59, new SimpleValueTargetProvider(array30, RelativeLayout.XConstraintProperty));
		xamlServiceProvider30.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle60 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver30 = new XmlNamespaceResolver();
		xmlNamespaceResolver30.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver30.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver30.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver30.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider30.Add(typeFromHandle60, new XamlTypeResolver(xmlNamespaceResolver30, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider30.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(143, 27)));
		Constraint value30 = ((IMarkupExtension<Constraint>)constraintExpression70).ProvideValue((IServiceProvider)xamlServiceProvider30);
		boxView8.SetValue(RelativeLayout.XConstraintProperty, value30);
		constraintExpression31.Type = ConstraintType.RelativeToParent;
		constraintExpression31.Property = "Height";
		constraintExpression31.Factor = 0.4;
		constraintExpression31.Constant = 0.0;
		ConstraintExpression constraintExpression71 = constraintExpression31;
		XamlServiceProvider xamlServiceProvider31 = new XamlServiceProvider();
		Type typeFromHandle61 = typeof(IProvideValueTarget);
		object[] array31 = new object[0 + 2];
		array31[0] = boxView8;
		array31[1] = this;
		xamlServiceProvider31.Add(typeFromHandle61, new SimpleValueTargetProvider(array31, RelativeLayout.YConstraintProperty));
		xamlServiceProvider31.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle62 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver31 = new XmlNamespaceResolver();
		xmlNamespaceResolver31.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver31.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver31.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver31.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider31.Add(typeFromHandle62, new XamlTypeResolver(xmlNamespaceResolver31, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider31.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(147, 27)));
		Constraint value31 = ((IMarkupExtension<Constraint>)constraintExpression71).ProvideValue((IServiceProvider)xamlServiceProvider31);
		boxView8.SetValue(RelativeLayout.YConstraintProperty, value31);
		constraintExpression32.Type = ConstraintType.RelativeToParent;
		constraintExpression32.Property = "Height";
		constraintExpression32.Factor = 0.3;
		constraintExpression32.Constant = 0.0;
		ConstraintExpression constraintExpression72 = constraintExpression32;
		XamlServiceProvider xamlServiceProvider32 = new XamlServiceProvider();
		Type typeFromHandle63 = typeof(IProvideValueTarget);
		object[] array32 = new object[0 + 2];
		array32[0] = boxView8;
		array32[1] = this;
		xamlServiceProvider32.Add(typeFromHandle63, new SimpleValueTargetProvider(array32, RelativeLayout.HeightConstraintProperty));
		xamlServiceProvider32.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle64 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver32 = new XmlNamespaceResolver();
		xmlNamespaceResolver32.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver32.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver32.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver32.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider32.Add(typeFromHandle64, new XamlTypeResolver(xmlNamespaceResolver32, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider32.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(151, 27)));
		Constraint value32 = ((IMarkupExtension<Constraint>)constraintExpression72).ProvideValue((IServiceProvider)xamlServiceProvider32);
		boxView8.SetValue(RelativeLayout.HeightConstraintProperty, value32);
		((ICollection<View>)Children).Add((View)boxView8);
		stackLayout.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		stackLayout.SetValue(StackLayout.SpacingProperty, 15.0);
		constraintExpression33.Type = ConstraintType.RelativeToParent;
		constraintExpression33.Property = "Width";
		constraintExpression33.Factor = 0.0;
		constraintExpression33.Constant = 0.0;
		ConstraintExpression constraintExpression73 = constraintExpression33;
		XamlServiceProvider xamlServiceProvider33 = new XamlServiceProvider();
		Type typeFromHandle65 = typeof(IProvideValueTarget);
		object[] array33 = new object[0 + 2];
		array33[0] = stackLayout;
		array33[1] = this;
		xamlServiceProvider33.Add(typeFromHandle65, new SimpleValueTargetProvider(array33, RelativeLayout.XConstraintProperty));
		xamlServiceProvider33.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle66 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver33 = new XmlNamespaceResolver();
		xmlNamespaceResolver33.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver33.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver33.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver33.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider33.Add(typeFromHandle66, new XamlTypeResolver(xmlNamespaceResolver33, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider33.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(157, 9)));
		Constraint value33 = ((IMarkupExtension<Constraint>)constraintExpression73).ProvideValue((IServiceProvider)xamlServiceProvider33);
		stackLayout.SetValue(RelativeLayout.XConstraintProperty, value33);
		constraintExpression34.Type = ConstraintType.RelativeToParent;
		constraintExpression34.Property = "Height";
		constraintExpression34.Factor = 0.0;
		constraintExpression34.Constant = 0.0;
		ConstraintExpression constraintExpression74 = constraintExpression34;
		XamlServiceProvider xamlServiceProvider34 = new XamlServiceProvider();
		Type typeFromHandle67 = typeof(IProvideValueTarget);
		object[] array34 = new object[0 + 2];
		array34[0] = stackLayout;
		array34[1] = this;
		xamlServiceProvider34.Add(typeFromHandle67, new SimpleValueTargetProvider(array34, RelativeLayout.YConstraintProperty));
		xamlServiceProvider34.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle68 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver34 = new XmlNamespaceResolver();
		xmlNamespaceResolver34.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver34.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver34.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver34.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider34.Add(typeFromHandle68, new XamlTypeResolver(xmlNamespaceResolver34, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider34.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(161, 9)));
		Constraint value34 = ((IMarkupExtension<Constraint>)constraintExpression74).ProvideValue((IServiceProvider)xamlServiceProvider34);
		stackLayout.SetValue(RelativeLayout.YConstraintProperty, value34);
		constraintExpression35.Type = ConstraintType.RelativeToParent;
		constraintExpression35.Property = "Width";
		constraintExpression35.Factor = 1.0;
		constraintExpression35.Constant = 0.0;
		ConstraintExpression constraintExpression75 = constraintExpression35;
		XamlServiceProvider xamlServiceProvider35 = new XamlServiceProvider();
		Type typeFromHandle69 = typeof(IProvideValueTarget);
		object[] array35 = new object[0 + 2];
		array35[0] = stackLayout;
		array35[1] = this;
		xamlServiceProvider35.Add(typeFromHandle69, new SimpleValueTargetProvider(array35, RelativeLayout.WidthConstraintProperty));
		xamlServiceProvider35.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle70 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver35 = new XmlNamespaceResolver();
		xmlNamespaceResolver35.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver35.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver35.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver35.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider35.Add(typeFromHandle70, new XamlTypeResolver(xmlNamespaceResolver35, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider35.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(165, 9)));
		Constraint value35 = ((IMarkupExtension<Constraint>)constraintExpression75).ProvideValue((IServiceProvider)xamlServiceProvider35);
		stackLayout.SetValue(RelativeLayout.WidthConstraintProperty, value35);
		constraintExpression36.Type = ConstraintType.RelativeToParent;
		constraintExpression36.Property = "Height";
		constraintExpression36.Factor = 0.4;
		constraintExpression36.Constant = 0.0;
		ConstraintExpression constraintExpression76 = constraintExpression36;
		XamlServiceProvider xamlServiceProvider36 = new XamlServiceProvider();
		Type typeFromHandle71 = typeof(IProvideValueTarget);
		object[] array36 = new object[0 + 2];
		array36[0] = stackLayout;
		array36[1] = this;
		xamlServiceProvider36.Add(typeFromHandle71, new SimpleValueTargetProvider(array36, RelativeLayout.HeightConstraintProperty));
		xamlServiceProvider36.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle72 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver36 = new XmlNamespaceResolver();
		xmlNamespaceResolver36.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver36.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver36.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver36.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider36.Add(typeFromHandle72, new XamlTypeResolver(xmlNamespaceResolver36, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider36.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(169, 9)));
		Constraint value36 = ((IMarkupExtension<Constraint>)constraintExpression76).ProvideValue((IServiceProvider)xamlServiceProvider36);
		stackLayout.SetValue(RelativeLayout.HeightConstraintProperty, value36);
		label.SetValue(Catalog.MessageProperty, "Identify your Blood Pressure2 monitor");
		Label label3 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider37 = new XamlServiceProvider();
		Type typeFromHandle73 = typeof(IProvideValueTarget);
		object[] array37 = new object[0 + 3];
		array37[0] = label;
		array37[1] = stackLayout;
		array37[2] = this;
		xamlServiceProvider37.Add(typeFromHandle73, new SimpleValueTargetProvider(array37, Label.FontSizeProperty));
		xamlServiceProvider37.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle74 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver37 = new XmlNamespaceResolver();
		xmlNamespaceResolver37.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver37.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver37.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver37.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider37.Add(typeFromHandle74, new XamlTypeResolver(xmlNamespaceResolver37, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider37.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(175, 4)));
		label3.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider37));
		label.SetValue(Label.TextColorProperty, a8_BLUE_X5);
		label.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout.Children.Add(label);
		label2.SetValue(Catalog.MessageProperty, "Hold your camera up to the QR code on the Blood Pressure2 monitor so it appears within the blue box below.");
		Label label4 = label2;
		BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider38 = new XamlServiceProvider();
		Type typeFromHandle75 = typeof(IProvideValueTarget);
		object[] array38 = new object[0 + 3];
		array38[0] = label2;
		array38[1] = stackLayout;
		array38[2] = this;
		xamlServiceProvider38.Add(typeFromHandle75, new SimpleValueTargetProvider(array38, Label.FontSizeProperty));
		xamlServiceProvider38.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle76 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver38 = new XmlNamespaceResolver();
		xmlNamespaceResolver38.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver38.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver38.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver38.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider38.Add(typeFromHandle76, new XamlTypeResolver(xmlNamespaceResolver38, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider38.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(182, 4)));
		label4.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider38));
		label2.SetValue(Label.TextColorProperty, a8_LIGHTGREY_X);
		label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label2.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		stackLayout.Children.Add(label2);
		((ICollection<View>)Children).Add((View)stackLayout);
		stackLayout2.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		stackLayout2.SetValue(StackLayout.SpacingProperty, 15.0);
		constraintExpression37.Type = ConstraintType.RelativeToParent;
		constraintExpression37.Property = "Width";
		constraintExpression37.Factor = 0.0;
		constraintExpression37.Constant = 0.0;
		ConstraintExpression constraintExpression77 = constraintExpression37;
		XamlServiceProvider xamlServiceProvider39 = new XamlServiceProvider();
		Type typeFromHandle77 = typeof(IProvideValueTarget);
		object[] array39 = new object[0 + 2];
		array39[0] = stackLayout2;
		array39[1] = this;
		xamlServiceProvider39.Add(typeFromHandle77, new SimpleValueTargetProvider(array39, RelativeLayout.XConstraintProperty));
		xamlServiceProvider39.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle78 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver39 = new XmlNamespaceResolver();
		xmlNamespaceResolver39.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver39.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver39.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver39.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider39.Add(typeFromHandle78, new XamlTypeResolver(xmlNamespaceResolver39, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider39.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(196, 9)));
		Constraint value37 = ((IMarkupExtension<Constraint>)constraintExpression77).ProvideValue((IServiceProvider)xamlServiceProvider39);
		stackLayout2.SetValue(RelativeLayout.XConstraintProperty, value37);
		constraintExpression38.Type = ConstraintType.RelativeToParent;
		constraintExpression38.Property = "Height";
		constraintExpression38.Factor = 0.7;
		constraintExpression38.Constant = 0.0;
		ConstraintExpression constraintExpression78 = constraintExpression38;
		XamlServiceProvider xamlServiceProvider40 = new XamlServiceProvider();
		Type typeFromHandle79 = typeof(IProvideValueTarget);
		object[] array40 = new object[0 + 2];
		array40[0] = stackLayout2;
		array40[1] = this;
		xamlServiceProvider40.Add(typeFromHandle79, new SimpleValueTargetProvider(array40, RelativeLayout.YConstraintProperty));
		xamlServiceProvider40.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle80 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver40 = new XmlNamespaceResolver();
		xmlNamespaceResolver40.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver40.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver40.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver40.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider40.Add(typeFromHandle80, new XamlTypeResolver(xmlNamespaceResolver40, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider40.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(200, 9)));
		Constraint value38 = ((IMarkupExtension<Constraint>)constraintExpression78).ProvideValue((IServiceProvider)xamlServiceProvider40);
		stackLayout2.SetValue(RelativeLayout.YConstraintProperty, value38);
		constraintExpression39.Type = ConstraintType.RelativeToParent;
		constraintExpression39.Property = "Width";
		constraintExpression39.Factor = 1.0;
		constraintExpression39.Constant = 0.0;
		ConstraintExpression constraintExpression79 = constraintExpression39;
		XamlServiceProvider xamlServiceProvider41 = new XamlServiceProvider();
		Type typeFromHandle81 = typeof(IProvideValueTarget);
		object[] array41 = new object[0 + 2];
		array41[0] = stackLayout2;
		array41[1] = this;
		xamlServiceProvider41.Add(typeFromHandle81, new SimpleValueTargetProvider(array41, RelativeLayout.WidthConstraintProperty));
		xamlServiceProvider41.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle82 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver41 = new XmlNamespaceResolver();
		xmlNamespaceResolver41.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver41.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver41.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver41.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider41.Add(typeFromHandle82, new XamlTypeResolver(xmlNamespaceResolver41, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider41.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(204, 9)));
		Constraint value39 = ((IMarkupExtension<Constraint>)constraintExpression79).ProvideValue((IServiceProvider)xamlServiceProvider41);
		stackLayout2.SetValue(RelativeLayout.WidthConstraintProperty, value39);
		constraintExpression40.Type = ConstraintType.RelativeToParent;
		constraintExpression40.Property = "Height";
		constraintExpression40.Factor = 0.3;
		constraintExpression40.Constant = 0.0;
		ConstraintExpression constraintExpression80 = constraintExpression40;
		XamlServiceProvider xamlServiceProvider42 = new XamlServiceProvider();
		Type typeFromHandle83 = typeof(IProvideValueTarget);
		object[] array42 = new object[0 + 2];
		array42[0] = stackLayout2;
		array42[1] = this;
		xamlServiceProvider42.Add(typeFromHandle83, new SimpleValueTargetProvider(array42, RelativeLayout.HeightConstraintProperty));
		xamlServiceProvider42.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle84 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver42 = new XmlNamespaceResolver();
		xmlNamespaceResolver42.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver42.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver42.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver42.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider42.Add(typeFromHandle84, new XamlTypeResolver(xmlNamespaceResolver42, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider42.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(208, 9)));
		Constraint value40 = ((IMarkupExtension<Constraint>)constraintExpression80).ProvideValue((IServiceProvider)xamlServiceProvider42);
		stackLayout2.SetValue(RelativeLayout.HeightConstraintProperty, value40);
		image.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("qr_target"));
		image.SetValue(View.VerticalOptionsProperty, LayoutOptions.End);
		image.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
		stackLayout2.Children.Add(image);
		blueButton.SetValue(Catalog.MessageProperty, "I can't do this");
		blueButton.SetValue(View.VerticalOptionsProperty, LayoutOptions.EndAndExpand);
		blueButton.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		BlueButton blueButton2 = blueButton;
		BindableProperty fontSizeProperty3 = Button.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider43 = new XamlServiceProvider();
		Type typeFromHandle85 = typeof(IProvideValueTarget);
		object[] array43 = new object[0 + 3];
		array43[0] = blueButton;
		array43[1] = stackLayout2;
		array43[2] = this;
		xamlServiceProvider43.Add(typeFromHandle85, new SimpleValueTargetProvider(array43, Button.FontSizeProperty));
		xamlServiceProvider43.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle86 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver43 = new XmlNamespaceResolver();
		xmlNamespaceResolver43.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver43.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver43.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver43.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider43.Add(typeFromHandle86, new XamlTypeResolver(xmlNamespaceResolver43, typeof(BloodPressure2QRCode).GetTypeInfo().get_Assembly()));
		xamlServiceProvider43.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(215, 146)));
		blueButton2.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider43));
		blueButton.SetValue(Button.FontAttributesProperty, FontAttributes.Bold);
		stackLayout2.Children.Add(blueButton);
		((ICollection<View>)Children).Add((View)stackLayout2);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BloodPressure2QRCode));
		_scanner = this.FindByName<Activ8ScannerView>("_scanner");
		_esc_btn = this.FindByName<BlueButton>("_esc_btn");
	}
}

// Activ8rlives.BloodPressure2TakeReading
using Activ8rlives;
using System;
using System.CodeDom.Compiler;
using System.Collections.ObjectModel;
using System.Reflection;
using Vernacular;
using Vernacular.Xaml;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Devices/BloodPressure2/BloodPressure2TakeReading.xaml")]
public class BloodPressure2TakeReading : StackLayout
{
	private ObservableCollection<DiscoveredBloodPressure2x> source_ = new ObservableCollection<DiscoveredBloodPressure2x>();

	private bool scan_mode_;

	private BluetoothBloodPressure2State_Setup state_;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private StackLayout _prepping;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private StackLayout _loading;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private StackLayout _list_container;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ListView _list;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _instruction;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private StackLayout _change_container;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _changebtn;

	public BloodPressure2TakeReading(BluetoothBloodPressure2State_Setup _state)
	{
		state_ = _state;
		InitializeComponent();
		_list.ItemsSource = source_;
		_list.ItemSelected += delegate(object sender, SelectedItemChangedEventArgs e)
		{
			_loading.IsVisible = false;
			_list_container.IsVisible = false;
			_prepping.IsVisible = true;
			_state.MonitorSelected(e.SelectedItem as DiscoveredBloodPressure2x);
		};
		_changebtn.Clicked += async delegate
		{
			if (await CommonApp.CurrentCommonApp.DisplayAlert2(Vernacular.Catalog.GetString("Forget this monitor?"), Vernacular.Catalog.GetString("You will have to re-connect this or a different monitor to the Activ8rlives app if you wish to measure your blood pressure again"), Vernacular.Catalog.GetString("Forget"), Vernacular.Catalog.GetString("Cancel")))
			{
				_state.OnButton1();
			}
		};
	}

	public void OnCellClicked(object sender, EventArgs e)
	{
		object commandParameter = ((Button)sender).CommandParameter;
		foreach (object item in _list.ItemsSource)
		{
			if ((item as DiscoveredBloodPressure2x).Identifier == (string)commandParameter)
			{
				_loading.IsVisible = false;
				_list_container.IsVisible = false;
				_prepping.IsVisible = true;
				state_.MonitorSelected(item as DiscoveredBloodPressure2x);
				break;
			}
		}
	}

	public void Reset(bool scan_mode)
	{
		scan_mode_ = scan_mode;
		if (scan_mode_)
		{
			source_.Clear();
			_instruction.IsVisible = false;
			_change_container.IsVisible = false;
			_loading.IsVisible = true;
			_list_container.IsVisible = false;
			_prepping.IsVisible = false;
		}
		else
		{
			_instruction.IsVisible = true;
			_change_container.IsVisible = true;
			_loading.IsVisible = false;
			_list_container.IsVisible = false;
			_prepping.IsVisible = false;
		}
	}

	public void AddBloodPressure2(DiscoveredBloodPressure2x device)
	{
		if (scan_mode_)
		{
			_instruction.IsVisible = false;
			_loading.IsVisible = false;
			_list_container.IsVisible = true;
			_prepping.IsVisible = false;
			source_.Add(device);
		}
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BloodPressure2TakeReading).GetTypeInfo().get_Assembly().GetName(), "Devices/BloodPressure2/BloodPressure2TakeReading.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		Image image = new Image();
		Color a8_BLUE_X = Colors.A8_BLUE_X;
		Label label = new Label();
		Color a8_DARKGREY_X = Colors.A8_DARKGREY_X;
		Label label2 = new Label();
		Color a8_LIGHTGREY_X = Colors.A8_LIGHTGREY_X;
		Color a8_BLUE_X2 = Colors.A8_BLUE_X;
		ActivityIndicator activityIndicator = new ActivityIndicator();
		Color a8_DARKGREY_X2 = Colors.A8_DARKGREY_X;
		Label label3 = new Label();
		StackLayout stackLayout = new StackLayout();
		Color a8_LIGHTGREY_X2 = Colors.A8_LIGHTGREY_X;
		Color a8_BLUE_X3 = Colors.A8_BLUE_X;
		ActivityIndicator activityIndicator2 = new ActivityIndicator();
		Color a8_DARKGREY_X3 = Colors.A8_DARKGREY_X;
		Label label4 = new Label();
		StackLayout stackLayout2 = new StackLayout();
		Color a8_LIGHTGREY_X3 = Colors.A8_LIGHTGREY_X;
		Color a8_DARKGREY_X4 = Colors.A8_DARKGREY_X;
		Label label5 = new Label();
		StackLayout stackLayout3 = new StackLayout();
		DataTemplate dataTemplate = new DataTemplate();
		Activ8ListView activ8ListView = new Activ8ListView();
		StackLayout stackLayout4 = new StackLayout();
		Color a8_DARKGREY_X5 = Colors.A8_DARKGREY_X;
		Label label6 = new Label();
		Color a8_LIGHTGREY_X4 = Colors.A8_LIGHTGREY_X;
		Color a8_DARKGREY_X6 = Colors.A8_DARKGREY_X;
		Label label7 = new Label();
		StackLayout stackLayout5 = new StackLayout();
		Color a8_DARKGREY_X7 = Colors.A8_DARKGREY_X;
		Label label8 = new Label();
		Color a8_DARKGREY_X8 = Colors.A8_DARKGREY_X;
		Label label9 = new Label();
		BlueButton blueButton = new BlueButton();
		StackLayout stackLayout6 = new StackLayout();
		StackLayout stackLayout7 = new StackLayout();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(image, nameScope);
		NameScope.SetNameScope(label, nameScope);
		NameScope.SetNameScope(label2, nameScope);
		NameScope.SetNameScope(stackLayout, nameScope);
		((INameScope)nameScope).RegisterName("_prepping", (object)stackLayout);
		if (stackLayout.StyleId == null)
		{
			stackLayout.StyleId = "_prepping";
		}
		NameScope.SetNameScope(activityIndicator, nameScope);
		NameScope.SetNameScope(label3, nameScope);
		NameScope.SetNameScope(stackLayout2, nameScope);
		((INameScope)nameScope).RegisterName("_loading", (object)stackLayout2);
		if (stackLayout2.StyleId == null)
		{
			stackLayout2.StyleId = "_loading";
		}
		NameScope.SetNameScope(activityIndicator2, nameScope);
		NameScope.SetNameScope(label4, nameScope);
		NameScope.SetNameScope(stackLayout4, nameScope);
		((INameScope)nameScope).RegisterName("_list_container", (object)stackLayout4);
		if (stackLayout4.StyleId == null)
		{
			stackLayout4.StyleId = "_list_container";
		}
		NameScope.SetNameScope(stackLayout3, nameScope);
		NameScope.SetNameScope(label5, nameScope);
		NameScope.SetNameScope(activ8ListView, nameScope);
		((INameScope)nameScope).RegisterName("_list", (object)activ8ListView);
		if (activ8ListView.StyleId == null)
		{
			activ8ListView.StyleId = "_list";
		}
		NameScope.SetNameScope(label6, nameScope);
		((INameScope)nameScope).RegisterName("_instruction", (object)label6);
		if (label6.StyleId == null)
		{
			label6.StyleId = "_instruction";
		}
		NameScope.SetNameScope(stackLayout6, nameScope);
		((INameScope)nameScope).RegisterName("_change_container", (object)stackLayout6);
		if (stackLayout6.StyleId == null)
		{
			stackLayout6.StyleId = "_change_container";
		}
		NameScope.SetNameScope(stackLayout5, nameScope);
		NameScope.SetNameScope(label7, nameScope);
		NameScope.SetNameScope(label8, nameScope);
		NameScope.SetNameScope(label9, nameScope);
		NameScope.SetNameScope(blueButton, nameScope);
		((INameScope)nameScope).RegisterName("_changebtn", (object)blueButton);
		if (blueButton.StyleId == null)
		{
			blueButton.StyleId = "_changebtn";
		}
		NameScope.SetNameScope(stackLayout7, nameScope);
		_prepping = stackLayout;
		_loading = stackLayout2;
		_list_container = stackLayout4;
		_list = activ8ListView;
		_instruction = label6;
		_change_container = stackLayout6;
		_changebtn = blueButton;
		SetValue(StackLayout.SpacingProperty, 15.0);
		SetValue(VisualElement.BackgroundColorProperty, Color.White);
		image.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("bpressure2_button"));
		image.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		Children.Add(image);
		label.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Ready to measure your blood pressure...");
		Label label10 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 2];
		array[0] = label;
		array[1] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, Label.FontSizeProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BloodPressure2TakeReading).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(13, 13)));
		label10.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider));
		label.SetValue(Label.TextColorProperty, a8_BLUE_X);
		label.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Children.Add(label);
		label2.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Put the cuff on your arm, then turn the monitor ON");
		Label label11 = label2;
		BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 2];
		array2[0] = label2;
		array2[1] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.FontSizeProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BloodPressure2TakeReading).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(20, 13)));
		label11.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider2));
		label2.SetValue(Label.TextColorProperty, a8_DARKGREY_X);
		label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label2.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		label2.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		Children.Add(label2);
		stackLayout.SetValue(VisualElement.BackgroundColorProperty, a8_LIGHTGREY_X);
		stackLayout.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("true"));
		stackLayout.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout.SetValue(StackLayout.SpacingProperty, 15.0);
		stackLayout.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		activityIndicator.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		activityIndicator.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		activityIndicator.SetValue(ActivityIndicator.ColorProperty, a8_BLUE_X2);
		activityIndicator.SetValue(ActivityIndicator.IsRunningProperty, true);
		stackLayout.Children.Add(activityIndicator);
		label3.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Connected, preparing to measure...");
		label3.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label3.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		label3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		label3.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label12 = label3;
		BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 3];
		array3[0] = label3;
		array3[1] = stackLayout;
		array3[2] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, Label.FontSizeProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BloodPressure2TakeReading).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(28, 219)));
		label12.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider3));
		label3.SetValue(Label.TextColorProperty, a8_DARKGREY_X2);
		stackLayout.Children.Add(label3);
		Children.Add(stackLayout);
		stackLayout2.SetValue(VisualElement.BackgroundColorProperty, a8_LIGHTGREY_X2);
		stackLayout2.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("true"));
		stackLayout2.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout2.SetValue(StackLayout.SpacingProperty, 15.0);
		stackLayout2.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		activityIndicator2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		activityIndicator2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		activityIndicator2.SetValue(ActivityIndicator.ColorProperty, a8_BLUE_X3);
		activityIndicator2.SetValue(ActivityIndicator.IsRunningProperty, true);
		stackLayout2.Children.Add(activityIndicator2);
		label4.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Looking for nearby monitors...");
		label4.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label4.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		label4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		label4.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label13 = label4;
		BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
		Type typeFromHandle7 = typeof(IProvideValueTarget);
		object[] array4 = new object[0 + 3];
		array4[0] = label4;
		array4[1] = stackLayout2;
		array4[2] = this;
		xamlServiceProvider4.Add(typeFromHandle7, new SimpleValueTargetProvider(array4, Label.FontSizeProperty));
		xamlServiceProvider4.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle8 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
		xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver4.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver4.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(BloodPressure2TakeReading).GetTypeInfo().get_Assembly()));
		xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(33, 215)));
		label13.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider4));
		label4.SetValue(Label.TextColorProperty, a8_DARKGREY_X3);
		stackLayout2.Children.Add(label4);
		Children.Add(stackLayout2);
		stackLayout4.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(0.0));
		stackLayout4.SetValue(StackLayout.SpacingProperty, 15.0);
		stackLayout3.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		stackLayout3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout3.SetValue(VisualElement.BackgroundColorProperty, a8_LIGHTGREY_X3);
		label5.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Available monitors");
		Label label14 = label5;
		BindableProperty fontSizeProperty5 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
		Type typeFromHandle9 = typeof(IProvideValueTarget);
		object[] array5 = new object[0 + 4];
		array5[0] = label5;
		array5[1] = stackLayout3;
		array5[2] = stackLayout4;
		array5[3] = this;
		xamlServiceProvider5.Add(typeFromHandle9, new SimpleValueTargetProvider(array5, Label.FontSizeProperty));
		xamlServiceProvider5.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle10 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
		xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver5.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver5.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(BloodPressure2TakeReading).GetTypeInfo().get_Assembly()));
		xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(40, 17)));
		label14.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("22", (IServiceProvider)xamlServiceProvider5));
		label5.SetValue(Label.TextColorProperty, a8_DARKGREY_X4);
		label5.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label5.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout3.Children.Add(label5);
		stackLayout4.Children.Add(stackLayout3);
		activ8ListView.SetValue(View.MarginProperty, new Thickness(10.0, 0.0, 10.0, 0.0));
		activ8ListView.SetValue(ListView.SeparatorVisibilityProperty, SeparatorVisibility.None);
		DataTemplate dataTemplate2 = dataTemplate;
		object[] array6 = new object[0 + 4];
		array6[0] = dataTemplate;
		array6[1] = activ8ListView;
		array6[2] = stackLayout4;
		array6[3] = this;
		object[] parentValues = array6;
		((IDataTemplate)dataTemplate2).LoadTemplate = delegate
		{
			BindingExtension bindingExtension = new BindingExtension();
			BindingExtension bindingExtension2 = new BindingExtension();
			BlueButton blueButton3 = new BlueButton();
			ViewCell viewCell = new ViewCell();
			NameScope nameScope2 = new NameScope();
			NameScope.SetNameScope(viewCell, nameScope2);
			NameScope.SetNameScope(blueButton3, nameScope2);
			bindingExtension.Path = "IdentifierText";
			BindingBase binding = ((IMarkupExtension<BindingBase>)bindingExtension).ProvideValue((IServiceProvider)null);
			blueButton3.SetBinding(Button.TextProperty, binding);
			bindingExtension2.Path = "Identifier";
			BindingBase binding2 = ((IMarkupExtension<BindingBase>)bindingExtension2).ProvideValue((IServiceProvider)null);
			blueButton3.SetBinding(Button.CommandParameterProperty, binding2);
			blueButton3.Clicked += OnCellClicked;
			blueButton3.SetValue(Button.FontAttributesProperty, FontAttributes.Bold);
			BlueButton blueButton4 = blueButton3;
			BindableProperty fontSizeProperty11 = Button.FontSizeProperty;
			FontSizeConverter fontSizeConverter11 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
			Type typeFromHandle21 = typeof(IProvideValueTarget);
			int length;
			object[] array12 = new object[(length = parentValues.Length) + 2];
			Array.Copy(parentValues, 0, array12, 2, length);
			object[] array13 = array12;
			array13[0] = blueButton3;
			array13[1] = viewCell;
			xamlServiceProvider11.Add(typeFromHandle21, new SimpleValueTargetProvider(array13, Button.FontSizeProperty));
			xamlServiceProvider11.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
			{
				NameScope = nameScope2
			});
			Type typeFromHandle22 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
			xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver11.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
			xmlNamespaceResolver11.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
			xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(<InitializeComponent>_anonXamlCDataTemplate_4).GetTypeInfo().get_Assembly()));
			xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(51, 158)));
			blueButton4.SetValue(fontSizeProperty11, ((IExtendedTypeConverter)fontSizeConverter11).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider11));
			viewCell.View = blueButton3;
			return viewCell;
		};
		activ8ListView.SetValue(ItemsView<Cell>.ItemTemplateProperty, dataTemplate);
		stackLayout4.Children.Add(activ8ListView);
		Children.Add(stackLayout4);
		label6.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Measurement will start automatically after a few seconds");
		Label label15 = label6;
		BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
		Type typeFromHandle11 = typeof(IProvideValueTarget);
		object[] array7 = new object[0 + 2];
		array7[0] = label6;
		array7[1] = this;
		xamlServiceProvider6.Add(typeFromHandle11, new SimpleValueTargetProvider(array7, Label.FontSizeProperty));
		xamlServiceProvider6.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle12 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
		xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver6.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver6.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(BloodPressure2TakeReading).GetTypeInfo().get_Assembly()));
		xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(61, 13)));
		label15.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider6));
		label6.SetValue(Label.TextColorProperty, a8_DARKGREY_X5);
		label6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label6.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		Children.Add(label6);
		stackLayout6.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(0.0));
		stackLayout6.SetValue(View.MarginProperty, new Thickness(0.0, 20.0, 0.0, 0.0));
		stackLayout6.SetValue(StackLayout.SpacingProperty, 15.0);
		stackLayout5.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		stackLayout5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout5.SetValue(VisualElement.BackgroundColorProperty, a8_LIGHTGREY_X4);
		label7.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Change monitor");
		Label label16 = label7;
		BindableProperty fontSizeProperty7 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
		Type typeFromHandle13 = typeof(IProvideValueTarget);
		object[] array8 = new object[0 + 4];
		array8[0] = label7;
		array8[1] = stackLayout5;
		array8[2] = stackLayout6;
		array8[3] = this;
		xamlServiceProvider7.Add(typeFromHandle13, new SimpleValueTargetProvider(array8, Label.FontSizeProperty));
		xamlServiceProvider7.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle14 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
		xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver7.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver7.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(BloodPressure2TakeReading).GetTypeInfo().get_Assembly()));
		xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(69, 17)));
		label16.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("22", (IServiceProvider)xamlServiceProvider7));
		label7.SetValue(Label.TextColorProperty, a8_DARKGREY_X6);
		label7.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label7.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout5.Children.Add(label7);
		stackLayout6.Children.Add(stackLayout5);
		label8.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Forget this monitor before connecting to a different one");
		Label label17 = label8;
		BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
		Type typeFromHandle15 = typeof(IProvideValueTarget);
		object[] array9 = new object[0 + 3];
		array9[0] = label8;
		array9[1] = stackLayout6;
		array9[2] = this;
		xamlServiceProvider8.Add(typeFromHandle15, new SimpleValueTargetProvider(array9, Label.FontSizeProperty));
		xamlServiceProvider8.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle16 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
		xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver8.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver8.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(BloodPressure2TakeReading).GetTypeInfo().get_Assembly()));
		xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(77, 17)));
		label17.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider8));
		label8.SetValue(Label.TextColorProperty, a8_DARKGREY_X7);
		label8.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label8.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		label8.SetValue(View.MarginProperty, new Thickness(10.0, 0.0, 10.0, 0.0));
		label8.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		stackLayout6.Children.Add(label8);
		label9.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Only do this if you have a replacement monitor or are being advised to do so by the Activ8rlives support team");
		Label label18 = label9;
		BindableProperty fontSizeProperty9 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter9 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
		Type typeFromHandle17 = typeof(IProvideValueTarget);
		object[] array10 = new object[0 + 3];
		array10[0] = label9;
		array10[1] = stackLayout6;
		array10[2] = this;
		xamlServiceProvider9.Add(typeFromHandle17, new SimpleValueTargetProvider(array10, Label.FontSizeProperty));
		xamlServiceProvider9.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle18 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
		xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver9.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver9.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(BloodPressure2TakeReading).GetTypeInfo().get_Assembly()));
		xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(85, 17)));
		label18.SetValue(fontSizeProperty9, ((IExtendedTypeConverter)fontSizeConverter9).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider9));
		label9.SetValue(Label.TextColorProperty, a8_DARKGREY_X8);
		label9.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label9.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		label9.SetValue(View.MarginProperty, new Thickness(10.0, 0.0, 10.0, 0.0));
		stackLayout6.Children.Add(label9);
		blueButton.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Forget this monitor");
		BlueButton blueButton2 = blueButton;
		BindableProperty fontSizeProperty10 = Button.FontSizeProperty;
		FontSizeConverter fontSizeConverter10 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
		Type typeFromHandle19 = typeof(IProvideValueTarget);
		object[] array11 = new object[0 + 3];
		array11[0] = blueButton;
		array11[1] = stackLayout6;
		array11[2] = this;
		xamlServiceProvider10.Add(typeFromHandle19, new SimpleValueTargetProvider(array11, Button.FontSizeProperty));
		xamlServiceProvider10.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle20 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
		xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver10.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver10.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(BloodPressure2TakeReading).GetTypeInfo().get_Assembly()));
		xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(91, 87)));
		blueButton2.SetValue(fontSizeProperty10, ((IExtendedTypeConverter)fontSizeConverter10).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider10));
		blueButton.SetValue(Button.FontAttributesProperty, FontAttributes.Bold);
		stackLayout6.Children.Add(blueButton);
		Children.Add(stackLayout6);
		stackLayout7.SetValue(AbsoluteLayout.LayoutFlagsProperty, AbsoluteLayoutFlags.All);
		stackLayout7.SetValue(AbsoluteLayout.LayoutBoundsProperty, new Rectangle(1.0, 1.0, 1.0, 1.0));
		stackLayout7.SetValue(StackLayout.SpacingProperty, 15.0);
		stackLayout7.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("false"));
		Children.Add(stackLayout7);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BloodPressure2TakeReading));
		_prepping = this.FindByName<StackLayout>("_prepping");
		_loading = this.FindByName<StackLayout>("_loading");
		_list_container = this.FindByName<StackLayout>("_list_container");
		_list = this.FindByName<Activ8ListView>("_list");
		_instruction = this.FindByName<Label>("_instruction");
		_change_container = this.FindByName<StackLayout>("_change_container");
		_changebtn = this.FindByName<BlueButton>("_changebtn");
	}
}

// Activ8rlives.BloodPressure2TurnOff
using Activ8rlives;
using System;
using System.CodeDom.Compiler;
using System.Reflection;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Devices/BloodPressure2/BloodPressure2TurnOff.xaml")]
public class BloodPressure2TurnOff : StackLayout
{
	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private StackLayout _image;

	public BloodPressure2TurnOff()
	{
		InitializeComponent();
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BloodPressure2TurnOff).GetTypeInfo().get_Assembly().GetName(), "Devices/BloodPressure2/BloodPressure2TurnOff.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		Color a8_LIGHTGREY_X = Colors.A8_LIGHTGREY_X;
		Image image = new Image();
		Color a8_DARKGREY_X = Colors.A8_DARKGREY_X;
		Label label = new Label();
		Image image2 = new Image();
		StackLayout stackLayout = new StackLayout();
		Color a8_DARKGREY_X2 = Colors.A8_DARKGREY_X;
		Label label2 = new Label();
		Color a8_LIGHTGREY_X2 = Colors.A8_LIGHTGREY_X;
		Image image3 = new Image();
		StackLayout stackLayout2 = new StackLayout();
		Color a8_DARKGREY_X3 = Colors.A8_DARKGREY_X;
		Label label3 = new Label();
		Color a8_DARKGREY_X4 = Colors.A8_DARKGREY_X;
		Label label4 = new Label();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(stackLayout, nameScope);
		NameScope.SetNameScope(image, nameScope);
		NameScope.SetNameScope(label, nameScope);
		NameScope.SetNameScope(image2, nameScope);
		NameScope.SetNameScope(label2, nameScope);
		NameScope.SetNameScope(stackLayout2, nameScope);
		((INameScope)nameScope).RegisterName("_image", (object)stackLayout2);
		if (stackLayout2.StyleId == null)
		{
			stackLayout2.StyleId = "_image";
		}
		NameScope.SetNameScope(image3, nameScope);
		NameScope.SetNameScope(label3, nameScope);
		NameScope.SetNameScope(label4, nameScope);
		_image = stackLayout2;
		SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
		SetValue(StackLayout.SpacingProperty, 15.0);
		stackLayout.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout.SetValue(View.VerticalOptionsProperty, LayoutOptions.Start);
		stackLayout.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout.SetValue(View.MarginProperty, new Thickness(0.0, 0.0, 0.0, 0.0));
		stackLayout.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(5.0));
		stackLayout.SetValue(VisualElement.BackgroundColorProperty, a8_LIGHTGREY_X);
		image.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("success_icon"));
		image.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		image.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		stackLayout.Children.Add(image);
		label.SetValue(Label.TextProperty, "Measurement successful");
		Label label5 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 3];
		array[0] = label;
		array[1] = stackLayout;
		array[2] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, Label.FontSizeProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BloodPressure2TurnOff).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(14, 5)));
		label5.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("20", (IServiceProvider)xamlServiceProvider));
		label.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label.SetValue(Label.TextColorProperty, a8_DARKGREY_X);
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label.SetValue(View.VerticalOptionsProperty, LayoutOptions.CenterAndExpand);
		label.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label.SetValue(View.MarginProperty, new Thickness(0.0, 0.0, 0.0, 0.0));
		stackLayout.Children.Add(label);
		image2.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("success_icon"));
		image2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		image2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		image2.SetValue(VisualElement.RotationYProperty, 180.0);
		stackLayout.Children.Add(image2);
		Children.Add(stackLayout);
		label2.SetValue(Label.TextProperty, "Measurement of your blood pressure has been completed.");
		Label label6 = label2;
		BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 2];
		array2[0] = label2;
		array2[1] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.FontSizeProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BloodPressure2TurnOff).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(26, 4)));
		label6.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider2));
		label2.SetValue(Label.TextColorProperty, a8_DARKGREY_X2);
		label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label2.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label2.SetValue(View.MarginProperty, new Thickness(5.0, 0.0, 5.0, 0.0));
		Children.Add(label2);
		stackLayout2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
		stackLayout2.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(2.0));
		stackLayout2.SetValue(VisualElement.BackgroundColorProperty, a8_LIGHTGREY_X2);
		image3.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("bpressure2_button"));
		stackLayout2.Children.Add(image3);
		Children.Add(stackLayout2);
		label3.SetValue(Label.TextProperty, "Now turn the monitor off");
		Label label7 = label3;
		BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 2];
		array3[0] = label3;
		array3[1] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, Label.FontSizeProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BloodPressure2TurnOff).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(37, 4)));
		label7.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider3));
		label3.SetValue(Label.TextColorProperty, a8_DARKGREY_X3);
		label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label3.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label3.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label3.SetValue(View.MarginProperty, new Thickness(5.0, 0.0, 5.0, 0.0));
		Children.Add(label3);
		label4.SetValue(Label.TextProperty, "You can take the cuff of your arm and then press 'View Result' when ready.");
		Label label8 = label4;
		BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
		Type typeFromHandle7 = typeof(IProvideValueTarget);
		object[] array4 = new object[0 + 2];
		array4[0] = label4;
		array4[1] = this;
		xamlServiceProvider4.Add(typeFromHandle7, new SimpleValueTargetProvider(array4, Label.FontSizeProperty));
		xamlServiceProvider4.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle8 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
		xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver4.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver4.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(BloodPressure2TurnOff).GetTypeInfo().get_Assembly()));
		xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(45, 4)));
		label8.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider4));
		label4.SetValue(Label.TextColorProperty, a8_DARKGREY_X4);
		label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label4.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label4.SetValue(View.MarginProperty, new Thickness(5.0, 0.0, 5.0, 0.0));
		Children.Add(label4);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BloodPressure2TurnOff));
		_image = this.FindByName<StackLayout>("_image");
	}
}

// Activ8rlives.BloodPressureContants
using Activ8rlivesBase;
using System;

public class BloodPressureContants
{
	public static int BloodPressureDeviceType = 10;

	public static int BloodPressureDataPos_Systolic = 5;

	public static int BloodPressureDataPos_Diastolic = 6;

	public static int PulseDeviceType = 7;

	public static int PulseDataPos_Pulse = 2;

	public static Guid svc = "7809".AsGuid();

	public static Guid read1_char = "8A82".AsGuid();

	public static Guid read2_char = "8a91".AsGuid();

	public static Guid read3_char = "8a90".AsGuid();

	public static Guid write1_char = "8a92".AsGuid();

	public static Guid write2_char = "8a81".AsGuid();

	public static ServiceDescriptor svc1 = new ServiceDescriptor
	{
		Service = svc,
		Characteristics = new Guid[5]
		{
			read1_char,
			read2_char,
			read3_char,
			write1_char,
			write2_char
		}
	};
}

// Activ8rlives.BloodPressureDevice
using System;

public class BloodPressureDevice
{
	public Guid UUID
	{
		get;
		set;
	}

	public uint Password
	{
		get;
		set;
	}
}

// Activ8rlives.BloodPressurePage
using Activ8rlives;
using Activ8rlives.Modules.BloodPressure;
using System;
using System.Collections.Generic;
using Vernacular;
using Xamarin.Forms;

public class BloodPressurePage : TabLayout
{
	private Action<IList<string>, string> external_measure_done_;

	private bool show_measure_ack_;

	public new Action HelpAction
	{
		get
		{
			string localParameter = CommonApp.CurrentCommonApp.getDataModel().GetLocalParameter("bloodpressure-device-selection", string.Empty, -1L);
			if (localParameter.Equals("bloodpressure1"))
			{
				return delegate
				{
					CommonApp.CurrentCommonApp.PushDirect(WebFactory.MakeWebPage("help/#/bp_drilldown", Catalog.GetString($"{base.Title} Help"), null, null), Direction.RightToLeft);
				};
			}
			if (localParameter.Equals("bloodpressure2"))
			{
				return delegate
				{
					CommonApp.CurrentCommonApp.PushDirect(WebFactory.MakeWebPage("help/#/bp_drilldown2", Catalog.GetString($"{base.Title} Help"), null, null), Direction.RightToLeft);
				};
			}
			return delegate
			{
				CommonApp.CurrentCommonApp.PushDirect(WebFactory.MakeWebPage("help/#/bp_drilldown", Catalog.GetString($"{base.Title} Help"), null, null), Direction.RightToLeft);
			};
		}
	}

	private BloodPressurePage(int initial_tab, DateTime? target_date = null)
	{
		List<TabDefinition> tabs = new List<TabDefinition>
		{
			new TabDefinition
			{
				Label = Catalog.GetString("Summary"),
				Factory = delegate
				{
					bool show_measure_ack = show_measure_ack_;
					show_measure_ack_ = false;
					return new BloodPressureSummary(target_date, show_measure_ack);
				}
			},
			new TabDefinition
			{
				Label = Catalog.GetString("Charts"),
				Factory = (() => new GraphPage(TrackerGroups.CreateTrackerListForActivity("cardiovascular"), "graph-cardio"))
			},
			new TabDefinition
			{
				Label = Catalog.GetString("Measure"),
				Factory = (() => MakeMeasure())
			}
		};
		SetTabs(tabs, initial_tab);
		base.Spacing = 0.0;
	}

	public static BloodPressurePage Summary(DateTime? target_date = null)
	{
		return new BloodPressurePage(0, target_date)
		{
			show_measure_ack_ = false
		};
	}

	public static BloodPressurePage Measure(Action<IList<string>, string> measure_done)
	{
		return new BloodPressurePage(2)
		{
			external_measure_done_ = measure_done,
			show_measure_ack_ = false
		};
	}

	public void MeasureDone(IList<string> trackers, string source)
	{
		if (external_measure_done_ != null)
		{
			try
			{
				external_measure_done_(trackers, source);
			}
			catch (Exception)
			{
			}
		}
		show_measure_ack_ = true;
		JumpToPage(0);
	}

	private View MakeMeasure()
	{
		string localParameter = CommonApp.CurrentCommonApp.getDataModel().GetLocalParameter("bloodpressure-device-selection", string.Empty, -1L);
		if (localParameter.Equals("bloodpressure1"))
		{
			return new BluetoothBloodPressureView(MeasureDone, ChooseAgain);
		}
		if (localParameter.Equals("bloodpressure2"))
		{
			return new BluetoothBloodPressure2View(MeasureDone, ChooseAgain);
		}
		return new BloodPressurePickerSlide(ChooseBloodPressure1, ChooseBloodPressure2, ChooseBloodPressure3);
	}

	public static void SetBloodPressure1()
	{
		CommonApp.CurrentCommonApp.getDataModel().SetLocalParameter("bloodpressure-device-selection", "bloodpressure1", -1L);
	}

	public static void SetBloodPressure2()
	{
		CommonApp.CurrentCommonApp.getDataModel().SetLocalParameter("bloodpressure-device-selection", "bloodpressure2", -1L);
	}

	private void ChooseBloodPressure1()
	{
		SetBloodPressure1();
		SetContent(new BluetoothBloodPressureView(MeasureDone, ChooseAgain), Catalog.GetString("Measure"));
	}

	private void ChooseBloodPressure2()
	{
		SetBloodPressure2();
		SetContent(new BluetoothBloodPressure2View(MeasureDone, ChooseAgain), Catalog.GetString("Measure"));
	}

	private void ChooseBloodPressure3()
	{
		SetContent(new BloodPressureManual(MeasureDone, ChooseAgain), Catalog.GetString("Measure"));
	}

	private void ChooseAgain()
	{
		SetContent(new BloodPressurePickerSlide(ChooseBloodPressure1, ChooseBloodPressure2, ChooseBloodPressure3), Catalog.GetString("Measure"));
	}
}

// Activ8rlives.BloodPressurePickerSlide
using Activ8rlives;
using System;
using System.CodeDom.Compiler;
using System.Reflection;
using Vernacular.Xaml;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Modules/BloodPressure/BloodPressurePickerSlide.xaml")]
public class BloodPressurePickerSlide : ScrollView
{
	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _bloodpressure1;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _bloodpressure2;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _bloodpressure3;

	public BloodPressurePickerSlide(Action po1, Action po2, Action po3)
	{
		base.Resources = Theme.GetResourceDictionary();
		InitializeComponent();
		_bloodpressure1.Clicked += delegate
		{
			po1();
		};
		_bloodpressure2.Clicked += delegate
		{
			po2();
		};
		_bloodpressure3.Clicked += delegate
		{
			po3();
		};
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly().GetName(), "Modules/BloodPressure/BloodPressurePickerSlide.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		StaticResourceExtension staticResourceExtension = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension2 = new StaticResourceExtension();
		Label label = new Label();
		RowDefinition rowDefinition = new RowDefinition();
		RowDefinition rowDefinition2 = new RowDefinition();
		RowDefinition rowDefinition3 = new RowDefinition();
		RowDefinition rowDefinition4 = new RowDefinition();
		RowDefinition rowDefinition5 = new RowDefinition();
		RowDefinition rowDefinition6 = new RowDefinition();
		ColumnDefinition columnDefinition = new ColumnDefinition();
		ColumnDefinition columnDefinition2 = new ColumnDefinition();
		StaticResourceExtension staticResourceExtension3 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension4 = new StaticResourceExtension();
		Label label2 = new Label();
		StackLayout stackLayout = new StackLayout();
		StaticResourceExtension staticResourceExtension5 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension6 = new StaticResourceExtension();
		Label label3 = new Label();
		StackLayout stackLayout2 = new StackLayout();
		StaticResourceExtension staticResourceExtension7 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension8 = new StaticResourceExtension();
		Label label4 = new Label();
		StackLayout stackLayout3 = new StackLayout();
		Image image = new Image();
		Image image2 = new Image();
		Image image3 = new Image();
		BlueButton blueButton = new BlueButton();
		BlueButton blueButton2 = new BlueButton();
		BlueButton blueButton3 = new BlueButton();
		Grid grid = new Grid();
		StackLayout stackLayout4 = new StackLayout();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(stackLayout4, nameScope);
		NameScope.SetNameScope(label, nameScope);
		NameScope.SetNameScope(grid, nameScope);
		NameScope.SetNameScope(rowDefinition, nameScope);
		NameScope.SetNameScope(rowDefinition2, nameScope);
		NameScope.SetNameScope(rowDefinition3, nameScope);
		NameScope.SetNameScope(rowDefinition4, nameScope);
		NameScope.SetNameScope(rowDefinition5, nameScope);
		NameScope.SetNameScope(rowDefinition6, nameScope);
		NameScope.SetNameScope(columnDefinition, nameScope);
		NameScope.SetNameScope(columnDefinition2, nameScope);
		NameScope.SetNameScope(stackLayout, nameScope);
		NameScope.SetNameScope(label2, nameScope);
		NameScope.SetNameScope(stackLayout2, nameScope);
		NameScope.SetNameScope(label3, nameScope);
		NameScope.SetNameScope(stackLayout3, nameScope);
		NameScope.SetNameScope(label4, nameScope);
		NameScope.SetNameScope(image, nameScope);
		NameScope.SetNameScope(image2, nameScope);
		NameScope.SetNameScope(image3, nameScope);
		NameScope.SetNameScope(blueButton, nameScope);
		((INameScope)nameScope).RegisterName("_bloodpressure1", (object)blueButton);
		if (blueButton.StyleId == null)
		{
			blueButton.StyleId = "_bloodpressure1";
		}
		NameScope.SetNameScope(blueButton2, nameScope);
		((INameScope)nameScope).RegisterName("_bloodpressure2", (object)blueButton2);
		if (blueButton2.StyleId == null)
		{
			blueButton2.StyleId = "_bloodpressure2";
		}
		NameScope.SetNameScope(blueButton3, nameScope);
		((INameScope)nameScope).RegisterName("_bloodpressure3", (object)blueButton3);
		if (blueButton3.StyleId == null)
		{
			blueButton3.StyleId = "_bloodpressure3";
		}
		_bloodpressure1 = blueButton;
		_bloodpressure2 = blueButton2;
		_bloodpressure3 = blueButton3;
		staticResourceExtension.Key = "PageBGColor";
		StaticResourceExtension staticResourceExtension9 = staticResourceExtension;
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 1];
		array[0] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, VisualElement.BackgroundColorProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(7, 9)));
		object obj = ((IMarkupExtension)staticResourceExtension9).ProvideValue((IServiceProvider)xamlServiceProvider);
		BackgroundColor = (Color)obj;
		stackLayout4.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		stackLayout4.SetValue(StackLayout.SpacingProperty, 15.0);
		label.SetValue(Catalog.MessageProperty, "Choose your blood pressure monitor");
		Label label5 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 3];
		array2[0] = label;
		array2[1] = stackLayout4;
		array2[2] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.FontSizeProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(12, 17)));
		label5.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider2));
		staticResourceExtension2.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension10 = staticResourceExtension2;
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 3];
		array3[0] = label;
		array3[1] = stackLayout4;
		array3[2] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, Label.TextColorProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(13, 17)));
		object obj2 = ((IMarkupExtension)staticResourceExtension10).ProvideValue((IServiceProvider)xamlServiceProvider3);
		label.TextColor = (Color)obj2;
		label.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout4.Children.Add(label);
		grid.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		rowDefinition.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition);
		rowDefinition2.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("60"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition2);
		rowDefinition3.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition3);
		rowDefinition4.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("60"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition4);
		rowDefinition5.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition5);
		rowDefinition6.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("60"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition6);
		columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
		columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
		((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
		stackLayout.SetValue(View.VerticalOptionsProperty, LayoutOptions.Start);
		stackLayout.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout.SetValue(View.MarginProperty, new Thickness(0.0, 10.0, 0.0, 10.0));
		stackLayout.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(5.0));
		staticResourceExtension3.Key = "PageLabelBGColor";
		StaticResourceExtension staticResourceExtension11 = staticResourceExtension3;
		XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
		Type typeFromHandle7 = typeof(IProvideValueTarget);
		object[] array4 = new object[0 + 4];
		array4[0] = stackLayout;
		array4[1] = grid;
		array4[2] = stackLayout4;
		array4[3] = this;
		xamlServiceProvider4.Add(typeFromHandle7, new SimpleValueTargetProvider(array4, VisualElement.BackgroundColorProperty));
		xamlServiceProvider4.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle8 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
		xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver4.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver4.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(32, 109)));
		object obj3 = ((IMarkupExtension)staticResourceExtension11).ProvideValue((IServiceProvider)xamlServiceProvider4);
		stackLayout.BackgroundColor = (Color)obj3;
		stackLayout.SetValue(Grid.RowProperty, 0);
		stackLayout.SetValue(Grid.ColumnProperty, 0);
		stackLayout.SetValue(Grid.ColumnSpanProperty, 2);
		label2.SetValue(Label.TextProperty, "Original Blood Pressure Monitor");
		Label label6 = label2;
		BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
		Type typeFromHandle9 = typeof(IProvideValueTarget);
		object[] array5 = new object[0 + 5];
		array5[0] = label2;
		array5[1] = stackLayout;
		array5[2] = grid;
		array5[3] = stackLayout4;
		array5[4] = this;
		xamlServiceProvider5.Add(typeFromHandle9, new SimpleValueTargetProvider(array5, Label.FontSizeProperty));
		xamlServiceProvider5.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle10 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
		xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver5.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver5.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(34, 9)));
		label6.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("20", (IServiceProvider)xamlServiceProvider5));
		label2.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension4.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension12 = staticResourceExtension4;
		XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
		Type typeFromHandle11 = typeof(IProvideValueTarget);
		object[] array6 = new object[0 + 5];
		array6[0] = label2;
		array6[1] = stackLayout;
		array6[2] = grid;
		array6[3] = stackLayout4;
		array6[4] = this;
		xamlServiceProvider6.Add(typeFromHandle11, new SimpleValueTargetProvider(array6, Label.TextColorProperty));
		xamlServiceProvider6.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle12 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
		xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver6.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver6.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(36, 9)));
		object obj4 = ((IMarkupExtension)staticResourceExtension12).ProvideValue((IServiceProvider)xamlServiceProvider6);
		label2.TextColor = (Color)obj4;
		label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label2.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label2.SetValue(View.MarginProperty, new Thickness(0.0, 0.0, 0.0, 0.0));
		stackLayout.Children.Add(label2);
		grid.Children.Add(stackLayout);
		stackLayout2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Start);
		stackLayout2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout2.SetValue(View.MarginProperty, new Thickness(0.0, 20.0, 0.0, 10.0));
		stackLayout2.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(5.0));
		staticResourceExtension5.Key = "PageLabelBGColor";
		StaticResourceExtension staticResourceExtension13 = staticResourceExtension5;
		XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
		Type typeFromHandle13 = typeof(IProvideValueTarget);
		object[] array7 = new object[0 + 4];
		array7[0] = stackLayout2;
		array7[1] = grid;
		array7[2] = stackLayout4;
		array7[3] = this;
		xamlServiceProvider7.Add(typeFromHandle13, new SimpleValueTargetProvider(array7, VisualElement.BackgroundColorProperty));
		xamlServiceProvider7.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle14 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
		xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver7.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver7.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(42, 109)));
		object obj5 = ((IMarkupExtension)staticResourceExtension13).ProvideValue((IServiceProvider)xamlServiceProvider7);
		stackLayout2.BackgroundColor = (Color)obj5;
		stackLayout2.SetValue(Grid.RowProperty, 2);
		stackLayout2.SetValue(Grid.ColumnProperty, 0);
		stackLayout2.SetValue(Grid.ColumnSpanProperty, 2);
		label3.SetValue(Label.TextProperty, "Blood Pressure2");
		Label label7 = label3;
		BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
		Type typeFromHandle15 = typeof(IProvideValueTarget);
		object[] array8 = new object[0 + 5];
		array8[0] = label3;
		array8[1] = stackLayout2;
		array8[2] = grid;
		array8[3] = stackLayout4;
		array8[4] = this;
		xamlServiceProvider8.Add(typeFromHandle15, new SimpleValueTargetProvider(array8, Label.FontSizeProperty));
		xamlServiceProvider8.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle16 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
		xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver8.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver8.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(44, 9)));
		label7.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("20", (IServiceProvider)xamlServiceProvider8));
		label3.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension6.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension14 = staticResourceExtension6;
		XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
		Type typeFromHandle17 = typeof(IProvideValueTarget);
		object[] array9 = new object[0 + 5];
		array9[0] = label3;
		array9[1] = stackLayout2;
		array9[2] = grid;
		array9[3] = stackLayout4;
		array9[4] = this;
		xamlServiceProvider9.Add(typeFromHandle17, new SimpleValueTargetProvider(array9, Label.TextColorProperty));
		xamlServiceProvider9.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle18 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
		xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver9.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver9.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(46, 9)));
		object obj6 = ((IMarkupExtension)staticResourceExtension14).ProvideValue((IServiceProvider)xamlServiceProvider9);
		label3.TextColor = (Color)obj6;
		label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label3.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label3.SetValue(View.MarginProperty, new Thickness(0.0, 0.0, 0.0, 0.0));
		stackLayout2.Children.Add(label3);
		grid.Children.Add(stackLayout2);
		stackLayout3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Start);
		stackLayout3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout3.SetValue(View.MarginProperty, new Thickness(0.0, 20.0, 0.0, 10.0));
		stackLayout3.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(5.0));
		staticResourceExtension7.Key = "PageLabelBGColor";
		StaticResourceExtension staticResourceExtension15 = staticResourceExtension7;
		XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
		Type typeFromHandle19 = typeof(IProvideValueTarget);
		object[] array10 = new object[0 + 4];
		array10[0] = stackLayout3;
		array10[1] = grid;
		array10[2] = stackLayout4;
		array10[3] = this;
		xamlServiceProvider10.Add(typeFromHandle19, new SimpleValueTargetProvider(array10, VisualElement.BackgroundColorProperty));
		xamlServiceProvider10.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle20 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
		xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver10.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver10.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(52, 115)));
		object obj7 = ((IMarkupExtension)staticResourceExtension15).ProvideValue((IServiceProvider)xamlServiceProvider10);
		stackLayout3.BackgroundColor = (Color)obj7;
		stackLayout3.SetValue(Grid.RowProperty, 4);
		stackLayout3.SetValue(Grid.ColumnProperty, 0);
		stackLayout3.SetValue(Grid.ColumnSpanProperty, 2);
		label4.SetValue(Label.TextProperty, "Enter Manually");
		Label label8 = label4;
		BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
		Type typeFromHandle21 = typeof(IProvideValueTarget);
		object[] array11 = new object[0 + 5];
		array11[0] = label4;
		array11[1] = stackLayout3;
		array11[2] = grid;
		array11[3] = stackLayout4;
		array11[4] = this;
		xamlServiceProvider11.Add(typeFromHandle21, new SimpleValueTargetProvider(array11, Label.FontSizeProperty));
		xamlServiceProvider11.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle22 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
		xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver11.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver11.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(54, 21)));
		label8.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("20", (IServiceProvider)xamlServiceProvider11));
		label4.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension8.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension16 = staticResourceExtension8;
		XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
		Type typeFromHandle23 = typeof(IProvideValueTarget);
		object[] array12 = new object[0 + 5];
		array12[0] = label4;
		array12[1] = stackLayout3;
		array12[2] = grid;
		array12[3] = stackLayout4;
		array12[4] = this;
		xamlServiceProvider12.Add(typeFromHandle23, new SimpleValueTargetProvider(array12, Label.TextColorProperty));
		xamlServiceProvider12.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle24 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
		xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver12.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver12.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(56, 21)));
		object obj8 = ((IMarkupExtension)staticResourceExtension16).ProvideValue((IServiceProvider)xamlServiceProvider12);
		label4.TextColor = (Color)obj8;
		label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label4.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label4.SetValue(View.MarginProperty, new Thickness(0.0, 0.0, 0.0, 0.0));
		stackLayout3.Children.Add(label4);
		grid.Children.Add(stackLayout3);
		image.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("device_icon_bloodpressure"));
		image.SetValue(Grid.RowProperty, 1);
		image.SetValue(Grid.ColumnProperty, 0);
		image.SetValue(View.MarginProperty, new Thickness(10.0, 0.0, 5.0, 0.0));
		grid.Children.Add(image);
		image2.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("device_icon_bloodpressure2_blue"));
		image2.SetValue(Grid.RowProperty, 3);
		image2.SetValue(Grid.ColumnProperty, 0);
		image2.SetValue(View.MarginProperty, new Thickness(10.0, 0.0, 5.0, 0.0));
		grid.Children.Add(image2);
		image3.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("tracker_icon_bp"));
		image3.SetValue(Grid.RowProperty, 5);
		image3.SetValue(Grid.ColumnProperty, 0);
		image3.SetValue(View.MarginProperty, new Thickness(10.0, 0.0, 5.0, 0.0));
		grid.Children.Add(image3);
		BlueButton blueButton4 = blueButton;
		BindableProperty fontSizeProperty5 = Button.FontSizeProperty;
		FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
		Type typeFromHandle25 = typeof(IProvideValueTarget);
		object[] array13 = new object[0 + 4];
		array13[0] = blueButton;
		array13[1] = grid;
		array13[2] = stackLayout4;
		array13[3] = this;
		xamlServiceProvider13.Add(typeFromHandle25, new SimpleValueTargetProvider(array13, Button.FontSizeProperty));
		xamlServiceProvider13.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle26 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
		xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver13.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver13.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(67, 22)));
		blueButton4.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider13));
		blueButton.SetValue(Button.FontAttributesProperty, FontAttributes.Bold);
		blueButton.SetValue(Catalog.MessageProperty, "Select");
		blueButton.SetValue(Grid.RowProperty, 1);
		blueButton.SetValue(Grid.ColumnProperty, 1);
		blueButton.SetValue(View.MarginProperty, new Thickness(15.0, 5.0, 10.0, 5.0));
		grid.Children.Add(blueButton);
		BlueButton blueButton5 = blueButton2;
		BindableProperty fontSizeProperty6 = Button.FontSizeProperty;
		FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
		Type typeFromHandle27 = typeof(IProvideValueTarget);
		object[] array14 = new object[0 + 4];
		array14[0] = blueButton2;
		array14[1] = grid;
		array14[2] = stackLayout4;
		array14[3] = this;
		xamlServiceProvider14.Add(typeFromHandle27, new SimpleValueTargetProvider(array14, Button.FontSizeProperty));
		xamlServiceProvider14.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle28 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
		xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver14.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver14.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(68, 22)));
		blueButton5.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider14));
		blueButton2.SetValue(Button.FontAttributesProperty, FontAttributes.Bold);
		blueButton2.SetValue(Catalog.MessageProperty, "Select");
		blueButton2.SetValue(Grid.RowProperty, 3);
		blueButton2.SetValue(Grid.ColumnProperty, 1);
		blueButton2.SetValue(View.MarginProperty, new Thickness(15.0, 5.0, 10.0, 5.0));
		grid.Children.Add(blueButton2);
		BlueButton blueButton6 = blueButton3;
		BindableProperty fontSizeProperty7 = Button.FontSizeProperty;
		FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider15 = new XamlServiceProvider();
		Type typeFromHandle29 = typeof(IProvideValueTarget);
		object[] array15 = new object[0 + 4];
		array15[0] = blueButton3;
		array15[1] = grid;
		array15[2] = stackLayout4;
		array15[3] = this;
		xamlServiceProvider15.Add(typeFromHandle29, new SimpleValueTargetProvider(array15, Button.FontSizeProperty));
		xamlServiceProvider15.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle30 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver15 = new XmlNamespaceResolver();
		xmlNamespaceResolver15.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver15.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver15.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver15.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider15.Add(typeFromHandle30, new XamlTypeResolver(xmlNamespaceResolver15, typeof(BloodPressurePickerSlide).GetTypeInfo().get_Assembly()));
		xamlServiceProvider15.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(69, 28)));
		blueButton6.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider15));
		blueButton3.SetValue(Button.FontAttributesProperty, FontAttributes.Bold);
		blueButton3.SetValue(Catalog.MessageProperty, "Select");
		blueButton3.SetValue(Grid.RowProperty, 5);
		blueButton3.SetValue(Grid.ColumnProperty, 1);
		blueButton3.SetValue(View.MarginProperty, new Thickness(15.0, 5.0, 10.0, 5.0));
		grid.Children.Add(blueButton3);
		stackLayout4.Children.Add(grid);
		Content = stackLayout4;
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BloodPressurePickerSlide));
		_bloodpressure1 = this.FindByName<BlueButton>("_bloodpressure1");
		_bloodpressure2 = this.FindByName<BlueButton>("_bloodpressure2");
		_bloodpressure3 = this.FindByName<BlueButton>("_bloodpressure3");
	}
}

// Activ8rlives.BloodPressureState_BluetoothCheck
using Activ8rlives;

public class BloodPressureState_BluetoothCheck : BluetoothCheckStatusState<BluetoothBloodPressure>
{
	public BloodPressureState_BluetoothCheck(BluetoothBloodPressure model)
		: base(model, (string)null)
	{
	}

	public override void OnBluetoothRunning()
	{
		base.State = base.StateMachine.State_Setup;
	}
}

// Activ8rlives.BloodPressureSummary
using Activ8rlives;
using Activ8rlivesBase;
using NGraphics;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Reflection;
using System.Threading.Tasks;
using Vernacular;
using Vernacular.Xaml;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Modules/BloodPressure/BloodPressureSummary.xaml")]
public class BloodPressureSummary : StackLayout, IDataSubscriber
{
	private DataModel model_;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableLabel _prev;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8DatePicker _date;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableLabel _next;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableFrame _popup;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _close;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableStackLayout _sys;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _sys_v;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Image _sys_t;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableStackLayout _dia;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _dia_v;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Image _dia_t;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableStackLayout _hr;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _hr_v;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Image _hr_t;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private StackLayout _last3;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _bp1_d;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _sys1_v;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _dia1_v;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _bp2_d;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _sys2_v;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _dia2_v;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _bp3_d;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _sys3_v;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _dia3_v;

	public Action RemoveAction => delegate
	{
		MessageCenterUtils.Unsubscribe(this);
	};

	public BloodPressureSummary(DateTime? target_date, bool show_measure_ack)
	{
		base.Resources = Theme.GetResourceDictionary();
		InitializeComponent();
		if (show_measure_ack)
		{
			_popup.IsVisible = true;
		}
		else
		{
			_popup.IsVisible = false;
		}
		model_ = CommonApp.CurrentCommonApp.getDataModel();
		_sys_v.Text = "--";
		_dia_v.Text = "--";
		_hr_v.Text = "--";
		_sys1_v.Text = "--";
		_sys2_v.Text = "--";
		_sys3_v.Text = "--";
		_dia1_v.Text = "--";
		_dia2_v.Text = "--";
		_dia3_v.Text = "--";
		_date.Date = (target_date ?? DateTime.Today);
		_date.Format = Vernacular.Catalog.GetString("D");
		_date.HorizontalAlignment = Xamarin.Forms.TextAlignment.Center;
		_date.MaximumDate = DateTime.Today;
		_close.Clicked += delegate
		{
			_popup.IsVisible = false;
		};
		_prev.OnClickEvent += delegate
		{
			_date.Date = _date.Date.AddDays(-1.0);
		};
		_next.OnClickEvent += delegate
		{
			_date.Date = _date.Date.AddDays(1.0);
		};
		_sys.OnClickEvent += delegate
		{
			View view3 = EditorFactory.CreateEditorFor("Systolic-Blood-Pressure", _date.Date);
			CommonApp.CurrentCommonApp.Push(view3, Direction.RightToLeft);
		};
		_dia.OnClickEvent += delegate
		{
			View view2 = EditorFactory.CreateEditorFor("Diastolic-Blood-Pressure", _date.Date);
			CommonApp.CurrentCommonApp.Push(view2, Direction.RightToLeft);
		};
		_hr.OnClickEvent += delegate
		{
			View view = EditorFactory.CreateEditorFor("Pulse", _date.Date);
			CommonApp.CurrentCommonApp.Push(view, Direction.RightToLeft);
		};
		_date.DateSelected += delegate
		{
			UpdateValues();
		};
		MessageCenterUtils.DataUpdated(this);
		UpdateAll();
	}

	public void DataUpdated(ISet<string> changes, ISet<string> sources, DateTime min_date, DateTime max_date)
	{
		if (changes == null || changes.Contains("Systolic-Blood-Pressure") || changes.Contains("Diastolic-Blood-Pressure") || changes.Contains("Pulse"))
		{
			UpdateAll();
		}
	}

	~BloodPressureSummary()
	{
	}

	private void UpdateAll()
	{
		UpdateValues();
		Update();
	}

	private void UpdateValues()
	{
		NGraphics.Color _value_color = Theme.GetTheme().PageHeaderTextColor.ToNGraphics();
		Xamarin.Forms.Color _no_value_color = Theme.GetTheme().NoValueTextColor.ToForms();
		Task.Delay((int)AnimateDelays.TOTALDELAY).ContinueWith(delegate
		{
			DateTime now = DateTime.Now;
			DateTime date = _date.Date.Date;
			DateTime before = date.IsToday() ? DateTime.Now : date.AddDays(1.0);
			NumericItem sys = model_.GetLatestNumericItemForType("Systolic-Blood-Pressure", before, -1L);
			NumericItem dia = model_.GetLatestNumericItemForType("Diastolic-Blood-Pressure", before, -1L);
			NumericItem hr = model_.GetLatestNumericItemForType("Pulse", before, -1L);
			NumericItem sys_prev = (sys != null) ? model_.GetLatestNumericItemForType("Systolic-Blood-Pressure", sys.StartDate, -1L) : null;
			NumericItem dia_prev = (dia != null) ? model_.GetLatestNumericItemForType("Diastolic-Blood-Pressure", dia.StartDate, -1L) : null;
			NumericItem hr_prev = (hr != null) ? model_.GetLatestNumericItemForType("Pulse", hr.StartDate, -1L) : null;
			Device.BeginInvokeOnMainThread(delegate
			{
				if (sys != null)
				{
					_sys_v.Text = MetaData.SYS.ToHumanString(sys.Value);
					_sys_v.TextColor = MetaData.SYS.ragColor(sys.Value, _value_color).ToForms();
					AccessibilityEffect.SetAccessibilityLabel(_sys, string.Format(Vernacular.Catalog.GetString("Systolic blood pressure {0}", "Accessibility text"), new object[1]
					{
						_sys_v.Text
					}));
					if (sys_prev != null)
					{
						_sys_t.Source = Trends.GetTrendArrow(sys.Value, sys_prev.Value);
					}
					else
					{
						_sys_t.Source = null;
					}
				}
				else
				{
					_sys_v.Text = "--";
					_sys_v.TextColor = _no_value_color;
					_sys_t.Source = null;
					AccessibilityEffect.SetAccessibilityLabel(_sys, Vernacular.Catalog.GetString("Systolic blood pressure not recorded", "Accessibility text"));
				}
				if (dia != null)
				{
					_dia_v.Text = MetaData.DIA.ToHumanString(dia.Value);
					_dia_v.TextColor = MetaData.DIA.ragColor(dia.Value, _value_color).ToForms();
					AccessibilityEffect.SetAccessibilityLabel(_dia, string.Format(Vernacular.Catalog.GetString("Diastolic blood pressure {0}", "Accessibility text"), new object[1]
					{
						_dia_v.Text
					}));
					if (dia_prev != null)
					{
						_dia_t.Source = Trends.GetTrendArrow(dia.Value, dia_prev.Value);
					}
					else
					{
						_dia_t.Source = null;
					}
				}
				else
				{
					_dia_v.Text = "--";
					_dia_v.TextColor = _no_value_color;
					_dia_t.Source = null;
					AccessibilityEffect.SetAccessibilityLabel(_sys, Vernacular.Catalog.GetString("Diastolic blood pressure not recorded", "Accessibility text"));
				}
				if (hr != null)
				{
					_hr_v.Text = MetaData.PULSE.ToHumanString(hr.Value);
					_hr_v.TextColor = MetaData.PULSE.ragColor(hr.Value, _value_color).ToForms();
					AccessibilityEffect.SetAccessibilityLabel(_hr, string.Format(Vernacular.Catalog.GetString("Heart rate {0}", "Accessibility text"), new object[1]
					{
						_hr_v.Text
					}));
					if (hr_prev != null)
					{
						_hr_t.Source = Trends.GetTrendArrow(hr.Value, hr_prev.Value);
					}
					else
					{
						_hr_t.Source = null;
					}
				}
				else
				{
					_hr_v.Text = "--";
					_hr_v.TextColor = _no_value_color;
					_hr_t.Source = null;
					AccessibilityEffect.SetAccessibilityLabel(_sys, Vernacular.Catalog.GetString("Heart rate not recorded", "Accessibility text"));
				}
			});
		});
	}

	private void Update()
	{
		Task.Delay((int)AnimateDelays.TOTALDELAY).ContinueWith(delegate
		{
			BloodPressureSummary bloodPressureSummary = this;
			DateTime before = DateTime.Now;
			DateTime date = _date.Date.Date;
			NumericItem[] latest_sys = new NumericItem[3];
			NumericItem[] latest_dia = new NumericItem[3];
			for (int i = 0; i < 3; i++)
			{
				NumericItem latestNumericItemForType = model_.GetLatestNumericItemForType("Systolic-Blood-Pressure", before, -1L);
				latest_sys[i] = latestNumericItemForType;
				NumericItem latestNumericItemForType2 = model_.GetLatestNumericItemForType("Diastolic-Blood-Pressure", before, -1L);
				latest_dia[i] = latestNumericItemForType2;
				if (latestNumericItemForType != null)
				{
					before = latestNumericItemForType.StartDate;
				}
				if (latestNumericItemForType2 != null)
				{
					before = latestNumericItemForType2.StartDate;
				}
			}
			Device.BeginInvokeOnMainThread(delegate
			{
				NGraphics.Color def = Theme.GetTheme().PageHeaderTextColor.ToNGraphics();
				Xamarin.Forms.Color textColor = Theme.GetTheme().NoValueTextColor.ToForms();
				string @string = Vernacular.Catalog.GetString("Your last 3 blood pressure readings: ");
				if (latest_sys[0] != null)
				{
					bloodPressureSummary._bp1_d.Text = latest_sys[0].StartDate.ToString("dddd dd MMMM yyyy");
					bloodPressureSummary._sys1_v.Text = latest_sys[0].Value.ToString();
					bloodPressureSummary._sys1_v.TextColor = MetaData.SYS.ragColor(latest_sys[0].Value, def).ToForms();
				}
				else
				{
					bloodPressureSummary._sys1_v.Text = "--";
					bloodPressureSummary._sys1_v.TextColor = textColor;
				}
				if (latest_sys[1] != null)
				{
					bloodPressureSummary._bp2_d.Text = latest_sys[1].StartDate.ToString("dddd dd MMMM yyyy");
					bloodPressureSummary._sys2_v.Text = latest_sys[1].Value.ToString();
					bloodPressureSummary._sys2_v.TextColor = MetaData.SYS.ragColor(latest_sys[1].Value, def).ToForms();
				}
				else
				{
					bloodPressureSummary._sys2_v.Text = "--";
					bloodPressureSummary._sys2_v.TextColor = textColor;
				}
				if (latest_sys[2] != null)
				{
					bloodPressureSummary._bp3_d.Text = latest_sys[2].StartDate.ToString("dddd dd MMMM yyyy");
					bloodPressureSummary._sys3_v.Text = latest_sys[2].Value.ToString();
					bloodPressureSummary._sys3_v.TextColor = MetaData.SYS.ragColor(latest_sys[2].Value, def).ToForms();
				}
				else
				{
					bloodPressureSummary._sys3_v.Text = "--";
					bloodPressureSummary._sys3_v.TextColor = textColor;
				}
				if (latest_dia[0] != null)
				{
					bloodPressureSummary._bp1_d.Text = latest_dia[0].StartDate.ToString("dddd dd MMMM yyyy");
					bloodPressureSummary._dia1_v.Text = latest_dia[0].Value.ToString();
					bloodPressureSummary._dia1_v.TextColor = MetaData.DIA.ragColor(latest_dia[0].Value, def).ToForms();
				}
				else
				{
					bloodPressureSummary._dia1_v.Text = "--";
					bloodPressureSummary._dia1_v.TextColor = textColor;
				}
				if (latest_dia[1] != null)
				{
					bloodPressureSummary._bp2_d.Text = latest_dia[1].StartDate.ToString("dddd dd MMMM yyyy");
					bloodPressureSummary._dia2_v.Text = latest_dia[1].Value.ToString();
					bloodPressureSummary._dia2_v.TextColor = MetaData.DIA.ragColor(latest_dia[1].Value, def).ToForms();
				}
				else
				{
					bloodPressureSummary._dia2_v.Text = "--";
					bloodPressureSummary._dia2_v.TextColor = textColor;
				}
				if (latest_dia[2] != null)
				{
					bloodPressureSummary._bp3_d.Text = latest_dia[2].StartDate.ToString("dddd dd MMMM yyyy");
					bloodPressureSummary._dia3_v.Text = latest_dia[2].Value.ToString();
					bloodPressureSummary._dia3_v.TextColor = MetaData.DIA.ragColor(latest_dia[2].Value, def).ToForms();
				}
				else
				{
					bloodPressureSummary._dia3_v.Text = "--";
					bloodPressureSummary._dia3_v.TextColor = textColor;
				}
				@string += string.Format(Vernacular.Catalog.GetString("1: {0} {1} over {2}. "), new object[3]
				{
					bloodPressureSummary._bp1_d.Text,
					bloodPressureSummary._sys1_v.Text,
					bloodPressureSummary._dia1_v.Text
				});
				@string += string.Format(Vernacular.Catalog.GetString("2: {0} {1} over {2}. "), new object[3]
				{
					bloodPressureSummary._bp2_d.Text,
					bloodPressureSummary._sys2_v.Text,
					bloodPressureSummary._dia2_v.Text
				});
				@string += string.Format(Vernacular.Catalog.GetString("3: {0} {1} over {2}. "), new object[3]
				{
					bloodPressureSummary._bp3_d.Text,
					bloodPressureSummary._sys3_v.Text,
					bloodPressureSummary._dia3_v.Text
				});
				AccessibilityEffect.SetAccessibilityLabel(bloodPressureSummary._last3, @string);
			});
		});
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BloodPressureSummary).GetTypeInfo().get_Assembly().GetName(), "Modules/BloodPressure/BloodPressureSummary.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		StaticResourceExtension staticResourceExtension = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension2 = new StaticResourceExtension();
		Activ8ClickableLabel activ8ClickableLabel = new Activ8ClickableLabel();
		StaticResourceExtension staticResourceExtension3 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension4 = new StaticResourceExtension();
		Activ8DatePicker activ8DatePicker = new Activ8DatePicker();
		StaticResourceExtension staticResourceExtension5 = new StaticResourceExtension();
		Activ8ClickableLabel activ8ClickableLabel2 = new Activ8ClickableLabel();
		StackLayout stackLayout = new StackLayout();
		StaticResourceExtension staticResourceExtension6 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension7 = new StaticResourceExtension();
		Label label = new Label();
		BlueButton blueButton = new BlueButton();
		StackLayout stackLayout2 = new StackLayout();
		Activ8ClickableFrame activ8ClickableFrame = new Activ8ClickableFrame();
		Image image = new Image();
		StaticResourceExtension staticResourceExtension8 = new StaticResourceExtension();
		Label label2 = new Label();
		StackLayout stackLayout3 = new StackLayout();
		StaticResourceExtension staticResourceExtension9 = new StaticResourceExtension();
		Label label3 = new Label();
		Image image2 = new Image();
		Activ8ClickableStackLayout activ8ClickableStackLayout = new Activ8ClickableStackLayout();
		StaticResourceExtension staticResourceExtension10 = new StaticResourceExtension();
		BoxView boxView = new BoxView();
		Image image3 = new Image();
		StaticResourceExtension staticResourceExtension11 = new StaticResourceExtension();
		Label label4 = new Label();
		StackLayout stackLayout4 = new StackLayout();
		StaticResourceExtension staticResourceExtension12 = new StaticResourceExtension();
		Label label5 = new Label();
		Image image4 = new Image();
		Activ8ClickableStackLayout activ8ClickableStackLayout2 = new Activ8ClickableStackLayout();
		StaticResourceExtension staticResourceExtension13 = new StaticResourceExtension();
		BoxView boxView2 = new BoxView();
		Image image5 = new Image();
		StaticResourceExtension staticResourceExtension14 = new StaticResourceExtension();
		Label label6 = new Label();
		StackLayout stackLayout5 = new StackLayout();
		StaticResourceExtension staticResourceExtension15 = new StaticResourceExtension();
		Label label7 = new Label();
		Image image6 = new Image();
		Activ8ClickableStackLayout activ8ClickableStackLayout3 = new Activ8ClickableStackLayout();
		StaticResourceExtension staticResourceExtension16 = new StaticResourceExtension();
		BoxView boxView3 = new BoxView();
		StaticResourceExtension staticResourceExtension17 = new StaticResourceExtension();
		Label label8 = new Label();
		StaticResourceExtension staticResourceExtension18 = new StaticResourceExtension();
		Label label9 = new Label();
		StaticResourceExtension staticResourceExtension19 = new StaticResourceExtension();
		Label label10 = new Label();
		StaticResourceExtension staticResourceExtension20 = new StaticResourceExtension();
		Label label11 = new Label();
		StaticResourceExtension staticResourceExtension21 = new StaticResourceExtension();
		Label label12 = new Label();
		StackLayout stackLayout6 = new StackLayout();
		StackLayout stackLayout7 = new StackLayout();
		StaticResourceExtension staticResourceExtension22 = new StaticResourceExtension();
		BoxView boxView4 = new BoxView();
		StaticResourceExtension staticResourceExtension23 = new StaticResourceExtension();
		Label label13 = new Label();
		StaticResourceExtension staticResourceExtension24 = new StaticResourceExtension();
		Label label14 = new Label();
		StaticResourceExtension staticResourceExtension25 = new StaticResourceExtension();
		Label label15 = new Label();
		StaticResourceExtension staticResourceExtension26 = new StaticResourceExtension();
		Label label16 = new Label();
		StackLayout stackLayout8 = new StackLayout();
		StackLayout stackLayout9 = new StackLayout();
		StaticResourceExtension staticResourceExtension27 = new StaticResourceExtension();
		BoxView boxView5 = new BoxView();
		StaticResourceExtension staticResourceExtension28 = new StaticResourceExtension();
		Label label17 = new Label();
		StaticResourceExtension staticResourceExtension29 = new StaticResourceExtension();
		Label label18 = new Label();
		StaticResourceExtension staticResourceExtension30 = new StaticResourceExtension();
		Label label19 = new Label();
		StaticResourceExtension staticResourceExtension31 = new StaticResourceExtension();
		Label label20 = new Label();
		StackLayout stackLayout10 = new StackLayout();
		StackLayout stackLayout11 = new StackLayout();
		StackLayout stackLayout12 = new StackLayout();
		StackLayout stackLayout13 = new StackLayout();
		ScrollView scrollView = new ScrollView();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(stackLayout, nameScope);
		NameScope.SetNameScope(activ8ClickableLabel, nameScope);
		((INameScope)nameScope).RegisterName("_prev", (object)activ8ClickableLabel);
		if (activ8ClickableLabel.StyleId == null)
		{
			activ8ClickableLabel.StyleId = "_prev";
		}
		NameScope.SetNameScope(activ8DatePicker, nameScope);
		((INameScope)nameScope).RegisterName("_date", (object)activ8DatePicker);
		if (activ8DatePicker.StyleId == null)
		{
			activ8DatePicker.StyleId = "_date";
		}
		NameScope.SetNameScope(activ8ClickableLabel2, nameScope);
		((INameScope)nameScope).RegisterName("_next", (object)activ8ClickableLabel2);
		if (activ8ClickableLabel2.StyleId == null)
		{
			activ8ClickableLabel2.StyleId = "_next";
		}
		NameScope.SetNameScope(scrollView, nameScope);
		NameScope.SetNameScope(stackLayout13, nameScope);
		NameScope.SetNameScope(activ8ClickableFrame, nameScope);
		((INameScope)nameScope).RegisterName("_popup", (object)activ8ClickableFrame);
		if (activ8ClickableFrame.StyleId == null)
		{
			activ8ClickableFrame.StyleId = "_popup";
		}
		NameScope.SetNameScope(stackLayout2, nameScope);
		NameScope.SetNameScope(label, nameScope);
		NameScope.SetNameScope(blueButton, nameScope);
		((INameScope)nameScope).RegisterName("_close", (object)blueButton);
		if (blueButton.StyleId == null)
		{
			blueButton.StyleId = "_close";
		}
		NameScope.SetNameScope(activ8ClickableStackLayout, nameScope);
		((INameScope)nameScope).RegisterName("_sys", (object)activ8ClickableStackLayout);
		if (activ8ClickableStackLayout.StyleId == null)
		{
			activ8ClickableStackLayout.StyleId = "_sys";
		}
		NameScope.SetNameScope(stackLayout3, nameScope);
		NameScope.SetNameScope(image, nameScope);
		NameScope.SetNameScope(label2, nameScope);
		NameScope.SetNameScope(label3, nameScope);
		((INameScope)nameScope).RegisterName("_sys_v", (object)label3);
		if (label3.StyleId == null)
		{
			label3.StyleId = "_sys_v";
		}
		NameScope.SetNameScope(image2, nameScope);
		((INameScope)nameScope).RegisterName("_sys_t", (object)image2);
		if (image2.StyleId == null)
		{
			image2.StyleId = "_sys_t";
		}
		NameScope.SetNameScope(boxView, nameScope);
		NameScope.SetNameScope(activ8ClickableStackLayout2, nameScope);
		((INameScope)nameScope).RegisterName("_dia", (object)activ8ClickableStackLayout2);
		if (activ8ClickableStackLayout2.StyleId == null)
		{
			activ8ClickableStackLayout2.StyleId = "_dia";
		}
		NameScope.SetNameScope(stackLayout4, nameScope);
		NameScope.SetNameScope(image3, nameScope);
		NameScope.SetNameScope(label4, nameScope);
		NameScope.SetNameScope(label5, nameScope);
		((INameScope)nameScope).RegisterName("_dia_v", (object)label5);
		if (label5.StyleId == null)
		{
			label5.StyleId = "_dia_v";
		}
		NameScope.SetNameScope(image4, nameScope);
		((INameScope)nameScope).RegisterName("_dia_t", (object)image4);
		if (image4.StyleId == null)
		{
			image4.StyleId = "_dia_t";
		}
		NameScope.SetNameScope(boxView2, nameScope);
		NameScope.SetNameScope(activ8ClickableStackLayout3, nameScope);
		((INameScope)nameScope).RegisterName("_hr", (object)activ8ClickableStackLayout3);
		if (activ8ClickableStackLayout3.StyleId == null)
		{
			activ8ClickableStackLayout3.StyleId = "_hr";
		}
		NameScope.SetNameScope(stackLayout5, nameScope);
		NameScope.SetNameScope(image5, nameScope);
		NameScope.SetNameScope(label6, nameScope);
		NameScope.SetNameScope(label7, nameScope);
		((INameScope)nameScope).RegisterName("_hr_v", (object)label7);
		if (label7.StyleId == null)
		{
			label7.StyleId = "_hr_v";
		}
		NameScope.SetNameScope(image6, nameScope);
		((INameScope)nameScope).RegisterName("_hr_t", (object)image6);
		if (image6.StyleId == null)
		{
			image6.StyleId = "_hr_t";
		}
		NameScope.SetNameScope(boxView3, nameScope);
		NameScope.SetNameScope(stackLayout12, nameScope);
		((INameScope)nameScope).RegisterName("_last3", (object)stackLayout12);
		if (stackLayout12.StyleId == null)
		{
			stackLayout12.StyleId = "_last3";
		}
		NameScope.SetNameScope(label8, nameScope);
		NameScope.SetNameScope(stackLayout7, nameScope);
		NameScope.SetNameScope(label9, nameScope);
		((INameScope)nameScope).RegisterName("_bp1_d", (object)label9);
		if (label9.StyleId == null)
		{
			label9.StyleId = "_bp1_d";
		}
		NameScope.SetNameScope(stackLayout6, nameScope);
		NameScope.SetNameScope(label10, nameScope);
		((INameScope)nameScope).RegisterName("_sys1_v", (object)label10);
		if (label10.StyleId == null)
		{
			label10.StyleId = "_sys1_v";
		}
		NameScope.SetNameScope(label11, nameScope);
		NameScope.SetNameScope(label12, nameScope);
		((INameScope)nameScope).RegisterName("_dia1_v", (object)label12);
		if (label12.StyleId == null)
		{
			label12.StyleId = "_dia1_v";
		}
		NameScope.SetNameScope(boxView4, nameScope);
		NameScope.SetNameScope(stackLayout9, nameScope);
		NameScope.SetNameScope(label13, nameScope);
		((INameScope)nameScope).RegisterName("_bp2_d", (object)label13);
		if (label13.StyleId == null)
		{
			label13.StyleId = "_bp2_d";
		}
		NameScope.SetNameScope(stackLayout8, nameScope);
		NameScope.SetNameScope(label14, nameScope);
		((INameScope)nameScope).RegisterName("_sys2_v", (object)label14);
		if (label14.StyleId == null)
		{
			label14.StyleId = "_sys2_v";
		}
		NameScope.SetNameScope(label15, nameScope);
		NameScope.SetNameScope(label16, nameScope);
		((INameScope)nameScope).RegisterName("_dia2_v", (object)label16);
		if (label16.StyleId == null)
		{
			label16.StyleId = "_dia2_v";
		}
		NameScope.SetNameScope(boxView5, nameScope);
		NameScope.SetNameScope(stackLayout11, nameScope);
		NameScope.SetNameScope(label17, nameScope);
		((INameScope)nameScope).RegisterName("_bp3_d", (object)label17);
		if (label17.StyleId == null)
		{
			label17.StyleId = "_bp3_d";
		}
		NameScope.SetNameScope(stackLayout10, nameScope);
		NameScope.SetNameScope(label18, nameScope);
		((INameScope)nameScope).RegisterName("_sys3_v", (object)label18);
		if (label18.StyleId == null)
		{
			label18.StyleId = "_sys3_v";
		}
		NameScope.SetNameScope(label19, nameScope);
		NameScope.SetNameScope(label20, nameScope);
		((INameScope)nameScope).RegisterName("_dia3_v", (object)label20);
		if (label20.StyleId == null)
		{
			label20.StyleId = "_dia3_v";
		}
		_prev = activ8ClickableLabel;
		_date = activ8DatePicker;
		_next = activ8ClickableLabel2;
		_popup = activ8ClickableFrame;
		_close = blueButton;
		_sys = activ8ClickableStackLayout;
		_sys_v = label3;
		_sys_t = image2;
		_dia = activ8ClickableStackLayout2;
		_dia_v = label5;
		_dia_t = image4;
		_hr = activ8ClickableStackLayout3;
		_hr_v = label7;
		_hr_t = image6;
		_last3 = stackLayout12;
		_bp1_d = label9;
		_sys1_v = label10;
		_dia1_v = label12;
		_bp2_d = label13;
		_sys2_v = label14;
		_dia2_v = label16;
		_bp3_d = label17;
		_sys3_v = label18;
		_dia3_v = label20;
		SetValue(VisualElement.BackgroundColorProperty, Xamarin.Forms.Color.White);
		SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(0.0));
		stackLayout.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension.Key = "DatePickerFrameColor";
		StaticResourceExtension staticResourceExtension32 = staticResourceExtension;
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 2];
		array[0] = stackLayout;
		array[1] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, VisualElement.BackgroundColorProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(11, 75)));
		object obj = ((IMarkupExtension)staticResourceExtension32).ProvideValue((IServiceProvider)xamlServiceProvider);
		stackLayout.BackgroundColor = (Xamarin.Forms.Color)obj;
		stackLayout.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(5.0, 5.0, 5.0, 5.0));
		activ8ClickableLabel.SetValue(Label.TextProperty, "-");
		staticResourceExtension2.Key = "DatePickerButtonsColor";
		StaticResourceExtension staticResourceExtension33 = staticResourceExtension2;
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 3];
		array2[0] = activ8ClickableLabel;
		array2[1] = stackLayout;
		array2[2] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.TextColorProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(12, 62)));
		object obj2 = ((IMarkupExtension)staticResourceExtension33).ProvideValue((IServiceProvider)xamlServiceProvider2);
		activ8ClickableLabel.TextColor = (Xamarin.Forms.Color)obj2;
		activ8ClickableLabel.SetValue(VisualElement.HeightRequestProperty, 32.0);
		activ8ClickableLabel.SetValue(VisualElement.WidthRequestProperty, 32.0);
		activ8ClickableLabel.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		activ8ClickableLabel.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		activ8ClickableLabel.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout.Children.Add(activ8ClickableLabel);
		activ8DatePicker.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension3.Key = "DatePickerBGColor";
		StaticResourceExtension staticResourceExtension34 = staticResourceExtension3;
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 3];
		array3[0] = activ8DatePicker;
		array3[1] = stackLayout;
		array3[2] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, VisualElement.BackgroundColorProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(13, 83)));
		object obj3 = ((IMarkupExtension)staticResourceExtension34).ProvideValue((IServiceProvider)xamlServiceProvider3);
		activ8DatePicker.BackgroundColor = (Xamarin.Forms.Color)obj3;
		staticResourceExtension4.Key = "DatePickerTextColor";
		StaticResourceExtension staticResourceExtension35 = staticResourceExtension4;
		XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
		Type typeFromHandle7 = typeof(IProvideValueTarget);
		object[] array4 = new object[0 + 3];
		array4[0] = activ8DatePicker;
		array4[1] = stackLayout;
		array4[2] = this;
		xamlServiceProvider4.Add(typeFromHandle7, new SimpleValueTargetProvider(array4, DatePicker.TextColorProperty));
		xamlServiceProvider4.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle8 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
		xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver4.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver4.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(13, 136)));
		object obj4 = ((IMarkupExtension)staticResourceExtension35).ProvideValue((IServiceProvider)xamlServiceProvider4);
		activ8DatePicker.TextColor = (Xamarin.Forms.Color)obj4;
		stackLayout.Children.Add(activ8DatePicker);
		activ8ClickableLabel2.SetValue(Label.TextProperty, "+");
		staticResourceExtension5.Key = "DatePickerButtonsColor";
		StaticResourceExtension staticResourceExtension36 = staticResourceExtension5;
		XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
		Type typeFromHandle9 = typeof(IProvideValueTarget);
		object[] array5 = new object[0 + 3];
		array5[0] = activ8ClickableLabel2;
		array5[1] = stackLayout;
		array5[2] = this;
		xamlServiceProvider5.Add(typeFromHandle9, new SimpleValueTargetProvider(array5, Label.TextColorProperty));
		xamlServiceProvider5.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle10 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
		xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver5.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver5.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(14, 62)));
		object obj5 = ((IMarkupExtension)staticResourceExtension36).ProvideValue((IServiceProvider)xamlServiceProvider5);
		activ8ClickableLabel2.TextColor = (Xamarin.Forms.Color)obj5;
		activ8ClickableLabel2.SetValue(VisualElement.HeightRequestProperty, 32.0);
		activ8ClickableLabel2.SetValue(VisualElement.WidthRequestProperty, 32.0);
		activ8ClickableLabel2.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		activ8ClickableLabel2.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		activ8ClickableLabel2.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout.Children.Add(activ8ClickableLabel2);
		Children.Add(stackLayout);
		stackLayout13.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0, 0.0, 10.0, 10.0));
		staticResourceExtension6.Key = "PageLabelBGColor";
		StaticResourceExtension staticResourceExtension37 = staticResourceExtension6;
		XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
		Type typeFromHandle11 = typeof(IProvideValueTarget);
		object[] array6 = new object[0 + 5];
		array6[0] = stackLayout2;
		array6[1] = activ8ClickableFrame;
		array6[2] = stackLayout13;
		array6[3] = scrollView;
		array6[4] = this;
		xamlServiceProvider6.Add(typeFromHandle11, new SimpleValueTargetProvider(array6, VisualElement.BackgroundColorProperty));
		xamlServiceProvider6.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle12 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
		xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver6.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver6.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(20, 34)));
		object obj6 = ((IMarkupExtension)staticResourceExtension37).ProvideValue((IServiceProvider)xamlServiceProvider6);
		stackLayout2.BackgroundColor = (Xamarin.Forms.Color)obj6;
		stackLayout2.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout2.SetValue(StackLayout.SpacingProperty, 5.0);
		stackLayout2.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		label.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Blood pressure measurement successful");
		label.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Start"));
		label.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		label.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label21 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
		Type typeFromHandle13 = typeof(IProvideValueTarget);
		object[] array7 = new object[0 + 6];
		array7[0] = label;
		array7[1] = stackLayout2;
		array7[2] = activ8ClickableFrame;
		array7[3] = stackLayout13;
		array7[4] = scrollView;
		array7[5] = this;
		xamlServiceProvider7.Add(typeFromHandle13, new SimpleValueTargetProvider(array7, Label.FontSizeProperty));
		xamlServiceProvider7.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle14 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
		xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver7.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver7.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(21, 238)));
		label21.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider7));
		staticResourceExtension7.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension38 = staticResourceExtension7;
		XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
		Type typeFromHandle15 = typeof(IProvideValueTarget);
		object[] array8 = new object[0 + 6];
		array8[0] = label;
		array8[1] = stackLayout2;
		array8[2] = activ8ClickableFrame;
		array8[3] = stackLayout13;
		array8[4] = scrollView;
		array8[5] = this;
		xamlServiceProvider8.Add(typeFromHandle15, new SimpleValueTargetProvider(array8, Label.TextColorProperty));
		xamlServiceProvider8.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle16 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
		xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver8.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver8.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(21, 252)));
		object obj7 = ((IMarkupExtension)staticResourceExtension38).ProvideValue((IServiceProvider)xamlServiceProvider8);
		label.TextColor = (Xamarin.Forms.Color)obj7;
		stackLayout2.Children.Add(label);
		blueButton.SetValue(Button.TextProperty, "X");
		blueButton.SetValue(VisualElement.WidthRequestProperty, 50.0);
		blueButton.SetValue(Button.FontAttributesProperty, FontAttributes.Bold);
		blueButton.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		blueButton.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		BlueButton blueButton2 = blueButton;
		BindableProperty fontSizeProperty2 = Button.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
		Type typeFromHandle17 = typeof(IProvideValueTarget);
		object[] array9 = new object[0 + 6];
		array9[0] = blueButton;
		array9[1] = stackLayout2;
		array9[2] = activ8ClickableFrame;
		array9[3] = stackLayout13;
		array9[4] = scrollView;
		array9[5] = this;
		xamlServiceProvider9.Add(typeFromHandle17, new SimpleValueTargetProvider(array9, Button.FontSizeProperty));
		xamlServiceProvider9.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle18 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
		xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver9.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver9.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(22, 163)));
		blueButton2.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider9));
		stackLayout2.Children.Add(blueButton);
		activ8ClickableFrame.SetValue(ContentView.ContentProperty, stackLayout2);
		stackLayout13.Children.Add(activ8ClickableFrame);
		activ8ClickableStackLayout.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		activ8ClickableStackLayout.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(0.0, 5.0, 10.0, 5.0));
		stackLayout3.SetValue(StackLayout.OrientationProperty, StackOrientation.Vertical);
		stackLayout3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		stackLayout3.SetValue(StackLayout.SpacingProperty, 0.0);
		stackLayout3.SetValue(VisualElement.WidthRequestProperty, 70.0);
		image.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("tracker_icon_bp"));
		image.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
		image.SetValue(View.VerticalOptionsProperty, LayoutOptions.Start);
		image.SetValue(VisualElement.HeightRequestProperty, 46.0);
		stackLayout3.Children.Add(image);
		label2.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Systolic Blood Pressure");
		label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
		label2.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Start);
		Label label22 = label2;
		BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
		Type typeFromHandle19 = typeof(IProvideValueTarget);
		object[] array10 = new object[0 + 6];
		array10[0] = label2;
		array10[1] = stackLayout3;
		array10[2] = activ8ClickableStackLayout;
		array10[3] = stackLayout13;
		array10[4] = scrollView;
		array10[5] = this;
		xamlServiceProvider10.Add(typeFromHandle19, new SimpleValueTargetProvider(array10, Label.FontSizeProperty));
		xamlServiceProvider10.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle20 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
		xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver10.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver10.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(28, 145)));
		label22.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider10));
		staticResourceExtension8.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension39 = staticResourceExtension8;
		XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
		Type typeFromHandle21 = typeof(IProvideValueTarget);
		object[] array11 = new object[0 + 6];
		array11[0] = label2;
		array11[1] = stackLayout3;
		array11[2] = activ8ClickableStackLayout;
		array11[3] = stackLayout13;
		array11[4] = scrollView;
		array11[5] = this;
		xamlServiceProvider11.Add(typeFromHandle21, new SimpleValueTargetProvider(array11, Label.TextColorProperty));
		xamlServiceProvider11.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle22 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
		xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver11.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver11.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(28, 159)));
		object obj8 = ((IMarkupExtension)staticResourceExtension39).ProvideValue((IServiceProvider)xamlServiceProvider11);
		label2.TextColor = (Xamarin.Forms.Color)obj8;
		stackLayout3.Children.Add(label2);
		activ8ClickableStackLayout.Children.Add(stackLayout3);
		label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		label3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label23 = label3;
		BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
		Type typeFromHandle23 = typeof(IProvideValueTarget);
		object[] array12 = new object[0 + 5];
		array12[0] = label3;
		array12[1] = activ8ClickableStackLayout;
		array12[2] = stackLayout13;
		array12[3] = scrollView;
		array12[4] = this;
		xamlServiceProvider12.Add(typeFromHandle23, new SimpleValueTargetProvider(array12, Label.FontSizeProperty));
		xamlServiceProvider12.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle24 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
		xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver12.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver12.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(31, 87)));
		label23.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("32", (IServiceProvider)xamlServiceProvider12));
		label3.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension9.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension40 = staticResourceExtension9;
		XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
		Type typeFromHandle25 = typeof(IProvideValueTarget);
		object[] array13 = new object[0 + 5];
		array13[0] = label3;
		array13[1] = activ8ClickableStackLayout;
		array13[2] = stackLayout13;
		array13[3] = scrollView;
		array13[4] = this;
		xamlServiceProvider13.Add(typeFromHandle25, new SimpleValueTargetProvider(array13, Label.TextColorProperty));
		xamlServiceProvider13.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle26 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
		xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver13.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver13.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(31, 123)));
		object obj9 = ((IMarkupExtension)staticResourceExtension40).ProvideValue((IServiceProvider)xamlServiceProvider13);
		label3.TextColor = (Xamarin.Forms.Color)obj9;
		activ8ClickableStackLayout.Children.Add(label3);
		image2.SetValue(VisualElement.HeightRequestProperty, 40.0);
		activ8ClickableStackLayout.Children.Add(image2);
		stackLayout13.Children.Add(activ8ClickableStackLayout);
		boxView.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		boxView.SetValue(VisualElement.HeightRequestProperty, 1.0);
		staticResourceExtension10.Key = "DividingBarColor";
		StaticResourceExtension staticResourceExtension41 = staticResourceExtension10;
		XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
		Type typeFromHandle27 = typeof(IProvideValueTarget);
		object[] array14 = new object[0 + 4];
		array14[0] = boxView;
		array14[1] = stackLayout13;
		array14[2] = scrollView;
		array14[3] = this;
		xamlServiceProvider14.Add(typeFromHandle27, new SimpleValueTargetProvider(array14, BoxView.ColorProperty));
		xamlServiceProvider14.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle28 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
		xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver14.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver14.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(35, 66)));
		object obj10 = ((IMarkupExtension)staticResourceExtension41).ProvideValue((IServiceProvider)xamlServiceProvider14);
		boxView.Color = (Xamarin.Forms.Color)obj10;
		stackLayout13.Children.Add(boxView);
		activ8ClickableStackLayout2.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		activ8ClickableStackLayout2.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(0.0, 5.0, 10.0, 5.0));
		stackLayout4.SetValue(StackLayout.OrientationProperty, StackOrientation.Vertical);
		stackLayout4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		stackLayout4.SetValue(StackLayout.SpacingProperty, 0.0);
		stackLayout4.SetValue(VisualElement.WidthRequestProperty, 70.0);
		image3.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("tracker_icon_bp"));
		image3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
		image3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Start);
		image3.SetValue(VisualElement.HeightRequestProperty, 46.0);
		stackLayout4.Children.Add(image3);
		label4.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Diastolic Blood Pressure");
		label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
		label4.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Start);
		Label label24 = label4;
		BindableProperty fontSizeProperty5 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider15 = new XamlServiceProvider();
		Type typeFromHandle29 = typeof(IProvideValueTarget);
		object[] array15 = new object[0 + 6];
		array15[0] = label4;
		array15[1] = stackLayout4;
		array15[2] = activ8ClickableStackLayout2;
		array15[3] = stackLayout13;
		array15[4] = scrollView;
		array15[5] = this;
		xamlServiceProvider15.Add(typeFromHandle29, new SimpleValueTargetProvider(array15, Label.FontSizeProperty));
		xamlServiceProvider15.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle30 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver15 = new XmlNamespaceResolver();
		xmlNamespaceResolver15.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver15.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver15.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver15.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider15.Add(typeFromHandle30, new XamlTypeResolver(xmlNamespaceResolver15, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider15.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(40, 146)));
		label24.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider15));
		staticResourceExtension11.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension42 = staticResourceExtension11;
		XamlServiceProvider xamlServiceProvider16 = new XamlServiceProvider();
		Type typeFromHandle31 = typeof(IProvideValueTarget);
		object[] array16 = new object[0 + 6];
		array16[0] = label4;
		array16[1] = stackLayout4;
		array16[2] = activ8ClickableStackLayout2;
		array16[3] = stackLayout13;
		array16[4] = scrollView;
		array16[5] = this;
		xamlServiceProvider16.Add(typeFromHandle31, new SimpleValueTargetProvider(array16, Label.TextColorProperty));
		xamlServiceProvider16.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle32 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver16 = new XmlNamespaceResolver();
		xmlNamespaceResolver16.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver16.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver16.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver16.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider16.Add(typeFromHandle32, new XamlTypeResolver(xmlNamespaceResolver16, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider16.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(40, 160)));
		object obj11 = ((IMarkupExtension)staticResourceExtension42).ProvideValue((IServiceProvider)xamlServiceProvider16);
		label4.TextColor = (Xamarin.Forms.Color)obj11;
		stackLayout4.Children.Add(label4);
		activ8ClickableStackLayout2.Children.Add(stackLayout4);
		label5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		label5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label25 = label5;
		BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider17 = new XamlServiceProvider();
		Type typeFromHandle33 = typeof(IProvideValueTarget);
		object[] array17 = new object[0 + 5];
		array17[0] = label5;
		array17[1] = activ8ClickableStackLayout2;
		array17[2] = stackLayout13;
		array17[3] = scrollView;
		array17[4] = this;
		xamlServiceProvider17.Add(typeFromHandle33, new SimpleValueTargetProvider(array17, Label.FontSizeProperty));
		xamlServiceProvider17.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle34 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver17 = new XmlNamespaceResolver();
		xmlNamespaceResolver17.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver17.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver17.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver17.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider17.Add(typeFromHandle34, new XamlTypeResolver(xmlNamespaceResolver17, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider17.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(43, 87)));
		label25.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("32", (IServiceProvider)xamlServiceProvider17));
		label5.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension12.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension43 = staticResourceExtension12;
		XamlServiceProvider xamlServiceProvider18 = new XamlServiceProvider();
		Type typeFromHandle35 = typeof(IProvideValueTarget);
		object[] array18 = new object[0 + 5];
		array18[0] = label5;
		array18[1] = activ8ClickableStackLayout2;
		array18[2] = stackLayout13;
		array18[3] = scrollView;
		array18[4] = this;
		xamlServiceProvider18.Add(typeFromHandle35, new SimpleValueTargetProvider(array18, Label.TextColorProperty));
		xamlServiceProvider18.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle36 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver18 = new XmlNamespaceResolver();
		xmlNamespaceResolver18.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver18.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver18.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver18.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider18.Add(typeFromHandle36, new XamlTypeResolver(xmlNamespaceResolver18, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider18.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(43, 123)));
		object obj12 = ((IMarkupExtension)staticResourceExtension43).ProvideValue((IServiceProvider)xamlServiceProvider18);
		label5.TextColor = (Xamarin.Forms.Color)obj12;
		activ8ClickableStackLayout2.Children.Add(label5);
		image4.SetValue(VisualElement.HeightRequestProperty, 40.0);
		activ8ClickableStackLayout2.Children.Add(image4);
		stackLayout13.Children.Add(activ8ClickableStackLayout2);
		boxView2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		boxView2.SetValue(VisualElement.HeightRequestProperty, 1.0);
		staticResourceExtension13.Key = "DividingBarColor";
		StaticResourceExtension staticResourceExtension44 = staticResourceExtension13;
		XamlServiceProvider xamlServiceProvider19 = new XamlServiceProvider();
		Type typeFromHandle37 = typeof(IProvideValueTarget);
		object[] array19 = new object[0 + 4];
		array19[0] = boxView2;
		array19[1] = stackLayout13;
		array19[2] = scrollView;
		array19[3] = this;
		xamlServiceProvider19.Add(typeFromHandle37, new SimpleValueTargetProvider(array19, BoxView.ColorProperty));
		xamlServiceProvider19.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle38 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver19 = new XmlNamespaceResolver();
		xmlNamespaceResolver19.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver19.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver19.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver19.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider19.Add(typeFromHandle38, new XamlTypeResolver(xmlNamespaceResolver19, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider19.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(47, 66)));
		object obj13 = ((IMarkupExtension)staticResourceExtension44).ProvideValue((IServiceProvider)xamlServiceProvider19);
		boxView2.Color = (Xamarin.Forms.Color)obj13;
		stackLayout13.Children.Add(boxView2);
		activ8ClickableStackLayout3.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		activ8ClickableStackLayout3.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(0.0, 5.0, 10.0, 5.0));
		stackLayout5.SetValue(StackLayout.OrientationProperty, StackOrientation.Vertical);
		stackLayout5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		stackLayout5.SetValue(StackLayout.SpacingProperty, 0.0);
		stackLayout5.SetValue(VisualElement.WidthRequestProperty, 70.0);
		image5.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("tracker_icon_pulse"));
		image5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
		image5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Start);
		image5.SetValue(VisualElement.HeightRequestProperty, 46.0);
		stackLayout5.Children.Add(image5);
		label6.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Heart Rate");
		label6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
		label6.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label6.SetValue(View.VerticalOptionsProperty, LayoutOptions.Start);
		Label label26 = label6;
		BindableProperty fontSizeProperty7 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider20 = new XamlServiceProvider();
		Type typeFromHandle39 = typeof(IProvideValueTarget);
		object[] array20 = new object[0 + 6];
		array20[0] = label6;
		array20[1] = stackLayout5;
		array20[2] = activ8ClickableStackLayout3;
		array20[3] = stackLayout13;
		array20[4] = scrollView;
		array20[5] = this;
		xamlServiceProvider20.Add(typeFromHandle39, new SimpleValueTargetProvider(array20, Label.FontSizeProperty));
		xamlServiceProvider20.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle40 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver20 = new XmlNamespaceResolver();
		xmlNamespaceResolver20.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver20.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver20.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver20.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider20.Add(typeFromHandle40, new XamlTypeResolver(xmlNamespaceResolver20, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider20.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(52, 132)));
		label26.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider20));
		staticResourceExtension14.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension45 = staticResourceExtension14;
		XamlServiceProvider xamlServiceProvider21 = new XamlServiceProvider();
		Type typeFromHandle41 = typeof(IProvideValueTarget);
		object[] array21 = new object[0 + 6];
		array21[0] = label6;
		array21[1] = stackLayout5;
		array21[2] = activ8ClickableStackLayout3;
		array21[3] = stackLayout13;
		array21[4] = scrollView;
		array21[5] = this;
		xamlServiceProvider21.Add(typeFromHandle41, new SimpleValueTargetProvider(array21, Label.TextColorProperty));
		xamlServiceProvider21.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle42 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver21 = new XmlNamespaceResolver();
		xmlNamespaceResolver21.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver21.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver21.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver21.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider21.Add(typeFromHandle42, new XamlTypeResolver(xmlNamespaceResolver21, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider21.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(52, 146)));
		object obj14 = ((IMarkupExtension)staticResourceExtension45).ProvideValue((IServiceProvider)xamlServiceProvider21);
		label6.TextColor = (Xamarin.Forms.Color)obj14;
		stackLayout5.Children.Add(label6);
		activ8ClickableStackLayout3.Children.Add(stackLayout5);
		label7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		label7.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label27 = label7;
		BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider22 = new XamlServiceProvider();
		Type typeFromHandle43 = typeof(IProvideValueTarget);
		object[] array22 = new object[0 + 5];
		array22[0] = label7;
		array22[1] = activ8ClickableStackLayout3;
		array22[2] = stackLayout13;
		array22[3] = scrollView;
		array22[4] = this;
		xamlServiceProvider22.Add(typeFromHandle43, new SimpleValueTargetProvider(array22, Label.FontSizeProperty));
		xamlServiceProvider22.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle44 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver22 = new XmlNamespaceResolver();
		xmlNamespaceResolver22.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver22.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver22.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver22.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider22.Add(typeFromHandle44, new XamlTypeResolver(xmlNamespaceResolver22, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider22.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(55, 86)));
		label27.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("32", (IServiceProvider)xamlServiceProvider22));
		label7.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension15.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension46 = staticResourceExtension15;
		XamlServiceProvider xamlServiceProvider23 = new XamlServiceProvider();
		Type typeFromHandle45 = typeof(IProvideValueTarget);
		object[] array23 = new object[0 + 5];
		array23[0] = label7;
		array23[1] = activ8ClickableStackLayout3;
		array23[2] = stackLayout13;
		array23[3] = scrollView;
		array23[4] = this;
		xamlServiceProvider23.Add(typeFromHandle45, new SimpleValueTargetProvider(array23, Label.TextColorProperty));
		xamlServiceProvider23.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle46 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver23 = new XmlNamespaceResolver();
		xmlNamespaceResolver23.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver23.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver23.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver23.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider23.Add(typeFromHandle46, new XamlTypeResolver(xmlNamespaceResolver23, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider23.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(55, 122)));
		object obj15 = ((IMarkupExtension)staticResourceExtension46).ProvideValue((IServiceProvider)xamlServiceProvider23);
		label7.TextColor = (Xamarin.Forms.Color)obj15;
		activ8ClickableStackLayout3.Children.Add(label7);
		image6.SetValue(VisualElement.HeightRequestProperty, 40.0);
		activ8ClickableStackLayout3.Children.Add(image6);
		stackLayout13.Children.Add(activ8ClickableStackLayout3);
		boxView3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		boxView3.SetValue(VisualElement.HeightRequestProperty, 1.0);
		staticResourceExtension16.Key = "DividingBarColor";
		StaticResourceExtension staticResourceExtension47 = staticResourceExtension16;
		XamlServiceProvider xamlServiceProvider24 = new XamlServiceProvider();
		Type typeFromHandle47 = typeof(IProvideValueTarget);
		object[] array24 = new object[0 + 4];
		array24[0] = boxView3;
		array24[1] = stackLayout13;
		array24[2] = scrollView;
		array24[3] = this;
		xamlServiceProvider24.Add(typeFromHandle47, new SimpleValueTargetProvider(array24, BoxView.ColorProperty));
		xamlServiceProvider24.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle48 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver24 = new XmlNamespaceResolver();
		xmlNamespaceResolver24.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver24.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver24.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver24.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider24.Add(typeFromHandle48, new XamlTypeResolver(xmlNamespaceResolver24, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider24.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(59, 66)));
		object obj16 = ((IMarkupExtension)staticResourceExtension47).ProvideValue((IServiceProvider)xamlServiceProvider24);
		boxView3.Color = (Xamarin.Forms.Color)obj16;
		stackLayout13.Children.Add(boxView3);
		label8.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Your Last 3 Blood Pressure Readings");
		label8.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label8.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label28 = label8;
		BindableProperty fontSizeProperty9 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter9 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider25 = new XamlServiceProvider();
		Type typeFromHandle49 = typeof(IProvideValueTarget);
		object[] array25 = new object[0 + 5];
		array25[0] = label8;
		array25[1] = stackLayout12;
		array25[2] = stackLayout13;
		array25[3] = scrollView;
		array25[4] = this;
		xamlServiceProvider25.Add(typeFromHandle49, new SimpleValueTargetProvider(array25, Label.FontSizeProperty));
		xamlServiceProvider25.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle50 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver25 = new XmlNamespaceResolver();
		xmlNamespaceResolver25.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver25.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver25.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver25.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider25.Add(typeFromHandle50, new XamlTypeResolver(xmlNamespaceResolver25, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider25.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(63, 123)));
		label28.SetValue(fontSizeProperty9, ((IExtendedTypeConverter)fontSizeConverter9).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider25));
		staticResourceExtension17.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension48 = staticResourceExtension17;
		XamlServiceProvider xamlServiceProvider26 = new XamlServiceProvider();
		Type typeFromHandle51 = typeof(IProvideValueTarget);
		object[] array26 = new object[0 + 5];
		array26[0] = label8;
		array26[1] = stackLayout12;
		array26[2] = stackLayout13;
		array26[3] = scrollView;
		array26[4] = this;
		xamlServiceProvider26.Add(typeFromHandle51, new SimpleValueTargetProvider(array26, Label.TextColorProperty));
		xamlServiceProvider26.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle52 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver26 = new XmlNamespaceResolver();
		xmlNamespaceResolver26.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver26.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver26.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver26.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider26.Add(typeFromHandle52, new XamlTypeResolver(xmlNamespaceResolver26, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider26.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(63, 137)));
		object obj17 = ((IMarkupExtension)staticResourceExtension48).ProvideValue((IServiceProvider)xamlServiceProvider26);
		label8.TextColor = (Xamarin.Forms.Color)obj17;
		label8.SetValue(View.MarginProperty, new Thickness(0.0, 20.0, 0.0, 0.0));
		stackLayout12.Children.Add(label8);
		stackLayout7.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		label9.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label9.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label29 = label9;
		BindableProperty fontSizeProperty10 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter10 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider27 = new XamlServiceProvider();
		Type typeFromHandle53 = typeof(IProvideValueTarget);
		object[] array27 = new object[0 + 6];
		array27[0] = label9;
		array27[1] = stackLayout7;
		array27[2] = stackLayout12;
		array27[3] = stackLayout13;
		array27[4] = scrollView;
		array27[5] = this;
		xamlServiceProvider27.Add(typeFromHandle53, new SimpleValueTargetProvider(array27, Label.FontSizeProperty));
		xamlServiceProvider27.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle54 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver27 = new XmlNamespaceResolver();
		xmlNamespaceResolver27.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver27.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver27.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver27.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider27.Add(typeFromHandle54, new XamlTypeResolver(xmlNamespaceResolver27, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider27.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(66, 81)));
		label29.SetValue(fontSizeProperty10, ((IExtendedTypeConverter)fontSizeConverter10).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider27));
		staticResourceExtension18.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension49 = staticResourceExtension18;
		XamlServiceProvider xamlServiceProvider28 = new XamlServiceProvider();
		Type typeFromHandle55 = typeof(IProvideValueTarget);
		object[] array28 = new object[0 + 6];
		array28[0] = label9;
		array28[1] = stackLayout7;
		array28[2] = stackLayout12;
		array28[3] = stackLayout13;
		array28[4] = scrollView;
		array28[5] = this;
		xamlServiceProvider28.Add(typeFromHandle55, new SimpleValueTargetProvider(array28, Label.TextColorProperty));
		xamlServiceProvider28.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle56 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver28 = new XmlNamespaceResolver();
		xmlNamespaceResolver28.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver28.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver28.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver28.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider28.Add(typeFromHandle56, new XamlTypeResolver(xmlNamespaceResolver28, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider28.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(66, 95)));
		object obj18 = ((IMarkupExtension)staticResourceExtension49).ProvideValue((IServiceProvider)xamlServiceProvider28);
		label9.TextColor = (Xamarin.Forms.Color)obj18;
		stackLayout7.Children.Add(label9);
		stackLayout6.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		label10.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label10.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label30 = label10;
		BindableProperty fontSizeProperty11 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter11 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider29 = new XamlServiceProvider();
		Type typeFromHandle57 = typeof(IProvideValueTarget);
		object[] array29 = new object[0 + 7];
		array29[0] = label10;
		array29[1] = stackLayout6;
		array29[2] = stackLayout7;
		array29[3] = stackLayout12;
		array29[4] = stackLayout13;
		array29[5] = scrollView;
		array29[6] = this;
		xamlServiceProvider29.Add(typeFromHandle57, new SimpleValueTargetProvider(array29, Label.FontSizeProperty));
		xamlServiceProvider29.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle58 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver29 = new XmlNamespaceResolver();
		xmlNamespaceResolver29.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver29.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver29.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver29.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider29.Add(typeFromHandle58, new XamlTypeResolver(xmlNamespaceResolver29, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider29.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(68, 83)));
		label30.SetValue(fontSizeProperty11, ((IExtendedTypeConverter)fontSizeConverter11).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider29));
		label10.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension19.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension50 = staticResourceExtension19;
		XamlServiceProvider xamlServiceProvider30 = new XamlServiceProvider();
		Type typeFromHandle59 = typeof(IProvideValueTarget);
		object[] array30 = new object[0 + 7];
		array30[0] = label10;
		array30[1] = stackLayout6;
		array30[2] = stackLayout7;
		array30[3] = stackLayout12;
		array30[4] = stackLayout13;
		array30[5] = scrollView;
		array30[6] = this;
		xamlServiceProvider30.Add(typeFromHandle59, new SimpleValueTargetProvider(array30, Label.TextColorProperty));
		xamlServiceProvider30.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle60 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver30 = new XmlNamespaceResolver();
		xmlNamespaceResolver30.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver30.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver30.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver30.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider30.Add(typeFromHandle60, new XamlTypeResolver(xmlNamespaceResolver30, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider30.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(68, 119)));
		object obj19 = ((IMarkupExtension)staticResourceExtension50).ProvideValue((IServiceProvider)xamlServiceProvider30);
		label10.TextColor = (Xamarin.Forms.Color)obj19;
		stackLayout6.Children.Add(label10);
		label11.SetValue(Label.TextProperty, "/");
		label11.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label11.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label31 = label11;
		BindableProperty fontSizeProperty12 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter12 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider31 = new XamlServiceProvider();
		Type typeFromHandle61 = typeof(IProvideValueTarget);
		object[] array31 = new object[0 + 7];
		array31[0] = label11;
		array31[1] = stackLayout6;
		array31[2] = stackLayout7;
		array31[3] = stackLayout12;
		array31[4] = stackLayout13;
		array31[5] = scrollView;
		array31[6] = this;
		xamlServiceProvider31.Add(typeFromHandle61, new SimpleValueTargetProvider(array31, Label.FontSizeProperty));
		xamlServiceProvider31.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle62 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver31 = new XmlNamespaceResolver();
		xmlNamespaceResolver31.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver31.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver31.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver31.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider31.Add(typeFromHandle62, new XamlTypeResolver(xmlNamespaceResolver31, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider31.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(69, 75)));
		label31.SetValue(fontSizeProperty12, ((IExtendedTypeConverter)fontSizeConverter12).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider31));
		label11.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension20.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension51 = staticResourceExtension20;
		XamlServiceProvider xamlServiceProvider32 = new XamlServiceProvider();
		Type typeFromHandle63 = typeof(IProvideValueTarget);
		object[] array32 = new object[0 + 7];
		array32[0] = label11;
		array32[1] = stackLayout6;
		array32[2] = stackLayout7;
		array32[3] = stackLayout12;
		array32[4] = stackLayout13;
		array32[5] = scrollView;
		array32[6] = this;
		xamlServiceProvider32.Add(typeFromHandle63, new SimpleValueTargetProvider(array32, Label.TextColorProperty));
		xamlServiceProvider32.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle64 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver32 = new XmlNamespaceResolver();
		xmlNamespaceResolver32.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver32.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver32.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver32.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider32.Add(typeFromHandle64, new XamlTypeResolver(xmlNamespaceResolver32, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider32.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(69, 111)));
		object obj20 = ((IMarkupExtension)staticResourceExtension51).ProvideValue((IServiceProvider)xamlServiceProvider32);
		label11.TextColor = (Xamarin.Forms.Color)obj20;
		stackLayout6.Children.Add(label11);
		label12.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label12.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label32 = label12;
		BindableProperty fontSizeProperty13 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter13 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider33 = new XamlServiceProvider();
		Type typeFromHandle65 = typeof(IProvideValueTarget);
		object[] array33 = new object[0 + 7];
		array33[0] = label12;
		array33[1] = stackLayout6;
		array33[2] = stackLayout7;
		array33[3] = stackLayout12;
		array33[4] = stackLayout13;
		array33[5] = scrollView;
		array33[6] = this;
		xamlServiceProvider33.Add(typeFromHandle65, new SimpleValueTargetProvider(array33, Label.FontSizeProperty));
		xamlServiceProvider33.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle66 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver33 = new XmlNamespaceResolver();
		xmlNamespaceResolver33.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver33.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver33.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver33.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider33.Add(typeFromHandle66, new XamlTypeResolver(xmlNamespaceResolver33, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider33.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(70, 83)));
		label32.SetValue(fontSizeProperty13, ((IExtendedTypeConverter)fontSizeConverter13).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider33));
		label12.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension21.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension52 = staticResourceExtension21;
		XamlServiceProvider xamlServiceProvider34 = new XamlServiceProvider();
		Type typeFromHandle67 = typeof(IProvideValueTarget);
		object[] array34 = new object[0 + 7];
		array34[0] = label12;
		array34[1] = stackLayout6;
		array34[2] = stackLayout7;
		array34[3] = stackLayout12;
		array34[4] = stackLayout13;
		array34[5] = scrollView;
		array34[6] = this;
		xamlServiceProvider34.Add(typeFromHandle67, new SimpleValueTargetProvider(array34, Label.TextColorProperty));
		xamlServiceProvider34.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle68 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver34 = new XmlNamespaceResolver();
		xmlNamespaceResolver34.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver34.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver34.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver34.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider34.Add(typeFromHandle68, new XamlTypeResolver(xmlNamespaceResolver34, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider34.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(70, 119)));
		object obj21 = ((IMarkupExtension)staticResourceExtension52).ProvideValue((IServiceProvider)xamlServiceProvider34);
		label12.TextColor = (Xamarin.Forms.Color)obj21;
		stackLayout6.Children.Add(label12);
		stackLayout7.Children.Add(stackLayout6);
		stackLayout12.Children.Add(stackLayout7);
		boxView4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		boxView4.SetValue(VisualElement.HeightRequestProperty, 1.0);
		staticResourceExtension22.Key = "DividingBarColor";
		StaticResourceExtension staticResourceExtension53 = staticResourceExtension22;
		XamlServiceProvider xamlServiceProvider35 = new XamlServiceProvider();
		Type typeFromHandle69 = typeof(IProvideValueTarget);
		object[] array35 = new object[0 + 5];
		array35[0] = boxView4;
		array35[1] = stackLayout12;
		array35[2] = stackLayout13;
		array35[3] = scrollView;
		array35[4] = this;
		xamlServiceProvider35.Add(typeFromHandle69, new SimpleValueTargetProvider(array35, BoxView.ColorProperty));
		xamlServiceProvider35.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle70 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver35 = new XmlNamespaceResolver();
		xmlNamespaceResolver35.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver35.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver35.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver35.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider35.Add(typeFromHandle70, new XamlTypeResolver(xmlNamespaceResolver35, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider35.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(74, 67)));
		object obj22 = ((IMarkupExtension)staticResourceExtension53).ProvideValue((IServiceProvider)xamlServiceProvider35);
		boxView4.Color = (Xamarin.Forms.Color)obj22;
		boxView4.SetValue(View.MarginProperty, new Thickness(10.0, 0.0, 10.0, 0.0));
		stackLayout12.Children.Add(boxView4);
		stackLayout9.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		label13.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label13.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label33 = label13;
		BindableProperty fontSizeProperty14 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter14 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider36 = new XamlServiceProvider();
		Type typeFromHandle71 = typeof(IProvideValueTarget);
		object[] array36 = new object[0 + 6];
		array36[0] = label13;
		array36[1] = stackLayout9;
		array36[2] = stackLayout12;
		array36[3] = stackLayout13;
		array36[4] = scrollView;
		array36[5] = this;
		xamlServiceProvider36.Add(typeFromHandle71, new SimpleValueTargetProvider(array36, Label.FontSizeProperty));
		xamlServiceProvider36.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle72 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver36 = new XmlNamespaceResolver();
		xmlNamespaceResolver36.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver36.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver36.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver36.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider36.Add(typeFromHandle72, new XamlTypeResolver(xmlNamespaceResolver36, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider36.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(77, 81)));
		label33.SetValue(fontSizeProperty14, ((IExtendedTypeConverter)fontSizeConverter14).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider36));
		staticResourceExtension23.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension54 = staticResourceExtension23;
		XamlServiceProvider xamlServiceProvider37 = new XamlServiceProvider();
		Type typeFromHandle73 = typeof(IProvideValueTarget);
		object[] array37 = new object[0 + 6];
		array37[0] = label13;
		array37[1] = stackLayout9;
		array37[2] = stackLayout12;
		array37[3] = stackLayout13;
		array37[4] = scrollView;
		array37[5] = this;
		xamlServiceProvider37.Add(typeFromHandle73, new SimpleValueTargetProvider(array37, Label.TextColorProperty));
		xamlServiceProvider37.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle74 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver37 = new XmlNamespaceResolver();
		xmlNamespaceResolver37.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver37.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver37.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver37.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider37.Add(typeFromHandle74, new XamlTypeResolver(xmlNamespaceResolver37, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider37.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(77, 95)));
		object obj23 = ((IMarkupExtension)staticResourceExtension54).ProvideValue((IServiceProvider)xamlServiceProvider37);
		label13.TextColor = (Xamarin.Forms.Color)obj23;
		stackLayout9.Children.Add(label13);
		stackLayout8.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		label14.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label14.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label34 = label14;
		BindableProperty fontSizeProperty15 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter15 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider38 = new XamlServiceProvider();
		Type typeFromHandle75 = typeof(IProvideValueTarget);
		object[] array38 = new object[0 + 7];
		array38[0] = label14;
		array38[1] = stackLayout8;
		array38[2] = stackLayout9;
		array38[3] = stackLayout12;
		array38[4] = stackLayout13;
		array38[5] = scrollView;
		array38[6] = this;
		xamlServiceProvider38.Add(typeFromHandle75, new SimpleValueTargetProvider(array38, Label.FontSizeProperty));
		xamlServiceProvider38.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle76 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver38 = new XmlNamespaceResolver();
		xmlNamespaceResolver38.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver38.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver38.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver38.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider38.Add(typeFromHandle76, new XamlTypeResolver(xmlNamespaceResolver38, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider38.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(79, 83)));
		label34.SetValue(fontSizeProperty15, ((IExtendedTypeConverter)fontSizeConverter15).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider38));
		label14.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension24.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension55 = staticResourceExtension24;
		XamlServiceProvider xamlServiceProvider39 = new XamlServiceProvider();
		Type typeFromHandle77 = typeof(IProvideValueTarget);
		object[] array39 = new object[0 + 7];
		array39[0] = label14;
		array39[1] = stackLayout8;
		array39[2] = stackLayout9;
		array39[3] = stackLayout12;
		array39[4] = stackLayout13;
		array39[5] = scrollView;
		array39[6] = this;
		xamlServiceProvider39.Add(typeFromHandle77, new SimpleValueTargetProvider(array39, Label.TextColorProperty));
		xamlServiceProvider39.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle78 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver39 = new XmlNamespaceResolver();
		xmlNamespaceResolver39.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver39.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver39.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver39.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider39.Add(typeFromHandle78, new XamlTypeResolver(xmlNamespaceResolver39, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider39.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(79, 119)));
		object obj24 = ((IMarkupExtension)staticResourceExtension55).ProvideValue((IServiceProvider)xamlServiceProvider39);
		label14.TextColor = (Xamarin.Forms.Color)obj24;
		stackLayout8.Children.Add(label14);
		label15.SetValue(Label.TextProperty, "/");
		label15.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label15.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label35 = label15;
		BindableProperty fontSizeProperty16 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter16 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider40 = new XamlServiceProvider();
		Type typeFromHandle79 = typeof(IProvideValueTarget);
		object[] array40 = new object[0 + 7];
		array40[0] = label15;
		array40[1] = stackLayout8;
		array40[2] = stackLayout9;
		array40[3] = stackLayout12;
		array40[4] = stackLayout13;
		array40[5] = scrollView;
		array40[6] = this;
		xamlServiceProvider40.Add(typeFromHandle79, new SimpleValueTargetProvider(array40, Label.FontSizeProperty));
		xamlServiceProvider40.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle80 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver40 = new XmlNamespaceResolver();
		xmlNamespaceResolver40.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver40.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver40.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver40.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider40.Add(typeFromHandle80, new XamlTypeResolver(xmlNamespaceResolver40, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider40.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(80, 75)));
		label35.SetValue(fontSizeProperty16, ((IExtendedTypeConverter)fontSizeConverter16).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider40));
		label15.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension25.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension56 = staticResourceExtension25;
		XamlServiceProvider xamlServiceProvider41 = new XamlServiceProvider();
		Type typeFromHandle81 = typeof(IProvideValueTarget);
		object[] array41 = new object[0 + 7];
		array41[0] = label15;
		array41[1] = stackLayout8;
		array41[2] = stackLayout9;
		array41[3] = stackLayout12;
		array41[4] = stackLayout13;
		array41[5] = scrollView;
		array41[6] = this;
		xamlServiceProvider41.Add(typeFromHandle81, new SimpleValueTargetProvider(array41, Label.TextColorProperty));
		xamlServiceProvider41.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle82 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver41 = new XmlNamespaceResolver();
		xmlNamespaceResolver41.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver41.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver41.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver41.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider41.Add(typeFromHandle82, new XamlTypeResolver(xmlNamespaceResolver41, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider41.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(80, 111)));
		object obj25 = ((IMarkupExtension)staticResourceExtension56).ProvideValue((IServiceProvider)xamlServiceProvider41);
		label15.TextColor = (Xamarin.Forms.Color)obj25;
		stackLayout8.Children.Add(label15);
		label16.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label16.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label36 = label16;
		BindableProperty fontSizeProperty17 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter17 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider42 = new XamlServiceProvider();
		Type typeFromHandle83 = typeof(IProvideValueTarget);
		object[] array42 = new object[0 + 7];
		array42[0] = label16;
		array42[1] = stackLayout8;
		array42[2] = stackLayout9;
		array42[3] = stackLayout12;
		array42[4] = stackLayout13;
		array42[5] = scrollView;
		array42[6] = this;
		xamlServiceProvider42.Add(typeFromHandle83, new SimpleValueTargetProvider(array42, Label.FontSizeProperty));
		xamlServiceProvider42.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle84 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver42 = new XmlNamespaceResolver();
		xmlNamespaceResolver42.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver42.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver42.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver42.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider42.Add(typeFromHandle84, new XamlTypeResolver(xmlNamespaceResolver42, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider42.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(81, 83)));
		label36.SetValue(fontSizeProperty17, ((IExtendedTypeConverter)fontSizeConverter17).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider42));
		label16.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension26.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension57 = staticResourceExtension26;
		XamlServiceProvider xamlServiceProvider43 = new XamlServiceProvider();
		Type typeFromHandle85 = typeof(IProvideValueTarget);
		object[] array43 = new object[0 + 7];
		array43[0] = label16;
		array43[1] = stackLayout8;
		array43[2] = stackLayout9;
		array43[3] = stackLayout12;
		array43[4] = stackLayout13;
		array43[5] = scrollView;
		array43[6] = this;
		xamlServiceProvider43.Add(typeFromHandle85, new SimpleValueTargetProvider(array43, Label.TextColorProperty));
		xamlServiceProvider43.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle86 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver43 = new XmlNamespaceResolver();
		xmlNamespaceResolver43.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver43.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver43.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver43.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider43.Add(typeFromHandle86, new XamlTypeResolver(xmlNamespaceResolver43, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider43.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(81, 119)));
		object obj26 = ((IMarkupExtension)staticResourceExtension57).ProvideValue((IServiceProvider)xamlServiceProvider43);
		label16.TextColor = (Xamarin.Forms.Color)obj26;
		stackLayout8.Children.Add(label16);
		stackLayout9.Children.Add(stackLayout8);
		stackLayout12.Children.Add(stackLayout9);
		boxView5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		boxView5.SetValue(VisualElement.HeightRequestProperty, 1.0);
		staticResourceExtension27.Key = "DividingBarColor";
		StaticResourceExtension staticResourceExtension58 = staticResourceExtension27;
		XamlServiceProvider xamlServiceProvider44 = new XamlServiceProvider();
		Type typeFromHandle87 = typeof(IProvideValueTarget);
		object[] array44 = new object[0 + 5];
		array44[0] = boxView5;
		array44[1] = stackLayout12;
		array44[2] = stackLayout13;
		array44[3] = scrollView;
		array44[4] = this;
		xamlServiceProvider44.Add(typeFromHandle87, new SimpleValueTargetProvider(array44, BoxView.ColorProperty));
		xamlServiceProvider44.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle88 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver44 = new XmlNamespaceResolver();
		xmlNamespaceResolver44.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver44.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver44.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver44.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider44.Add(typeFromHandle88, new XamlTypeResolver(xmlNamespaceResolver44, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider44.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(85, 67)));
		object obj27 = ((IMarkupExtension)staticResourceExtension58).ProvideValue((IServiceProvider)xamlServiceProvider44);
		boxView5.Color = (Xamarin.Forms.Color)obj27;
		boxView5.SetValue(View.MarginProperty, new Thickness(10.0, 0.0, 10.0, 0.0));
		stackLayout12.Children.Add(boxView5);
		stackLayout11.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		label17.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label17.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label37 = label17;
		BindableProperty fontSizeProperty18 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter18 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider45 = new XamlServiceProvider();
		Type typeFromHandle89 = typeof(IProvideValueTarget);
		object[] array45 = new object[0 + 6];
		array45[0] = label17;
		array45[1] = stackLayout11;
		array45[2] = stackLayout12;
		array45[3] = stackLayout13;
		array45[4] = scrollView;
		array45[5] = this;
		xamlServiceProvider45.Add(typeFromHandle89, new SimpleValueTargetProvider(array45, Label.FontSizeProperty));
		xamlServiceProvider45.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle90 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver45 = new XmlNamespaceResolver();
		xmlNamespaceResolver45.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver45.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver45.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver45.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider45.Add(typeFromHandle90, new XamlTypeResolver(xmlNamespaceResolver45, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider45.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(88, 81)));
		label37.SetValue(fontSizeProperty18, ((IExtendedTypeConverter)fontSizeConverter18).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider45));
		staticResourceExtension28.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension59 = staticResourceExtension28;
		XamlServiceProvider xamlServiceProvider46 = new XamlServiceProvider();
		Type typeFromHandle91 = typeof(IProvideValueTarget);
		object[] array46 = new object[0 + 6];
		array46[0] = label17;
		array46[1] = stackLayout11;
		array46[2] = stackLayout12;
		array46[3] = stackLayout13;
		array46[4] = scrollView;
		array46[5] = this;
		xamlServiceProvider46.Add(typeFromHandle91, new SimpleValueTargetProvider(array46, Label.TextColorProperty));
		xamlServiceProvider46.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle92 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver46 = new XmlNamespaceResolver();
		xmlNamespaceResolver46.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver46.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver46.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver46.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider46.Add(typeFromHandle92, new XamlTypeResolver(xmlNamespaceResolver46, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider46.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(88, 95)));
		object obj28 = ((IMarkupExtension)staticResourceExtension59).ProvideValue((IServiceProvider)xamlServiceProvider46);
		label17.TextColor = (Xamarin.Forms.Color)obj28;
		stackLayout11.Children.Add(label17);
		stackLayout10.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		label18.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label18.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label38 = label18;
		BindableProperty fontSizeProperty19 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter19 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider47 = new XamlServiceProvider();
		Type typeFromHandle93 = typeof(IProvideValueTarget);
		object[] array47 = new object[0 + 7];
		array47[0] = label18;
		array47[1] = stackLayout10;
		array47[2] = stackLayout11;
		array47[3] = stackLayout12;
		array47[4] = stackLayout13;
		array47[5] = scrollView;
		array47[6] = this;
		xamlServiceProvider47.Add(typeFromHandle93, new SimpleValueTargetProvider(array47, Label.FontSizeProperty));
		xamlServiceProvider47.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle94 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver47 = new XmlNamespaceResolver();
		xmlNamespaceResolver47.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver47.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver47.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver47.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider47.Add(typeFromHandle94, new XamlTypeResolver(xmlNamespaceResolver47, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider47.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(90, 83)));
		label38.SetValue(fontSizeProperty19, ((IExtendedTypeConverter)fontSizeConverter19).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider47));
		label18.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension29.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension60 = staticResourceExtension29;
		XamlServiceProvider xamlServiceProvider48 = new XamlServiceProvider();
		Type typeFromHandle95 = typeof(IProvideValueTarget);
		object[] array48 = new object[0 + 7];
		array48[0] = label18;
		array48[1] = stackLayout10;
		array48[2] = stackLayout11;
		array48[3] = stackLayout12;
		array48[4] = stackLayout13;
		array48[5] = scrollView;
		array48[6] = this;
		xamlServiceProvider48.Add(typeFromHandle95, new SimpleValueTargetProvider(array48, Label.TextColorProperty));
		xamlServiceProvider48.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle96 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver48 = new XmlNamespaceResolver();
		xmlNamespaceResolver48.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver48.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver48.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver48.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider48.Add(typeFromHandle96, new XamlTypeResolver(xmlNamespaceResolver48, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider48.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(90, 119)));
		object obj29 = ((IMarkupExtension)staticResourceExtension60).ProvideValue((IServiceProvider)xamlServiceProvider48);
		label18.TextColor = (Xamarin.Forms.Color)obj29;
		stackLayout10.Children.Add(label18);
		label19.SetValue(Label.TextProperty, "/");
		label19.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label19.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label39 = label19;
		BindableProperty fontSizeProperty20 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter20 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider49 = new XamlServiceProvider();
		Type typeFromHandle97 = typeof(IProvideValueTarget);
		object[] array49 = new object[0 + 7];
		array49[0] = label19;
		array49[1] = stackLayout10;
		array49[2] = stackLayout11;
		array49[3] = stackLayout12;
		array49[4] = stackLayout13;
		array49[5] = scrollView;
		array49[6] = this;
		xamlServiceProvider49.Add(typeFromHandle97, new SimpleValueTargetProvider(array49, Label.FontSizeProperty));
		xamlServiceProvider49.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle98 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver49 = new XmlNamespaceResolver();
		xmlNamespaceResolver49.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver49.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver49.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver49.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider49.Add(typeFromHandle98, new XamlTypeResolver(xmlNamespaceResolver49, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider49.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(91, 75)));
		label39.SetValue(fontSizeProperty20, ((IExtendedTypeConverter)fontSizeConverter20).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider49));
		label19.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension30.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension61 = staticResourceExtension30;
		XamlServiceProvider xamlServiceProvider50 = new XamlServiceProvider();
		Type typeFromHandle99 = typeof(IProvideValueTarget);
		object[] array50 = new object[0 + 7];
		array50[0] = label19;
		array50[1] = stackLayout10;
		array50[2] = stackLayout11;
		array50[3] = stackLayout12;
		array50[4] = stackLayout13;
		array50[5] = scrollView;
		array50[6] = this;
		xamlServiceProvider50.Add(typeFromHandle99, new SimpleValueTargetProvider(array50, Label.TextColorProperty));
		xamlServiceProvider50.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle100 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver50 = new XmlNamespaceResolver();
		xmlNamespaceResolver50.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver50.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver50.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver50.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider50.Add(typeFromHandle100, new XamlTypeResolver(xmlNamespaceResolver50, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider50.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(91, 111)));
		object obj30 = ((IMarkupExtension)staticResourceExtension61).ProvideValue((IServiceProvider)xamlServiceProvider50);
		label19.TextColor = (Xamarin.Forms.Color)obj30;
		stackLayout10.Children.Add(label19);
		label20.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label20.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label40 = label20;
		BindableProperty fontSizeProperty21 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter21 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider51 = new XamlServiceProvider();
		Type typeFromHandle101 = typeof(IProvideValueTarget);
		object[] array51 = new object[0 + 7];
		array51[0] = label20;
		array51[1] = stackLayout10;
		array51[2] = stackLayout11;
		array51[3] = stackLayout12;
		array51[4] = stackLayout13;
		array51[5] = scrollView;
		array51[6] = this;
		xamlServiceProvider51.Add(typeFromHandle101, new SimpleValueTargetProvider(array51, Label.FontSizeProperty));
		xamlServiceProvider51.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle102 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver51 = new XmlNamespaceResolver();
		xmlNamespaceResolver51.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver51.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver51.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver51.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider51.Add(typeFromHandle102, new XamlTypeResolver(xmlNamespaceResolver51, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider51.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(92, 83)));
		label40.SetValue(fontSizeProperty21, ((IExtendedTypeConverter)fontSizeConverter21).ConvertFromInvariantString("24", (IServiceProvider)xamlServiceProvider51));
		label20.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension31.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension62 = staticResourceExtension31;
		XamlServiceProvider xamlServiceProvider52 = new XamlServiceProvider();
		Type typeFromHandle103 = typeof(IProvideValueTarget);
		object[] array52 = new object[0 + 7];
		array52[0] = label20;
		array52[1] = stackLayout10;
		array52[2] = stackLayout11;
		array52[3] = stackLayout12;
		array52[4] = stackLayout13;
		array52[5] = scrollView;
		array52[6] = this;
		xamlServiceProvider52.Add(typeFromHandle103, new SimpleValueTargetProvider(array52, Label.TextColorProperty));
		xamlServiceProvider52.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle104 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver52 = new XmlNamespaceResolver();
		xmlNamespaceResolver52.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver52.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver52.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver52.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider52.Add(typeFromHandle104, new XamlTypeResolver(xmlNamespaceResolver52, typeof(BloodPressureSummary).GetTypeInfo().get_Assembly()));
		xamlServiceProvider52.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(92, 119)));
		object obj31 = ((IMarkupExtension)staticResourceExtension62).ProvideValue((IServiceProvider)xamlServiceProvider52);
		label20.TextColor = (Xamarin.Forms.Color)obj31;
		stackLayout10.Children.Add(label20);
		stackLayout11.Children.Add(stackLayout10);
		stackLayout12.Children.Add(stackLayout11);
		stackLayout13.Children.Add(stackLayout12);
		scrollView.Content = stackLayout13;
		Children.Add(scrollView);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BloodPressureSummary));
		_prev = this.FindByName<Activ8ClickableLabel>("_prev");
		_date = this.FindByName<Activ8DatePicker>("_date");
		_next = this.FindByName<Activ8ClickableLabel>("_next");
		_popup = this.FindByName<Activ8ClickableFrame>("_popup");
		_close = this.FindByName<BlueButton>("_close");
		_sys = this.FindByName<Activ8ClickableStackLayout>("_sys");
		_sys_v = this.FindByName<Label>("_sys_v");
		_sys_t = this.FindByName<Image>("_sys_t");
		_dia = this.FindByName<Activ8ClickableStackLayout>("_dia");
		_dia_v = this.FindByName<Label>("_dia_v");
		_dia_t = this.FindByName<Image>("_dia_t");
		_hr = this.FindByName<Activ8ClickableStackLayout>("_hr");
		_hr_v = this.FindByName<Label>("_hr_v");
		_hr_t = this.FindByName<Image>("_hr_t");
		_last3 = this.FindByName<StackLayout>("_last3");
		_bp1_d = this.FindByName<Label>("_bp1_d");
		_sys1_v = this.FindByName<Label>("_sys1_v");
		_dia1_v = this.FindByName<Label>("_dia1_v");
		_bp2_d = this.FindByName<Label>("_bp2_d");
		_sys2_v = this.FindByName<Label>("_sys2_v");
		_dia2_v = this.FindByName<Label>("_dia2_v");
		_bp3_d = this.FindByName<Label>("_bp3_d");
		_sys3_v = this.FindByName<Label>("_sys3_v");
		_dia3_v = this.FindByName<Label>("_dia3_v");
	}
}

// Activ8rlives.BlueButton
using Activ8rlives;
using System;
using Xamarin.Forms;

public class BlueButton : Button
{
	public BlueButton()
	{
		base.Resources = Theme.GetResourceDictionary();
		base.BackgroundColor = Theme.GetTheme().BlueButtonBGColor;
		base.TextColor = Theme.GetTheme().BlueButtonTextColor;
		base.Pressed += ChangeColorOnTap;
		base.Released += ChangeColorOnRelease;
	}

	private void ChangeColorOnTap(object sender, EventArgs e)
	{
		base.BackgroundColor = Theme.GetTheme().BlueButtonPressedBGColor;
	}

	private void ChangeColorOnRelease(object sender, EventArgs e)
	{
		base.BackgroundColor = Theme.GetTheme().BlueButtonBGColor;
	}
}

// Activ8rlives.BlueoothGlucoseView
using Activ8rlives;
using System;
using System.Collections.Generic;
using Vernacular;

public class BlueoothGlucoseView : StateMachineView
{
	private BlutoothGlucose state_machine_;

	private Action<IList<string>, string> done_action_;

	public BlueoothGlucoseView(Action<IList<string>, string> done_action)
	{
		base.DefaultTitle = Catalog.GetString("Blood Glucose");
		state_machine_ = new BlutoothGlucose(this);
		done_action_ = done_action;
		state_machine_.State = state_machine_.State_BluetoothCheck;
	}

	public override void Done()
	{
		state_machine_.Shutdown();
		done_action_(new List<string>
		{
			"Blood-Glucose-mmol/L",
			"Blood-Ketone"
		}, "glucometer/caresens-dual");
	}

	protected override void OnRemoved()
	{
		base.OnRemoved();
		state_machine_.Shutdown();
	}
}

// Activ8rlives.BluetoothBloodPressure
using Activ8rlives;
using Activ8rlivesBase;
using System;
using Xamarin.Forms;

public class BluetoothBloodPressure : BluetoothStateMachine
{
	public BluetoothBloodPressureState State_Setup;

	public BluetoothBloodPressureState State_Pair_WaitingForPress;

	public BluetoothBloodPressureState State_Pair_Waiting;

	public BluetoothBloodPressureState State_Pair_Waiting1;

	public BluetoothBloodPressureState State_Pair_Waiting2;

	public BluetoothBloodPressureState State_Pair_Confirm;

	public BluetoothBloodPressureState State_Read_Strap;

	public BluetoothBloodPressureState State_Read_Waiting;

	public BluetoothBloodPressureState State_Read_Reading1;

	public BluetoothBloodPressureState State_Read_Reading2;

	public BluetoothBloodPressureState State_Read_Reading3;

	public BluetoothBloodPressureState State_Read_Reading4;

	public BluetoothBloodPressureState State_Failed;

	public BluetoothBloodPressureState State_TooOld;

	public BloodPressureState_BluetoothCheck State_BluetoothCheck;

	private BloodPressureDevice current_device_;

	public DateTime Epoch
	{
		get;
		private set;
	}

	public DataModel DataModel
	{
		get;
		private set;
	}

	public BloodPressureDevice CurrentDevice
	{
		get
		{
			return current_device_;
		}
		set
		{
			current_device_ = value;
			DataModel.SetObjectLocalParameter("bloodpressure-device", current_device_, -1L);
		}
	}

	public override void RunInForeground(Action a)
	{
		Device.BeginInvokeOnMainThread(a);
	}

	public BluetoothBloodPressure(IStateMachineDelegate d)
		: base(CommonApp.CurrentCommonApp.getThreadService(), CommonApp.CurrentCommonApp.getLogger(), CommonApp.CurrentCommonApp.getBluetoothManager(), "Blood Pressure", d, lockout: true)
	{
		DataModel = CommonApp.CurrentCommonApp.getDataModel();
		Epoch = new DateTime(2010, 1, 1);
		current_device_ = DataModel.GetObjectLocalParameter<BloodPressureDevice>("bloodpressure-device", -1L);
		State_Setup = new BluetoothBloodPressureState_Setup(this);
		State_Pair_WaitingForPress = new BluetoothBloodPressureState_Pair_WaitingForPress(this);
		State_Pair_Waiting = new BluetoothBloodPressureState_Pair_Waiting(this);
		State_Pair_Waiting1 = new BluetoothBloodPressureState_Pair_Waiting1(this);
		State_Pair_Waiting2 = new BluetoothBloodPressureState_Pair_Waiting2(this);
		State_Pair_Confirm = new BluetoothBloodPressureState_Pair_Confirm(this);
		State_Read_Strap = new BluetoothBloodPressureState_Read_Strap(this);
		State_Read_Waiting = new BluetoothBloodPressureState_Read_Waiting(this);
		State_Read_Reading1 = new BluetoothBloodPressureState_Read_Reading1(this);
		State_Read_Reading2 = new BluetoothBloodPressureState_Read_Reading2(this);
		State_Read_Reading3 = new BluetoothBloodPressureState_Read_Reading3(this);
		State_Read_Reading4 = new BluetoothBloodPressureState_Read_Reading4(this);
		State_Failed = new BluetoothBloodPressureState_Failed(this);
		State_TooOld = new BluetoothBloodPressureState_TooOld(this);
		State_BluetoothCheck = new BloodPressureState_BluetoothCheck(this);
		base.State = State_BluetoothCheck;
	}

	public void Send22()
	{
		byte[] data = new byte[5]
		{
			34,
			0,
			0,
			0,
			0
		};
		base.Bluetooth.writeCharacteristic(BloodPressureContants.write2_char, data);
	}

	public void Change()
	{
		(GetDelegate() as BluetoothBloodPressureView)?.Change();
	}
}

// Activ8rlives.BluetoothBloodPressure2
using Activ8rlives;
using Activ8rlivesBase;
using System;
using Xamarin.Forms;

public class BluetoothBloodPressure2 : BluetoothStateMachine
{
	public BluetoothBloodPressure2State_Setup State_Setupd;

	public BluetoothBloodPressure2State_Fit State_Fit;

	public BluetoothBloodPressure2State_Read State_Read;

	public BluetoothBloodPressure2State_Failed State_Failed;

	public BluetoothBloodPressure2State_PrepForScan State_PrepForScan;

	public BluetoothBloodPressure2State_BluetoothCheck State_BluetoothCheck;

	public BluetoothBloodPressure2State_TurnOff State_TurnOff;

	public BluetoothBloodPressure2State_QR State_QR;

	public BloodPressure2Device device_;

	public DataModel DataModel
	{
		get;
		private set;
	}

	public BloodPressure2Device CurrentDevice
	{
		get
		{
			return device_;
		}
		set
		{
			device_ = value;
			DataModel.SetObjectLocalParameter("bloodpressure2-device", device_, -1L);
		}
	}

	public void JumpToSetup(bool _scanmode)
	{
		if (DataModel.GetBoolLocalParameter("bloodpressure2-skip-check", def: false, -1L))
		{
			State_Setupd.ScanMode = _scanmode;
			base.State = State_Setupd;
		}
		else
		{
			State_Fit.ScanMode = _scanmode;
			base.State = State_Fit;
		}
	}

	public void Change()
	{
		(GetDelegate() as BluetoothBloodPressure2View)?.Change();
	}

	public override void RunInForeground(Action a)
	{
		Device.BeginInvokeOnMainThread(a);
	}

	public BluetoothBloodPressure2(IStateMachineDelegate d)
		: base(CommonApp.CurrentCommonApp.getThreadService(), CommonApp.CurrentCommonApp.getLogger(), CommonApp.CurrentCommonApp.getBluetoothManager(), "Blood Pressure 2", d, lockout: true)
	{
		DataModel = CommonApp.CurrentCommonApp.getDataModel();
		device_ = DataModel.GetObjectLocalParameter<BloodPressure2Device>("bloodpressure2-device", -1L);
		State_Setupd = new BluetoothBloodPressure2State_Setup(this);
		State_Fit = new BluetoothBloodPressure2State_Fit(this);
		State_Read = new BluetoothBloodPressure2State_Read(this);
		State_Failed = new BluetoothBloodPressure2State_Failed(this);
		State_BluetoothCheck = new BluetoothBloodPressure2State_BluetoothCheck(this);
		State_PrepForScan = new BluetoothBloodPressure2State_PrepForScan(this);
		State_TurnOff = new BluetoothBloodPressure2State_TurnOff(this);
		State_QR = new BluetoothBloodPressure2State_QR(this);
		base.State = State_BluetoothCheck;
	}
}

// Activ8rlives.BluetoothBloodPressure2State_BluetoothCheck
using Activ8rlives;
using System.Threading.Tasks;
using Xamarin.Forms;

public class BluetoothBloodPressure2State_BluetoothCheck : BluetoothCheckStatusState<BluetoothBloodPressure2>
{
	public BluetoothBloodPressure2State_BluetoothCheck(BluetoothBloodPressure2 model)
		: base(model, (string)null)
	{
	}

	public override void OnBluetoothRunning()
	{
		if (base.StateMachine.CurrentDevice == null)
		{
			if (CommonApp.CurrentCommonApp.hasCamera())
			{
				Task.Run(async delegate
				{
					BluetoothBloodPressure2State_BluetoothCheck bluetoothBloodPressure2State_BluetoothCheck = this;
					CommonApp.CameraPermState perm = await CommonApp.CurrentCommonApp.RequestCameraPermission(silent: true);
					Device.BeginInvokeOnMainThread(delegate
					{
						if (perm == CommonApp.CameraPermState.GRANTED)
						{
							bluetoothBloodPressure2State_BluetoothCheck.State = bluetoothBloodPressure2State_BluetoothCheck.StateMachine.State_QR;
						}
						else
						{
							bluetoothBloodPressure2State_BluetoothCheck.State = bluetoothBloodPressure2State_BluetoothCheck.StateMachine.State_PrepForScan;
						}
					});
				});
			}
			else
			{
				base.State = base.StateMachine.State_PrepForScan;
			}
		}
		else
		{
			base.StateMachine.JumpToSetup(_scanmode: false);
		}
	}
}

// Activ8rlives.BluetoothBloodPressure2State_Failed
using Activ8rlives;
using Vernacular;

public class BluetoothBloodPressure2State_Failed : GenericBluetoothState<BluetoothBloodPressure2>
{
	public int ErrorCode;

	private string GetErrorString()
	{
		if (ErrorCode == 0)
		{
			return Catalog.GetString("Connection to the device has been lost");
		}
		if (ErrorCode == 1)
		{
			return Catalog.GetString("An abnormal sensor oscillation occurred");
		}
		if (ErrorCode == 2)
		{
			return Catalog.GetString("No heartbeat was detected");
		}
		if (ErrorCode == 3)
		{
			return Catalog.GetString("An abnormal result was obtained");
		}
		if (ErrorCode == 4)
		{
			return Catalog.GetString("The cuff is too loose or is leaking");
		}
		if (ErrorCode == 5)
		{
			return Catalog.GetString("The cuff is blocked");
		}
		if (ErrorCode == 6)
		{
			return Catalog.GetString("A large pressure fluctuation occurred during measurement");
		}
		if (ErrorCode == 7)
		{
			return Catalog.GetString("Pressure exceeded the upper limit");
		}
		return $"Error code {ErrorCode}";
	}

	public override void StateStarted()
	{
		(base.Content as BloodPressure2Error).SetErrorText(GetErrorString());
		base.StateMachine.Bluetooth.resetToIdle();
	}

	public BluetoothBloodPressure2State_Failed(BluetoothBloodPressure2 model)
		: base(model, "Failed")
	{
		base.Content = new BloodPressure2Error();
		base.Button1Label = Catalog.GetString("Next", "Button");
	}

	public override void OnButton1()
	{
		base.StateMachine.JumpToSetup(_scanmode: false);
	}
}

// Activ8rlives.BluetoothBloodPressure2State_Fit
using Activ8rlives;
using System;

public class BluetoothBloodPressure2State_Fit : GenericBluetoothState<BluetoothBloodPressure2>
{
	public bool ScanMode;

	public BluetoothBloodPressure2State_Fit(BluetoothBloodPressure2 model)
		: base(model, "Cuff Fit")
	{
		base.Content = new BloodPressure2Fit(this);
	}

	public override void StateStarted()
	{
		base.StateMachine.Bluetooth.resetToIdle();
		if (!ScanMode && base.StateMachine.CurrentDevice != null)
		{
			base.StateMachine.Bluetooth.startScanning();
		}
		(base.Content as BloodPressure2Fit).SetButtonVisibility(vis: true);
	}

	public override void OnButton1()
	{
		base.StateMachine.State_Setupd.ScanMode = ScanMode;
		base.State = base.StateMachine.State_Setupd;
	}

	public override void OnBluetoothDiscovered(Guid uuid, string name, Guid[] services, byte[] manufacturer, int rssi)
	{
		if (!string.IsNullOrEmpty(name) && name.Equals(base.StateMachine.CurrentDevice.Identifier))
		{
			base.StateMachine.Bluetooth.connectDevice(uuid, BloodPressure2Contants.svc1, null, null);
			(base.Content as BloodPressure2Fit).SetButtonVisibility(vis: false);
		}
	}

	public override void OnBluetoothDeviceConnected()
	{
		base.StateMachine.Bluetooth.startNotifying(BloodPressure2Contants.readwrite6_char);
		base.State = base.StateMachine.State_Read;
	}
}

// Activ8rlives.BluetoothBloodPressure2State_PrepForScan
using Activ8rlives;

public class BluetoothBloodPressure2State_PrepForScan : GenericBluetoothState<BluetoothBloodPressure2>
{
	public BluetoothBloodPressure2State_PrepForScan(BluetoothBloodPressure2 model)
		: base(model, "Scan Start")
	{
		base.Content = new BloodPressure2Identify(this);
	}

	public override void StateStarted()
	{
		base.StateMachine.Bluetooth.resetToIdle();
	}

	public override void OnButton1()
	{
		base.StateMachine.JumpToSetup(_scanmode: true);
	}

	public override void OnButton2()
	{
		base.StateMachine.CurrentDevice = null;
		base.StateMachine.Change();
	}
}

// Activ8rlives.BluetoothBloodPressure2State_QR
using Activ8rlives;
using System;
using Xamarin.Forms;

public class BluetoothBloodPressure2State_QR : GenericState<BluetoothBloodPressure2>
{
	public BluetoothBloodPressure2State_QR(BluetoothBloodPressure2 model)
		: base(model, "QR Code")
	{
		base.SlidePadding = new Thickness(0.0);
		base.Content = new BloodPressure2QRCode(this, FoundBP2);
	}

	public override void OnButton1()
	{
		base.State = base.StateMachine.State_PrepForScan;
	}

	public void FoundBP2(string serial)
	{
		bool flag = serial.StartsWith("BLUE", StringComparison.OrdinalIgnoreCase);
		base.StateMachine.CurrentDevice = new BloodPressure2Device
		{
			Identifier = serial,
			IsBlue = (flag ? 1 : 0)
		};
		StartTimer(2);
	}

	public override void OnTimer()
	{
		base.StateMachine.JumpToSetup(_scanmode: false);
	}
}

// Activ8rlives.BluetoothBloodPressure2State_Read
using Activ8rlives;
using System;
using System.Collections.Generic;
using Vernacular;

public class BluetoothBloodPressure2State_Read : GenericBluetoothState<BluetoothBloodPressure2>, IBloodPressure2AnimationSource
{
	private enum BPMonState
	{
		STATE_WAITING,
		STATE_INFLATING,
		STATE_MEASURING
	}

	private int current_pressure_;

	private int hi_pressure_;

	private int lo_pressure_;

	private BPMonState state_;

	public BluetoothBloodPressure2State_Read(BluetoothBloodPressure2 model)
		: base(model, "Reading BP")
	{
		base.Content = new BloodPressure2AnimationContainer(this);
	}

	public override void StateStarted()
	{
		state_ = BPMonState.STATE_WAITING;
		current_pressure_ = 0;
		hi_pressure_ = (lo_pressure_ = -1);
		UpdateAnimation();
		UpdateTopLine();
		StartTimer(60);
		SendStart();
	}

	private void SendStart()
	{
		byte[] data = new byte[5]
		{
			190,
			176,
			1,
			192,
			54
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BloodPressure2Contants.readwrite6_char, data);
	}

	private void UpdateAnimation()
	{
		(base.Content as BloodPressure2AnimationContainer).Invalidate();
	}

	private void UpdateTopLine()
	{
		switch (state_)
		{
		case BPMonState.STATE_INFLATING:
			(base.Content as BloodPressure2AnimationContainer).SetText(Catalog.GetString("Inflating the cuff"));
			break;
		case BPMonState.STATE_WAITING:
			(base.Content as BloodPressure2AnimationContainer).SetText(Catalog.GetString("Waiting for the monitor to start"));
			break;
		case BPMonState.STATE_MEASURING:
			(base.Content as BloodPressure2AnimationContainer).SetText(Catalog.GetString("Measurement in progress"));
			break;
		}
	}

	public int GetPressure()
	{
		return current_pressure_;
	}

	public int GetHiPressure()
	{
		return hi_pressure_;
	}

	public int GetLoPressure()
	{
		return lo_pressure_;
	}

	public override void OnTimer()
	{
		base.StateMachine.State_Failed.ErrorCode = 0;
		base.StateMachine.Bluetooth.resetToIdle();
		base.State = base.StateMachine.State_Failed;
	}

	public override void OnBluetoothDeviceDisconnected()
	{
		base.OnBluetoothDeviceDisconnected();
		base.StateMachine.State_Failed.ErrorCode = 0;
		base.State = base.StateMachine.State_Failed;
	}

	public override void OnBluetoothDataReceived(Guid characteristic, byte[] data)
	{
		dumpMessage(data);
		if (data.Length < 3 || data[0] != 208 || data[1] != 194 || data[2] + 4 != data.Length)
		{
			Log("Invalid Message");
			return;
		}
		if (data[3] == 203 && data.Length == 8)
		{
			int num = 256 * data[4] + data[5];
			bool flag = data[6] != 0;
			Log("Pressure {0} Heartbeat {1} State {2}", num, flag, Enum.GetName(typeof(BPMonState), state_));
			StartTimer(15);
			if (state_ == BPMonState.STATE_WAITING)
			{
				state_ = BPMonState.STATE_INFLATING;
				current_pressure_ = num;
				UpdateAnimation();
				UpdateTopLine();
				StartTimer(15);
			}
			else if (state_ == BPMonState.STATE_INFLATING)
			{
				if (num < current_pressure_)
				{
					state_ = BPMonState.STATE_MEASURING;
					UpdateTopLine();
				}
				current_pressure_ = num;
				UpdateAnimation();
			}
			else
			{
				if (flag && hi_pressure_ < 0)
				{
					hi_pressure_ = num;
				}
				if (hi_pressure_ >= 0)
				{
					lo_pressure_ = num;
				}
				current_pressure_ = num;
				UpdateAnimation();
			}
		}
		if (data[3] == 204 && data.Length == 9)
		{
			if (data[5] == 0 && data[6] == 0 && data[7] == 0)
			{
				int num2 = data[4];
				Log("Error code {0}", num2);
				base.StateMachine.State_Failed.ErrorCode = num2;
				base.State = base.StateMachine.State_Failed;
				return;
			}
			int num3 = data[4];
			int num4 = data[5];
			int num5 = data[6];
			bool flag2 = data[7] != 0;
			Log("Result BP {0}/{1} Pulse {2} Anomaly {3}", num3, num4, num5, flag2);
			DateTime now = DateTime.Now;
			base.StateMachine.DataModel.SetData("bloodpressure/bloodpressure2", Guid.NewGuid(), now, now, null, new Dictionary<string, object>
			{
				{
					"Systolic-Blood-Pressure",
					num3
				},
				{
					"Diastolic-Blood-Pressure",
					num4
				},
				{
					"Pulse",
					num5
				}
			}, signal: true, null, -1L);
			Done();
		}
	}
}

// Activ8rlives.BluetoothBloodPressure2State_Setup
using Activ8rlives;
using System;

public class BluetoothBloodPressure2State_Setup : GenericBluetoothState<BluetoothBloodPressure2>
{
	public bool ScanMode;

	public BluetoothBloodPressure2State_Setup(BluetoothBloodPressure2 model)
		: base(model, "Instructions and Scan")
	{
		base.Content = new BloodPressure2TakeReading(this);
	}

	public override void StateStarted()
	{
		base.StateMachine.Bluetooth.startScanning();
		(base.Content as BloodPressure2TakeReading).Reset(ScanMode);
	}

	public override void OnButton1()
	{
		base.StateMachine.CurrentDevice = null;
		base.StateMachine.Bluetooth.resetToIdle();
		base.StateMachine.Change();
	}

	public override void OnBluetoothDeviceNotConnected()
	{
		base.OnBluetoothDeviceNotConnected();
		base.StateMachine.Bluetooth.startScanning();
	}

	public override void OnBluetoothDeviceConnected()
	{
		base.StateMachine.Bluetooth.startNotifying(BloodPressure2Contants.readwrite6_char);
		StartTimer(5);
	}

	public override void OnTimer()
	{
		base.State = base.StateMachine.State_Read;
	}

	public override void OnBluetoothDataReceived(Guid characteristic, byte[] data)
	{
		dumpMessage(data);
		if (data[3] == 204 && data.Length == 9)
		{
			base.State = base.StateMachine.State_Read;
		}
	}

	public override void OnBluetoothDiscovered(Guid uuid, string name, Guid[] services, byte[] manufacturer, int rssi)
	{
		if (ScanMode)
		{
			if (string.IsNullOrWhiteSpace(name))
			{
				return;
			}
			bool flag = false;
			bool flag2 = false;
			if (name.Length == 15)
			{
				if (name.StartsWith("BLUECS80", StringComparison.Ordinal))
				{
					flag = true;
					flag2 = true;
				}
				if (name.StartsWith("PINKCS80", StringComparison.Ordinal))
				{
					flag = true;
					flag2 = false;
				}
				if (flag)
				{
					Log("Found Blood Pressure Monitor: {0}", name);
					base.Image = null;
					(base.Content as BloodPressure2TakeReading).AddBloodPressure2(new DiscoveredBloodPressure2x
					{
						IsBlue = (flag2 ? 1 : 0),
						Icon = (flag2 ? "device_icon_bloodpressure2_blue.png" : "device_icon_bloodpressure2_pink.png"),
						Identifier = name,
						IdentifierText = "Select " + name,
						Rssi = rssi,
						Guid = uuid
					});
				}
			}
		}
		else if (!string.IsNullOrEmpty(name) && name.Equals(base.StateMachine.CurrentDevice.Identifier))
		{
			base.StateMachine.Bluetooth.connectDevice(uuid, BloodPressure2Contants.svc1, null, null);
		}
	}

	private void SendStop()
	{
		byte[] data = new byte[5]
		{
			190,
			176,
			1,
			193,
			104
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BloodPressure2Contants.readwrite6_char, data);
	}

	public void MonitorSelected(DiscoveredBloodPressure2x device)
	{
		Log("Connecting");
		base.StateMachine.CurrentDevice = new BloodPressure2Device
		{
			Identifier = device.Identifier,
			IsBlue = device.IsBlue
		};
		base.StateMachine.Bluetooth.connectDevice(device.Guid, BloodPressure2Contants.svc1, null, null);
	}
}

// Activ8rlives.BluetoothBloodPressure2State_TurnOff
using Activ8rlives;
using Vernacular;

public class BluetoothBloodPressure2State_TurnOff : GenericBluetoothState<BluetoothBloodPressure2>
{
	public bool ScanMode;

	public BluetoothBloodPressure2State_TurnOff(BluetoothBloodPressure2 model)
		: base(model, "Turn Off")
	{
		base.Content = new BloodPressure2TurnOff();
		base.Button1Label = Catalog.GetString("View Result");
	}

	public override void StateStarted()
	{
		base.StateMachine.Bluetooth.resetToIdle();
	}

	public override void OnButton1()
	{
		Done();
	}
}

// Activ8rlives.BluetoothBloodPressure2View
using Activ8rlives;
using System;
using System.Collections.Generic;
using Vernacular;

public class BluetoothBloodPressure2View : StateMachineView
{
	private BluetoothBloodPressure2 state_machine_;

	private Action<IList<string>, string> done_action_;

	private Action change_action_;

	public BluetoothBloodPressure2View(Action<IList<string>, string> done_action, Action choose_again)
	{
		state_machine_ = new BluetoothBloodPressure2(this);
		done_action_ = done_action;
		change_action_ = choose_again;
		base.DefaultTitle = Catalog.GetString("Blood Pressure2", "Page Title");
	}

	public void Change()
	{
		state_machine_.Shutdown();
		change_action_();
	}

	public override void Done()
	{
		state_machine_.Shutdown();
		done_action_(new List<string>
		{
			"Systolic-Blood-Pressure",
			"Diastolic-Blood-Pressure",
			"Pulse"
		}, "bloodpressure");
	}

	protected override void OnRemoved()
	{
		base.OnRemoved();
		state_machine_.Shutdown();
	}
}

// Activ8rlives.BluetoothBloodPressureState
using Activ8rlives;
using System;

public class BluetoothBloodPressureState : GenericBluetoothState<BluetoothBloodPressure>
{
	public BluetoothBloodPressureState(BluetoothBloodPressure model, string name)
		: base(model, name)
	{
	}

	public override void OnBluetoothDeviceDisconnected()
	{
		base.OnBluetoothDeviceDisconnected();
		base.State = base.StateMachine.State_Failed;
	}

	public virtual void OnReadPassword(byte[] bytes)
	{
	}

	public virtual void OnReadChallenge(byte[] bytes)
	{
	}

	public virtual void OnReadData(byte[] bytes)
	{
	}

	public override void OnBluetoothDataReceived(Guid characteristic, byte[] data)
	{
		if (characteristic.Equals(BloodPressureContants.read1_char))
		{
			if (data[0] == 160)
			{
				OnReadPassword(data);
				return;
			}
			if (data[0] == 161)
			{
				OnReadChallenge(data);
				return;
			}
		}
		if (characteristic.Equals(BloodPressureContants.read2_char) && data[0] == 62)
		{
			OnReadData(data);
		}
	}
}

// Activ8rlives.BluetoothBloodPressureState_Failed
using Activ8rlives;
using Vernacular;

internal class BluetoothBloodPressureState_Failed : BluetoothBloodPressureState
{
	public BluetoothBloodPressureState_Failed(BluetoothBloodPressure model)
		: base(model, "Failed")
	{
		base.TopText = Catalog.GetString("There was an error.", "BP Monitor screen text");
		base.BottomText = Catalog.GetString("Press next to try again.", "BP Monitor screen text");
		base.Button1Label = Catalog.GetString("Next", "Button");
		base.Image = "bloodpressure_ready.png";
	}

	public override void OnButton1()
	{
		base.State = base.StateMachine.State_Setup;
	}
}

// Activ8rlives.BluetoothBloodPressureState_Pair_Confirm
using Activ8rlives;
using Vernacular;

internal class BluetoothBloodPressureState_Pair_Confirm : BluetoothBloodPressureState
{
	public BluetoothBloodPressureState_Pair_Confirm(BluetoothBloodPressure model)
		: base(model, "Strap on Monitor")
	{
		base.TopText = Catalog.GetString("Monitor is ready", "BP Monitor screen text");
		base.BottomText = Catalog.GetString("Your monitor has been setup and is ready to use. Press next to take a reading.", "BP Monitor screen text");
		base.Button1Label = Catalog.GetString("Next", "Button");
		base.Image = "bloodpressure_ready.png";
	}

	public override void OnButton1()
	{
		base.State = base.StateMachine.State_Setup;
	}
}

// Activ8rlives.BluetoothBloodPressureState_Pair_Waiting
using Activ8rlives;
using System;
using Vernacular;

internal class BluetoothBloodPressureState_Pair_Waiting : BluetoothBloodPressureState
{
	public BluetoothBloodPressureState_Pair_Waiting(BluetoothBloodPressure model)
		: base(model, "Pair Waiting for Password")
	{
		base.TopText = Catalog.GetString("Setting up your monitor", "BP Monitor screen text");
		base.BottomText = Catalog.GetString("Waiting for your monitor to communicate", "BP Monitor screen text");
		base.Image = "bloodpressure_setup.png";
	}

	public override void StateStarted()
	{
		base.StateStarted();
		StartTimer(5);
	}

	public override void OnTimer()
	{
		base.State = base.StateMachine.State_Pair_WaitingForPress;
	}

	public override void OnBluetoothDeviceDisconnected()
	{
		base.State = base.StateMachine.State_Pair_WaitingForPress;
	}

	public override void OnReadPassword(byte[] bytes)
	{
		uint num = bytes[1];
		uint num2 = bytes[2];
		uint num3 = bytes[3];
		uint num4 = bytes[4];
		uint password = num | (num2 << 8) | (num3 << 16) | (num4 << 24);
		base.StateMachine.CurrentDevice = new BloodPressureDevice
		{
			UUID = base.StateMachine.Bluetooth.getConnectedDevice(),
			Password = password
		};
		uint num5 = (uint)(DateTime.Now - base.StateMachine.Epoch).TotalSeconds;
		byte[] array = new byte[5];
		num = (num5 & 0xFF);
		num2 = ((num5 >> 8) & 0xFF);
		num3 = ((num5 >> 16) & 0xFF);
		num4 = ((num5 >> 24) & 0xFF);
		array[0] = 33;
		array[1] = (byte)num;
		array[2] = (byte)num2;
		array[3] = (byte)num3;
		array[4] = (byte)num4;
		base.StateMachine.Bluetooth.writeCharacteristic(BloodPressureContants.write2_char, array);
	}

	public override void OnBluetoothDataSent(Guid characteristic)
	{
		base.State = base.StateMachine.State_Pair_Waiting1;
	}
}

// Activ8rlives.BluetoothBloodPressureState_Pair_Waiting1
using Activ8rlives;
using System;
using Vernacular;

internal class BluetoothBloodPressureState_Pair_Waiting1 : BluetoothBloodPressureState
{
	public BluetoothBloodPressureState_Pair_Waiting1(BluetoothBloodPressure model)
		: base(model, "Pair Waiting for Challenge")
	{
		base.TopText = Catalog.GetString("Setting up your monitor", "BP Monitor screen text");
		base.BottomText = Catalog.GetString("Waiting for your monitor to communicate", "BP Monitor screen text");
		base.Image = "bloodpressure_setup.png";
	}

	public override void StateStarted()
	{
		base.StateStarted();
		StartTimer(5);
	}

	public override void OnTimer()
	{
		base.State = base.StateMachine.State_Pair_WaitingForPress;
	}

	public override void OnBluetoothDeviceDisconnected()
	{
		base.State = base.StateMachine.State_Pair_WaitingForPress;
	}

	public override void OnReadChallenge(byte[] bytes)
	{
		uint password = base.StateMachine.CurrentDevice.Password;
		uint num = password & 0xFF;
		uint num2 = (password >> 8) & 0xFF;
		uint num3 = (password >> 16) & 0xFF;
		uint num4 = (password >> 24) & 0xFF;
		byte[] data = new byte[5]
		{
			32,
			(byte)(num ^ bytes[1]),
			(byte)(num2 ^ bytes[2]),
			(byte)(num3 ^ bytes[3]),
			(byte)(num4 ^ bytes[4])
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BloodPressureContants.write2_char, data);
	}

	public override void OnBluetoothDataSent(Guid characteristic)
	{
		base.State = base.StateMachine.State_Pair_Waiting2;
	}
}

// Activ8rlives.BluetoothBloodPressureState_Pair_Waiting2
using Activ8rlives;
using System;
using Vernacular;

internal class BluetoothBloodPressureState_Pair_Waiting2 : BluetoothBloodPressureState
{
	public BluetoothBloodPressureState_Pair_Waiting2(BluetoothBloodPressure model)
		: base(model, "Pair Setting Time")
	{
		base.TopText = Catalog.GetString("Setting up your monitor", "BP Monitor screen text");
		base.BottomText = Catalog.GetString("Waiting for your monitor to communicate", "BP Monitor screen text");
		base.Image = "bloodpressure_setup.png";
	}

	public override void StateStarted()
	{
		uint num = (uint)(DateTime.Now - base.StateMachine.Epoch).TotalSeconds;
		byte[] array = new byte[5];
		uint num2 = num & 0xFF;
		uint num3 = (num >> 8) & 0xFF;
		uint num4 = (num >> 16) & 0xFF;
		uint num5 = (num >> 24) & 0xFF;
		array[0] = 2;
		array[1] = (byte)num2;
		array[2] = (byte)num3;
		array[3] = (byte)num4;
		array[4] = (byte)num5;
		base.StateMachine.Bluetooth.writeCharacteristic(BloodPressureContants.write2_char, array);
	}

	public override void OnBluetoothDataSent(Guid characteristic)
	{
		base.StateMachine.Send22();
	}

	public override void OnBluetoothDeviceDisconnected()
	{
		base.State = base.StateMachine.State_Pair_Confirm;
	}
}

// Activ8rlives.BluetoothBloodPressureState_Pair_WaitingForPress
using Activ8rlives;
using Activ8rlivesBase;
using System;
using Vernacular;

internal class BluetoothBloodPressureState_Pair_WaitingForPress : BluetoothBloodPressureState
{
	public BluetoothBloodPressureState_Pair_WaitingForPress(BluetoothBloodPressure model)
		: base(model, "Pair Wait for Device")
	{
		base.Image = "bloodpressure_setup.png";
		base.TopText = Catalog.GetString("Setting up your monitor", "BP Monitor screen text");
		base.BottomText = Catalog.GetString("We need to identify your monitor.  Press and hold the pair button until the display shows as below.", "BP Monitor screen text");
	}

	public override void StateStarted()
	{
		base.StateStarted();
		base.StateMachine.Bluetooth.startScanning();
	}

	public override void OnBluetoothDiscovered(Guid uuid, string name, Guid[] services, byte[] manufacturer, int rssi)
	{
		if (services.CheckForService(BloodPressureContants.svc))
		{
			base.StateMachine.Bluetooth.connectDevice(uuid, BloodPressureContants.svc1, null, null);
		}
	}

	public override void OnBluetoothDeviceNotConnected()
	{
		base.OnBluetoothDeviceNotConnected();
		base.StateMachine.Bluetooth.startScanning();
	}

	public override void OnBluetoothDeviceConnected()
	{
		base.StateMachine.Bluetooth.startNotifying(BloodPressureContants.read1_char);
		base.StateMachine.Bluetooth.startNotifying(BloodPressureContants.read2_char);
		base.StateMachine.Bluetooth.startNotifying(BloodPressureContants.write1_char);
		base.State = base.StateMachine.State_Pair_Waiting;
	}
}

// Activ8rlives.BluetoothBloodPressureState_Read_Reading1
using Activ8rlives;
using System;
using Vernacular;

internal class BluetoothBloodPressureState_Read_Reading1 : BluetoothBloodPressureState
{
	public BluetoothBloodPressureState_Read_Reading1(BluetoothBloodPressure model)
		: base(model, "Wait for Challenge")
	{
		base.TopText = Catalog.GetString("Reading blood pressure", "BP Monitor screen text");
		base.BottomText = "";
		base.Image = "bloodpressure_reading.png";
	}

	public override void OnReadChallenge(byte[] bytes)
	{
		uint password = base.StateMachine.CurrentDevice.Password;
		uint num = password & 0xFF;
		uint num2 = (password >> 8) & 0xFF;
		uint num3 = (password >> 16) & 0xFF;
		uint num4 = (password >> 24) & 0xFF;
		byte[] data = new byte[5]
		{
			32,
			(byte)(num ^ bytes[1]),
			(byte)(num2 ^ bytes[2]),
			(byte)(num3 ^ bytes[3]),
			(byte)(num4 ^ bytes[4])
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BloodPressureContants.write2_char, data);
	}

	public override void OnBluetoothDataSent(Guid characteristic)
	{
		base.State = base.StateMachine.State_Read_Reading2;
	}
}

// Activ8rlives.BluetoothBloodPressureState_Read_Reading2
using Activ8rlives;
using System;
using Vernacular;

internal class BluetoothBloodPressureState_Read_Reading2 : BluetoothBloodPressureState
{
	public BluetoothBloodPressureState_Read_Reading2(BluetoothBloodPressure model)
		: base(model, "Send Time")
	{
		base.TopText = Catalog.GetString("Reading blood pressure", "BP Monitor screen text");
		base.BottomText = "";
		base.Image = "bloodpressure_reading.png";
	}

	public override void StateStarted()
	{
		uint num = (uint)(DateTime.Now - base.StateMachine.Epoch).TotalSeconds;
		byte[] array = new byte[5];
		uint num2 = num & 0xFF;
		uint num3 = (num >> 8) & 0xFF;
		uint num4 = (num >> 16) & 0xFF;
		uint num5 = (num >> 24) & 0xFF;
		array[0] = 2;
		array[1] = (byte)num2;
		array[2] = (byte)num3;
		array[3] = (byte)num4;
		array[4] = (byte)num5;
		base.StateMachine.Bluetooth.writeCharacteristic(BloodPressureContants.write2_char, array);
	}

	public override void OnBluetoothDataSent(Guid characteristic)
	{
		base.State = base.StateMachine.State_Read_Reading3;
	}
}

// Activ8rlives.BluetoothBloodPressureState_Read_Reading3
using Activ8rlives;
using System;
using Vernacular;

internal class BluetoothBloodPressureState_Read_Reading3 : BluetoothBloodPressureState
{
	public BluetoothBloodPressureState_Read_Reading3(BluetoothBloodPressure model)
		: base(model, "Send Disconnect")
	{
		base.TopText = Catalog.GetString("Reading blood pressure", "BP Monitor screen text");
		base.BottomText = "";
		base.Image = "bloodpressure_reading.png";
	}

	public override void StateStarted()
	{
		base.StateMachine.Send22();
	}

	public override void OnBluetoothDataSent(Guid characteristic)
	{
		base.State = base.StateMachine.State_Read_Reading4;
	}
}

// Activ8rlives.BluetoothBloodPressureState_Read_Reading4
using Activ8rlives;
using System;
using System.Collections.Generic;
using Vernacular;

internal class BluetoothBloodPressureState_Read_Reading4 : BluetoothBloodPressureState
{
	private bool have_reading_;

	private double bp_sys_;

	private double bp_dia_;

	private double bp_pulse_;

	private DateTime bp_timestamp_;

	public BluetoothBloodPressureState_Read_Reading4(BluetoothBloodPressure model)
		: base(model, "Wait for Reading")
	{
		base.TopText = Catalog.GetString("Reading blood pressure", "BP Monitor screen text");
		base.BottomText = "";
		base.Image = "bloodpressure_reading.png";
	}

	public override void StateStarted()
	{
		base.StateStarted();
		have_reading_ = false;
	}

	public override void OnReadData(byte[] bytes)
	{
		byte num = bytes[7];
		uint num2 = bytes[8];
		uint num3 = bytes[9];
		uint num4 = bytes[10];
		uint num5 = num | (num2 << 8) | (num3 << 16) | (num4 << 24);
		num5 = num5;
		bp_timestamp_ = base.StateMachine.Epoch.AddSeconds(num5);
		bp_sys_ = (int)bytes[1];
		bp_dia_ = (int)bytes[3];
		bp_pulse_ = (int)bytes[11];
		have_reading_ = true;
		Log("Reading {0}/{1} pulse {2} at {3}", bp_sys_, bp_dia_, bp_pulse_, bp_timestamp_);
	}

	public override void OnBluetoothDeviceDisconnected()
	{
		if (!have_reading_)
		{
			base.State = base.StateMachine.State_Failed;
			return;
		}
		DateTime now = DateTime.Now;
		if ((now - bp_timestamp_).TotalMinutes > 10.0)
		{
			base.State = base.StateMachine.State_TooOld;
			return;
		}
		base.StateMachine.DataModel.SetData("bloodpressure", Guid.NewGuid(), now, now, null, new Dictionary<string, object>
		{
			{
				"Systolic-Blood-Pressure",
				bp_sys_
			},
			{
				"Diastolic-Blood-Pressure",
				bp_dia_
			},
			{
				"Pulse",
				bp_pulse_
			}
		}, signal: true, null, -1L);
		Done();
	}
}

// Activ8rlives.BluetoothBloodPressureState_Read_Strap
using Activ8rlives;
using Vernacular;

internal class BluetoothBloodPressureState_Read_Strap : BluetoothBloodPressureState
{
	public BluetoothBloodPressureState_Read_Strap(BluetoothBloodPressure model)
		: base(model, "Strap on Monitor")
	{
		base.TopText = Catalog.GetString("Strap on your monitor", "BP Monitor screen text");
		base.BottomText = Catalog.GetString("Strap on the monitor as shown in the picture, then press next", "BP Monitor screen text");
		base.Button1Label = Catalog.GetString("Next", "Button");
		base.Image = "bloodpressure_strapon.png";
	}

	public override void OnButton1()
	{
		base.State = base.StateMachine.State_Read_Waiting;
	}
}

// Activ8rlives.BluetoothBloodPressureState_Read_Waiting
using Activ8rlives;
using Vernacular;

internal class BluetoothBloodPressureState_Read_Waiting : BluetoothBloodPressureState
{
	public BluetoothBloodPressureState_Read_Waiting(BluetoothBloodPressure model)
		: base(model, "Connect to monitor")
	{
		base.TopText = Catalog.GetString("Read your blood pressure", "BP Monitor screen text");
		base.BottomText = Catalog.GetString("Press either of the reading buttons on the monitor", "BP Monitor screen text");
		base.Image = "bloodpressure_read.png";
	}

	public override void StateStarted()
	{
		base.StateStarted();
		base.StateMachine.Bluetooth.connectDevice(base.StateMachine.CurrentDevice.UUID, BloodPressureContants.svc1, null, null);
	}

	public override void OnBluetoothDeviceConnected()
	{
		base.StateMachine.Bluetooth.startNotifying(BloodPressureContants.read1_char);
		base.StateMachine.Bluetooth.startNotifying(BloodPressureContants.read2_char);
		base.StateMachine.Bluetooth.startNotifying(BloodPressureContants.write1_char);
		base.State = base.StateMachine.State_Read_Reading1;
	}
}

// Activ8rlives.BluetoothBloodPressureState_Setup
using Activ8rlives;
using System;
using Vernacular;

internal class BluetoothBloodPressureState_Setup : BluetoothBloodPressureState
{
	public BluetoothBloodPressureState_Setup(BluetoothBloodPressure model)
		: base(model, "Setup")
	{
		base.TopText = Catalog.GetString("Prepare your monitor", "BP Monitor screen text");
		base.Image = "bloodpressure_prepare.png";
		if (model.CurrentDevice == null)
		{
			base.Button1Label = Catalog.GetString("Next", "Button");
			base.BottomText = Catalog.GetString("Please switch your monitor off and on again, then press Next.\nIf you have a different kind of monitor, press Change.", "BP Monitor screen text");
			base.Button2Label = Catalog.GetString("Change", "Button");
		}
		else
		{
			base.BottomText = Catalog.GetString("Please switch your monitor off and on again, then press Next.\nIf you want to use a different device than before, press Change.", "BP Monitor screen text");
			base.Button1Label = Catalog.GetString("Next", "Button");
			base.Button2Label = Catalog.GetString("Change", "Button");
		}
	}

	public override void StateStarted()
	{
		base.StateMachine.Bluetooth.resetToIdle();
	}

	public override void OnButton1()
	{
		if (base.StateMachine.CurrentDevice == null || base.StateMachine.CurrentDevice.UUID.Equals(Guid.Empty))
		{
			base.State = base.StateMachine.State_Pair_WaitingForPress;
		}
		else
		{
			base.State = base.StateMachine.State_Read_Strap;
		}
	}

	public override void OnButton2()
	{
		base.StateMachine.CurrentDevice = null;
		base.StateMachine.Change();
	}
}

// Activ8rlives.BluetoothBloodPressureState_TooOld
using Activ8rlives;
using Vernacular;

internal class BluetoothBloodPressureState_TooOld : BluetoothBloodPressureState
{
	public BluetoothBloodPressureState_TooOld(BluetoothBloodPressure model)
		: base(model, "Failed")
	{
		base.TopText = Catalog.GetString("The last reading taken does not appear to be recent.  We will only record values taken in the last few minutes.", "BP Monitor screen text");
		base.BottomText = Catalog.GetString("Press next to try again.", "BP Monitor screen text");
		base.Button1Label = Catalog.GetString("Next", "Button");
		base.Image = "bloodpressure_ready.png";
	}

	public override void OnButton1()
	{
		base.State = base.StateMachine.State_Setup;
	}
}

// Activ8rlives.BluetoothBloodPressureView
using Activ8rlives;
using System;
using System.Collections.Generic;
using Vernacular;

public class BluetoothBloodPressureView : StateMachineView
{
	private BluetoothBloodPressure state_machine_;

	private Action<IList<string>, string> done_action_;

	private Action change_action_;

	public BluetoothBloodPressureView(Action<IList<string>, string> done_action, Action choose_again)
	{
		state_machine_ = new BluetoothBloodPressure(this);
		done_action_ = done_action;
		change_action_ = choose_again;
		base.DefaultTitle = Catalog.GetString("Blood Pressure", "Page Title");
	}

	public void Change()
	{
		state_machine_.Shutdown();
		change_action_();
	}

	public override void Done()
	{
		state_machine_.Shutdown();
		done_action_(new List<string>
		{
			"Systolic-Blood-Pressure",
			"Diastolic-Blood-Pressure",
			"Pulse"
		}, "bloodpressure");
	}

	protected override void OnRemoved()
	{
		base.OnRemoved();
		state_machine_.Shutdown();
	}
}

// Activ8rlives.BluetoothCheckPage
using Activ8rlives;
using System;
using System.CodeDom.Compiler;
using System.Reflection;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Devices/Common/BluetoothCheckPage.xaml")]
public class BluetoothCheckPage : StackLayout
{
	private IBluetoothCheckState state_;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _label;

	public BluetoothCheckPage(IBluetoothCheckState state)
	{
		base.Resources = Theme.GetResourceDictionary();
		InitializeComponent();
		state_ = state;
		Update();
	}

	public void Update()
	{
		_label.Text = state_.Text;
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BluetoothCheckPage).GetTypeInfo().get_Assembly().GetName(), "Devices/Common/BluetoothCheckPage.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		StaticResourceExtension staticResourceExtension = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension2 = new StaticResourceExtension();
		Label label = new Label();
		StackLayout stackLayout = new StackLayout();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(stackLayout, nameScope);
		NameScope.SetNameScope(label, nameScope);
		((INameScope)nameScope).RegisterName("_label", (object)label);
		if (label.StyleId == null)
		{
			label.StyleId = "_label";
		}
		_label = label;
		SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0, 10.0, 10.0, 10.0));
		staticResourceExtension.Key = "PageBGColor";
		StaticResourceExtension staticResourceExtension3 = staticResourceExtension;
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 1];
		array[0] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, VisualElement.BackgroundColorProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BluetoothCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(8, 3)));
		object obj = ((IMarkupExtension)staticResourceExtension3).ProvideValue((IServiceProvider)xamlServiceProvider);
		BackgroundColor = (Color)obj;
		stackLayout.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label2 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 3];
		array2[0] = label;
		array2[1] = stackLayout;
		array2[2] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.FontSizeProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BluetoothCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(10, 77)));
		label2.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider2));
		staticResourceExtension2.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension4 = staticResourceExtension2;
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 3];
		array3[0] = label;
		array3[1] = stackLayout;
		array3[2] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, Label.TextColorProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BluetoothCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(10, 91)));
		object obj2 = ((IMarkupExtension)staticResourceExtension4).ProvideValue((IServiceProvider)xamlServiceProvider3);
		label.TextColor = (Color)obj2;
		label.SetValue(View.MarginProperty, new Thickness(0.0, 0.0, 0.0, 0.0));
		stackLayout.Children.Add(label);
		Children.Add(stackLayout);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BluetoothCheckPage));
		_label = this.FindByName<Label>("_label");
	}
}

// Activ8rlives.BluetoothCheckStatusState<M>
using Activ8rlives;
using Activ8rlivesBase;
using Vernacular;
using Xamarin.Forms;

public abstract class BluetoothCheckStatusState<M> : BluetoothDeviceState<M>, IBluetoothCheckState, IUIState where M : BluetoothStateMachine
{
	private enum BluetoothState
	{
		UNSUPPORTED,
		UNKNOWN,
		NOTAUTHORIZED,
		NOTPOWERED,
		NOTLOCATION
	}

	private BluetoothCheckPage slide_;

	private string text_;

	private BluetoothState state_;

	public string Text
	{
		get
		{
			return text_;
		}
		set
		{
			if (value != text_)
			{
				text_ = value;
				UpdateSlide();
			}
		}
	}

	public BluetoothCheckStatusState(M state_machine, string name = null)
		: base(state_machine, name)
	{
	}

	public override void StateWillStart()
	{
		state_ = BluetoothState.UNKNOWN;
		Text = Catalog.GetString("Waiting for Bluetooth...");
		StartTimer(1);
	}

	public override void OnTimer()
	{
		if (!base.StateMachine.isBluetoothSupported)
		{
			if (state_ != 0)
			{
				state_ = BluetoothState.UNSUPPORTED;
				Text = Catalog.GetString("Bluetooth Low Energy is not supported on this device.  You will not be able to use any of our Bluetooth devices.");
			}
		}
		else if (base.StateMachine.Bluetooth.notAuthorized())
		{
			if (state_ != BluetoothState.NOTAUTHORIZED)
			{
				state_ = BluetoothState.NOTAUTHORIZED;
				Text = Catalog.GetString("You have not allowed this App to use bluetooth.  You will not be able to use any of our devices until you authorise the use of Bluetooth.");
			}
			StartTimer(1);
		}
		else if (base.StateMachine.Bluetooth.notPowered())
		{
			if (state_ != BluetoothState.NOTPOWERED)
			{
				state_ = BluetoothState.NOTPOWERED;
				Text = Catalog.GetString("Bluetooth is turned off.  Please turn Bluetooth on in your device settings to proceed.");
			}
			StartTimer(1);
		}
		else if (base.StateMachine.Bluetooth.locationRequiredAndNotEnabled())
		{
			if (state_ != BluetoothState.NOTLOCATION)
			{
				state_ = BluetoothState.NOTLOCATION;
				Text = Catalog.GetString("Location Services are turned off.  Please turn Location on in your device settings to proceed.");
			}
			StartTimer(1);
		}
		else
		{
			OnBluetoothRunning();
		}
	}

	public View GetSlide()
	{
		if (slide_ == null)
		{
			slide_ = new BluetoothCheckPage(this);
		}
		return slide_;
	}

	private void UpdateSlide()
	{
		if (slide_ != null)
		{
			slide_.Update();
		}
	}

	public abstract void OnBluetoothRunning();
}

// Activ8rlives.BluetoothPeakFlow
using Activ8rlives;
using Activ8rlivesBase;
using System;
using System.Collections.Generic;
using Vernacular;
using Xamarin.Forms;

public class BluetoothPeakFlow : BluetoothStateMachine
{
	public class PeakFlowUUIDs
	{
		public static Guid peakflow_svc = "7F04F3F0-B665-11E3-A5E2-0800200C9A66".AsGuid();

		public static Guid pfchar_0 = "92B403F0-B665-11E3-A5E2-0800200C9A66".AsGuid();

		public static Guid pfchar_1 = "7D32C0F0-BEF5-11E3-B1B6-0800200C9A66".AsGuid();

		public static Guid pfchar_2 = "F9F84150-B667-11E3-A5E2-0800200C9A66".AsGuid();

		public static Guid pfchar_3 = "2D417C80-B667-11E3-A5E2-0800200C9A66".AsGuid();

		public static Guid pfchar_4151 = "F9F84151-B667-11E3-A5E2-0800200C9A66".AsGuid();

		public static Guid pfchar_4152 = "F9F84152-B667-11E3-A5E2-0800200C9A66".AsGuid();

		public static Guid pfchar_4153 = "F9F84153-B667-11E3-A5E2-0800200C9A66".AsGuid();

		public static Guid pfchar_7 = "1DCEC130-B668-11E3-A5E2-0800200C9A66".AsGuid();

		public static Guid battery_svc = "180f".AsGuid();

		public static Guid bchar_0 = "2a19".AsGuid();

		public static Guid device_info_svc = "180a".AsGuid();

		public static Guid hwchar_0 = "2a27".AsGuid();

		public static Guid fwchar_0 = "2a26".AsGuid();

		public static Guid srchar_0 = "2a28".AsGuid();

		public static ServiceDescriptor svc3 = new ServiceDescriptor
		{
			Service = device_info_svc,
			Characteristics = new Guid[3]
			{
				hwchar_0,
				fwchar_0,
				srchar_0
			}
		};

		public static ServiceDescriptor svc2 = new ServiceDescriptor
		{
			Service = battery_svc,
			Characteristics = new Guid[1]
			{
				bchar_0
			}
		};

		public static ServiceDescriptor svc1 = new ServiceDescriptor
		{
			Service = peakflow_svc,
			Characteristics = new Guid[8]
			{
				pfchar_0,
				pfchar_1,
				pfchar_2,
				pfchar_3,
				pfchar_4151,
				pfchar_4152,
				pfchar_4153,
				pfchar_7
			}
		};
	}

	public abstract class States
	{
		public class PeakFlowState : GenericBluetoothState<BluetoothPeakFlow>
		{
			public PeakFlowState(BluetoothPeakFlow model)
				: base(model, (string)null)
			{
				base.Image = "peakflow_generic.png";
			}

			public override void OnBluetoothDeviceDisconnected()
			{
				base.OnBluetoothDeviceDisconnected();
				base.State = base.StateMachine.State_Error;
			}

			public virtual void OnVolumeStep()
			{
			}

			public void StartTest()
			{
				Log("Starting Test");
				byte[] array = new byte[18];
				array[0] = 1;
				array[1] = 9;
				array[2] = (byte)((base.StateMachine.sequence >> 8) & 0xFF);
				array[3] = (byte)(base.StateMachine.sequence & 0xFF);
				array[4] = 0;
				array[17] = (byte)((array[0] + array[1] + array[2] + array[3]) & 0xFF);
				base.StateMachine.sequence++;
				base.StateMachine.Bluetooth.writeCharacteristic(PeakFlowUUIDs.pfchar_0, array);
			}

			public void StopTest()
			{
				Log("Stopping Test");
				byte[] array = new byte[18];
				array[0] = 1;
				array[1] = 27;
				array[2] = (byte)((base.StateMachine.sequence >> 8) & 0xFF);
				array[3] = (byte)(base.StateMachine.sequence & 0xFF);
				array[4] = 0;
				array[17] = (byte)((array[0] + array[1] + array[2] + array[3]) & 0xFF);
				base.StateMachine.sequence++;
				base.StateMachine.Bluetooth.writeCharacteristic(PeakFlowUUIDs.pfchar_0, array);
			}

			public void RestartTest()
			{
				Log("Restarting Test");
				StopTest();
				base.StateMachine.restart_flag = true;
				StartTimer(2);
			}

			public virtual void OnTestStopped()
			{
				base.State = base.StateMachine.State_NoBlow;
			}

			public virtual void OnTestStarted()
			{
				Log("Test has started");
				base.BottomText = Catalog.GetString("Blow as hard and fast as you can.");
			}

			public override void OnTimer()
			{
				if (base.StateMachine.restart_flag)
				{
					base.StateMachine.restart_flag = false;
					StartTest();
				}
			}

			public virtual void OnTestProgress(double pef, double fev)
			{
			}

			public virtual void OnTestComplete(double pef, double fev1, bool qr_cough, bool qr_short, bool qr_lowvol)
			{
				Log("Test has completed: PEF={0} Fev1={1}", pef, fev1);
			}

			public override void OnBluetoothDataReceived(Guid characteristic, byte[] data)
			{
				if (characteristic.Equals(PeakFlowUUIDs.pfchar_4152) && data.Length == 1)
				{
					base.StateMachine.volume_stepsize = (double)(int)data[0] / 1000.0;
					Log("Step Size {0}", base.StateMachine.volume_stepsize);
					OnVolumeStep();
					return;
				}
				if (characteristic.Equals(PeakFlowUUIDs.pfchar_4151) && data.Length == 1)
				{
					Log("Protocol Name {0}", data[0]);
					return;
				}
				if (characteristic.Equals(PeakFlowUUIDs.bchar_0) && data.Length == 1)
				{
					Log("Battery {0}", data[0]);
				}
				if (characteristic.Equals(PeakFlowUUIDs.pfchar_1))
				{
					Log("Received Data on {0} = {1}", characteristic, data[1]);
					if (data.Length != 0 && data[1] == 9)
					{
						int num = (int)data[4] / 2;
						base.StateMachine.volume_counter += num;
						double num2 = data[5 + 2 * (num - 1)] * 256 + data[5 + 2 * (num - 1) + 1];
						double num3 = 60.0 * num2 / 100.0;
						Log("Progress n={0} pef={1} fev={2}", num, num3, base.StateMachine.volume_counter * base.StateMachine.volume_stepsize);
						OnTestProgress(num3, base.StateMachine.volume_counter * base.StateMachine.volume_stepsize);
					}
					if (data.Length > 2 && data[1] == 27)
					{
						Log("test stopped");
						OnTestStopped();
						return;
					}
					if (data.Length > 2 && data[1] == 28)
					{
						base.StateMachine.volume_counter = 0.0;
						Log("test started");
						OnTestStarted();
						return;
					}
					if (data.Length > 2 && data[1] == 209)
					{
						Log("test complete");
						double num4 = data[7] * 256 + data[8];
						double pef = 60.0 * num4 / 100.0;
						double fev = (double)(data[9] * 256 + data[10]) / 100.0;
						bool qr_cough = (data[6] & 0x20) == 0;
						bool qr_short = (data[6] & 0x40) == 0;
						bool qr_lowvol = (data[6] & 0x80) == 0;
						OnTestComplete(pef, fev, qr_cough, qr_short, qr_lowvol);
						return;
					}
				}
				if (characteristic.Equals(PeakFlowUUIDs.pfchar_3))
				{
					Log("Received Status on {0} = {1}:{2}", characteristic, data[0], data[1]);
					if ((data[1] & 0x80) != 0 && base.StateMachine.restart_flag)
					{
						base.StateMachine.restart_flag = false;
						StartTest();
					}
				}
				if (characteristic.Equals(PeakFlowUUIDs.hwchar_0))
				{
					object[] obj = new object[2]
					{
						characteristic,
						null
					};
					char c = (char)data[0];
					obj[1] = c.ToString();
					Log("Received Hardware Revision on {0} = {1}", obj);
				}
				if (characteristic.Equals(PeakFlowUUIDs.fwchar_0))
				{
					object[] obj2 = new object[4]
					{
						characteristic,
						null,
						null,
						null
					};
					char c = (char)data[0];
					obj2[1] = c.ToString();
					c = (char)data[1];
					obj2[2] = c.ToString();
					c = (char)data[2];
					obj2[3] = c.ToString();
					Log("Received Firmware Revision on {0} = {1}{2}{3}", obj2);
				}
				if (characteristic.Equals(PeakFlowUUIDs.srchar_0))
				{
					object[] obj3 = new object[4]
					{
						characteristic,
						null,
						null,
						null
					};
					char c = (char)data[0];
					obj3[1] = c.ToString();
					c = (char)data[1];
					obj3[2] = c.ToString();
					c = (char)data[2];
					obj3[3] = c.ToString();
					Log("Received Software Revision on {0} = {1}{2}{3}", obj3);
				}
			}
		}

		public class BluetoothCheck : BluetoothCheckStatusState<BluetoothPeakFlow>
		{
			public BluetoothCheck(BluetoothPeakFlow model)
				: base(model, (string)null)
			{
			}

			public override void OnBluetoothRunning()
			{
				if (string.IsNullOrEmpty(base.StateMachine.CurrentDevice))
				{
					base.State = base.StateMachine.State_Scan;
				}
				else
				{
					base.State = base.StateMachine.State_Find;
				}
			}
		}

		public class Error : PeakFlowState
		{
			public Error(BluetoothPeakFlow model)
				: base(model)
			{
				base.TopText = Catalog.GetString("Can't connect to the meter.");
				base.BottomText = Catalog.GetString("Please make sure the batteries are charged and the meter isn't being used by any other device.");
				base.Button1Label = Catalog.GetString("Try Again");
				base.Button2Label = Catalog.GetString("Try Another Meter");
			}

			public override void OnButton1()
			{
				base.State = base.StateMachine.State_Scan;
			}

			public override void OnButton2()
			{
				base.State = base.StateMachine.State_Find;
			}
		}

		public class Scan : PeakFlowState
		{
			public Scan(BluetoothPeakFlow model)
				: base(model)
			{
				base.TopText = Catalog.GetString("Looking for a Peak Flow Meter");
				base.BottomText = Catalog.GetString("Make sure your meter has batteries and is in range.");
				base.Image = Catalog.GetString("peakflow_serial.png");
				base.Content = new PeakFlowDiscoverySlide(PeakFlowSelected);
			}

			public void PeakFlowSelected(DiscoveredPeakFlow device)
			{
				base.TopText = Catalog.GetString("Connecting...");
				base.StateMachine.CurrentDevice = device.Identifier;
				base.StateMachine.restart_flag = false;
				base.StateMachine.uuid = device.Guid;
				base.StateMachine.reconnect_mode = false;
				base.StateMachine.Bluetooth.resetToIdle();
				base.StateMachine.Bluetooth.connectDevice(device.Guid, PeakFlowUUIDs.svc1, PeakFlowUUIDs.svc2, PeakFlowUUIDs.svc3);
				base.State = base.StateMachine.State_Connecting;
			}

			public override void StateStarted()
			{
				(base.Content as PeakFlowDiscoverySlide).Clear();
				base.StateStarted();
				base.StateMachine.Bluetooth.startScanning();
			}

			public override void OnBluetoothDiscovered(Guid uuid, string name, Guid[] services, byte[] manufacturer, int rssi)
			{
				if (name.StartsWith("SO-004-", StringComparison.Ordinal))
				{
					base.TopText = Catalog.GetString("Select your Peak Flow meter");
					base.BottomText = Catalog.GetString("Choose the meter below with the correct serial number.  The serial number can be found inside the battery compartment.");
					base.Image = null;
					(base.Content as PeakFlowDiscoverySlide).AddPeakFlow(new DiscoveredPeakFlow
					{
						Identifier = name.Substring(7),
						Rssi = rssi,
						Guid = uuid
					});
				}
			}
		}

		public class Connecting : PeakFlowState
		{
			public Connecting(BluetoothPeakFlow model)
				: base(model)
			{
			}

			public override void StateStarted()
			{
				if (!base.StateMachine.reconnect_mode)
				{
					base.TopText = Catalog.GetString("Connecting to your Peak Flow Meter");
				}
				else
				{
					base.TopText = Catalog.GetString("Reconnecting to your Peak Flow Meter");
				}
				StartTimer(30);
			}

			public override void OnBluetoothDeviceConnected()
			{
				base.OnBluetoothDeviceConnected();
				StopTimer();
				base.StateMachine.Bluetooth.startNotifying(PeakFlowUUIDs.pfchar_1);
				base.StateMachine.Bluetooth.startNotifying(PeakFlowUUIDs.pfchar_3);
				base.StateMachine.Bluetooth.readCharacteristic(PeakFlowUUIDs.bchar_0);
				base.StateMachine.Bluetooth.readCharacteristic(PeakFlowUUIDs.hwchar_0);
				base.StateMachine.Bluetooth.readCharacteristic(PeakFlowUUIDs.fwchar_0);
				base.StateMachine.Bluetooth.readCharacteristic(PeakFlowUUIDs.srchar_0);
				if (!base.StateMachine.reconnect_mode)
				{
					base.StateMachine.Bluetooth.readCharacteristic(PeakFlowUUIDs.pfchar_4151);
					base.StateMachine.Bluetooth.readCharacteristic(PeakFlowUUIDs.pfchar_4152);
				}
				else
				{
					base.State = base.StateMachine.State_Testing;
				}
			}

			public override void OnTimer()
			{
				base.StateMachine.Bluetooth.resetToIdle();
				base.StateMachine.Bluetooth.connectDevice(base.StateMachine.uuid, PeakFlowUUIDs.svc1, PeakFlowUUIDs.svc2, PeakFlowUUIDs.svc3);
				StartTimer(30);
			}

			public override void OnVolumeStep()
			{
				base.State = base.StateMachine.State_Connected;
			}
		}

		public class Connected : PeakFlowState
		{
			public Connected(BluetoothPeakFlow model)
				: base(model)
			{
				base.TopText = Catalog.GetString("Get Ready for the test");
				base.BottomText = Catalog.GetString("Sit down comfortably.  You will blow up to three times and we will use the best result.  Press next when you are ready.");
				base.Button1Label = Catalog.GetString("Next");
			}

			public override void OnBluetoothDeviceDisconnected()
			{
				Log("Bluetooth disconnected");
				base.StateMachine.reconnect_mode = true;
				base.StateMachine.Bluetooth.resetToIdle();
				base.StateMachine.Bluetooth.connectDevice(base.StateMachine.uuid, PeakFlowUUIDs.svc1, PeakFlowUUIDs.svc2, PeakFlowUUIDs.svc3);
				base.State = base.StateMachine.State_Connecting;
			}

			public override void StateStarted()
			{
			}

			public override void OnButton1()
			{
				base.State = base.StateMachine.State_Testing;
			}
		}

		public class Testing : PeakFlowState, PeakFlowAnimationSource
		{
			private int tests_to_go;

			private bool need_reset;

			private double best_fev;

			private double best_pef;

			private double last_pef;

			private double last_fev;

			private double pef_target;

			private double fev_target;

			private bool retest_state;

			public Testing(BluetoothPeakFlow model)
				: base(model)
			{
				base.TopText = Catalog.GetString("3 Tests to go");
				base.BottomText = Catalog.GetString("Please wait - preparing device...");
				base.Button1Label = Catalog.GetString("Abandon Test");
				if (!retest_state)
				{
					tests_to_go = 3;
				}
				base.Content = new PeakFlowAnimation(this);
				base.Image = null;
				pef_target = base.StateMachine.DataModel.GetLatestNumericValueForType("Pef-target", 400.0, -1L);
				fev_target = base.StateMachine.DataModel.GetLatestNumericValueForType("Fev1-target", 3.0, -1L);
			}

			public void SetRetestState()
			{
				retest_state = true;
			}

			public double GetPEF()
			{
				return last_pef;
			}

			public double GetFev1()
			{
				return last_fev;
			}

			public double GetMaxPEF()
			{
				return pef_target;
			}

			public double GetMaxFev1()
			{
				return fev_target;
			}

			public int GetTestCount()
			{
				return tests_to_go;
			}

			private void RefreshGraph()
			{
				(base.Content as PeakFlowAnimation).Invalidate();
			}

			public override void StateStarted()
			{
				if (!retest_state)
				{
					last_pef = 0.0;
					last_fev = 0.0;
					need_reset = true;
				}
				retest_state = false;
				RefreshGraph();
				if (tests_to_go == 1)
				{
					base.TopText = Catalog.GetString("Last test");
				}
				else
				{
					base.TopText = string.Format(Catalog.GetPluralString("{0} test to go", "{0} tests to go", tests_to_go), new object[1]
					{
						tests_to_go
					});
				}
				base.BottomText = Catalog.GetString("Blow as hard and fast as you can.");
				StartTest();
			}

			public override void OnButton1()
			{
				if (tests_to_go < 3)
				{
					Finish();
				}
				else
				{
					Done();
				}
			}

			private void Finish()
			{
				DateTime now = DateTime.Now;
				string source = "peakflow/smartone";
				base.StateMachine.DataModel.SetData(source, Guid.NewGuid(), now, now, null, new Dictionary<string, object>
				{
					{
						"Peak-Flow",
						best_pef
					},
					{
						"Forced-Exhalation-Volume",
						best_fev
					}
				}, signal: true, null, -1L);
				Done();
			}

			public override void OnBluetoothDeviceDisconnected()
			{
				Log("Bluetooth disconnected");
				base.StateMachine.reconnect_mode = true;
				base.StateMachine.Bluetooth.resetToIdle();
				base.StateMachine.Bluetooth.connectDevice(base.StateMachine.uuid, PeakFlowUUIDs.svc1, PeakFlowUUIDs.svc2, PeakFlowUUIDs.svc3);
				base.State = base.StateMachine.State_Connecting;
			}

			public override void OnTestProgress(double pef, double fev)
			{
				if (need_reset || pef > last_pef)
				{
					last_pef = pef;
				}
				last_fev = fev;
				need_reset = false;
				RefreshGraph();
			}

			public override void OnTestComplete(double pef, double fev1, bool qr_cough, bool qr_short, bool qr_lowvol)
			{
				need_reset = true;
				if (tests_to_go == 0)
				{
					base.BottomText = Catalog.GetString("Complete");
				}
				else
				{
					base.BottomText = Catalog.GetString("Please wait - preparing device...");
				}
				if (qr_cough)
				{
					if (tests_to_go == 1)
					{
						base.TopText = Catalog.GetString("Did you Cough? - Last test");
					}
					else
					{
						base.TopText = string.Format(Catalog.GetPluralString("Did you Cough? - {0} test to go", "Did you Cough? - {0} tests to go", tests_to_go), new object[1]
						{
							tests_to_go
						});
					}
					return;
				}
				string str = "";
				if (!qr_short && !qr_lowvol)
				{
					str = "Good Blow - ";
				}
				if (tests_to_go == 3)
				{
					best_fev = fev1;
					best_pef = pef;
				}
				else if (pef > best_pef)
				{
					best_pef = pef;
					best_fev = fev1;
				}
				tests_to_go--;
				if (tests_to_go > 0)
				{
					if (tests_to_go == 1)
					{
						base.TopText = str + Catalog.GetString("Last test");
					}
					else
					{
						base.TopText = str + string.Format(Catalog.GetString("{0} tests to go", "More than 1"), new object[1]
						{
							tests_to_go
						});
					}
					base.Button1Label = Catalog.GetString("Finish now and save");
					last_fev = fev1;
					last_pef = pef;
					RefreshGraph();
				}
				else
				{
					Finish();
				}
			}
		}

		public class Find : PeakFlowState
		{
			public Find(BluetoothPeakFlow model)
				: base(model)
			{
				base.TopText = Catalog.GetString("Finding your Peak Flow Meter");
				base.BottomText = Catalog.GetString("Make sure your meter has batteries and is in range.\nIf you have a different meter, press 'Change Meter'");
				base.Button1Label = Catalog.GetString("Change Meter");
			}

			public override void OnButton1()
			{
				base.StateMachine.Bluetooth.resetToIdle();
				base.StateMachine.CurrentDevice = string.Empty;
				base.State = base.StateMachine.State_Scan;
			}

			public override void StateStarted()
			{
				base.StateStarted();
				base.StateMachine.Bluetooth.startScanning();
			}

			public override void OnBluetoothDiscovered(Guid uuid, string name, Guid[] services, byte[] manufacturer, int rssi)
			{
				if (name.Equals("SO-004-" + base.StateMachine.CurrentDevice))
				{
					base.StateMachine.restart_flag = false;
					base.StateMachine.reconnect_mode = false;
					base.StateMachine.uuid = uuid;
					base.StateMachine.Bluetooth.resetToIdle();
					base.StateMachine.Bluetooth.connectDevice(uuid, PeakFlowUUIDs.svc1, PeakFlowUUIDs.svc2, PeakFlowUUIDs.svc3);
					base.State = base.StateMachine.State_Connecting;
				}
			}
		}

		public class NoBlow : PeakFlowState
		{
			public NoBlow(BluetoothPeakFlow model)
				: base(model)
			{
				base.TopText = Catalog.GetString("No breath was detected by the peak flow meter");
				base.BottomText = Catalog.GetString("Make sure that the turbine is fully fitted and the correct way");
				base.Button1Label = Catalog.GetString("Try Again");
				base.Button2Label = Catalog.GetString("Abandon test");
				base.Image = Catalog.GetString("peakflow_connecting.png");
			}

			public override void OnButton1()
			{
				base.StateMachine.State_Testing.SetRetestState();
				base.State = base.StateMachine.State_Testing;
			}

			public override void OnButton2()
			{
				base.StateMachine.State_Testing.OnButton1();
			}

			public override void StateStarted()
			{
				if (base.StateMachine.State_Testing.GetTestCount() == 3)
				{
					base.Button2Label = Catalog.GetString("Abandon test");
				}
				else
				{
					base.Button2Label = Catalog.GetString("Finish and save");
				}
			}
		}
	}

	public double volume_stepsize;

	public double volume_counter;

	public ushort sequence;

	public bool restart_flag;

	public Guid uuid;

	public bool reconnect_mode;

	public string device_;

	public States.BluetoothCheck State_BluetoothCheck;

	public States.Error State_Error;

	public States.Scan State_Scan;

	public States.Connected State_Connected;

	public States.Connecting State_Connecting;

	public States.Testing State_Testing;

	public States.Find State_Find;

	public States.NoBlow State_NoBlow;

	public DataModel DataModel
	{
		get;
		private set;
	}

	public string CurrentDevice
	{
		get
		{
			return device_;
		}
		set
		{
			device_ = value;
			DataModel.SetLocalParameter("pf-device", device_, -1L);
		}
	}

	public BluetoothPeakFlow(IStateMachineDelegate d)
		: base(CommonApp.CurrentCommonApp.getThreadService(), CommonApp.CurrentCommonApp.getLogger(), CommonApp.CurrentCommonApp.getBluetoothManager(), "Peak Flow", d, lockout: true)
	{
		DataModel = CommonApp.CurrentCommonApp.getDataModel();
		device_ = DataModel.GetLocalParameter("pf-device", null, -1L);
		State_BluetoothCheck = new States.BluetoothCheck(this);
		State_Error = new States.Error(this);
		State_Scan = new States.Scan(this);
		State_Connected = new States.Connected(this);
		State_Connecting = new States.Connecting(this);
		State_Testing = new States.Testing(this);
		State_Find = new States.Find(this);
		State_NoBlow = new States.NoBlow(this);
		base.State = State_BluetoothCheck;
	}

	public override void RunInForeground(Action a)
	{
		Device.BeginInvokeOnMainThread(a);
	}

	public override void Shutdown()
	{
		base.Shutdown();
		State_BluetoothCheck = null;
		State_Error = null;
		State_Scan = null;
		State_Connected = null;
		State_Connecting = null;
		State_Testing = null;
		State_Find = null;
	}
}

// Activ8rlives.BluetoothPeakFlowView
using Activ8rlives;
using System;
using System.Collections.Generic;
using Vernacular;

public class BluetoothPeakFlowView : StateMachineView
{
	private BluetoothPeakFlow state_machine_;

	private Action<IList<string>, string> done_action_;

	public BluetoothPeakFlowView(Action<IList<string>, string> done_action)
	{
		state_machine_ = new BluetoothPeakFlow(this);
		done_action_ = done_action;
		base.DefaultTitle = Catalog.GetString("Peak Flow");
	}

	public override void Done()
	{
		state_machine_.Shutdown();
		done_action_(new List<string>
		{
			"Peak-Flow",
			"Forced-Exhalation-Volume"
		}, "peakflow/smartone");
	}

	protected override void OnRemoved()
	{
		base.OnRemoved();
		state_machine_.Shutdown();
	}

	~BluetoothPeakFlowView()
	{
	}
}

// Activ8rlives.BluetoothPulseOx1
using Activ8rlives;
using Activ8rlivesBase;
using System;
using Xamarin.Forms;

public class BluetoothPulseOx1 : BluetoothStateMachine
{
	public Ox1State_BluetoothCheck State_BluetoothCheck;

	public BluetoothPulseOx1State State_Setup;

	public BluetoothPulseOx1State State_Waiting;

	public BluetoothPulseOx1State State_Connecting;

	public BluetoothPulseOx1State State_WaitForPulse;

	public PulseOxState_Collecting State_Collecting;

	public BluetoothPulseOx1State State_Paused;

	public BluetoothPulseOx1State State_Failed;

	public static int AllowedPauseTime = 10;

	public static int TotalCollectionTime = 50;

	public static int LivePeriodStart = 10;

	public static int LivePeriodEnd = 40;

	public DataModel DataModel
	{
		get;
		private set;
	}

	public BluetoothPulseOx1(IStateMachineDelegate d)
		: base(CommonApp.CurrentCommonApp.getThreadService(), CommonApp.CurrentCommonApp.getLogger(), CommonApp.CurrentCommonApp.getBluetoothManager(), "Pulse Ox 1", d, lockout: true)
	{
		DataModel = CommonApp.CurrentCommonApp.getDataModel();
		State_Setup = new PulseOxState_Setup(this);
		State_Waiting = new PulseOxState_Waiting(this);
		State_Connecting = new PulseOxState_Connecting(this);
		State_WaitForPulse = new PulseOxState_WaitForPulse(this);
		State_Collecting = new PulseOxState_Collecting(this);
		State_Paused = new PulseOxState_Paused(this);
		State_Failed = new PulseOxState_Failed(this);
		State_BluetoothCheck = new Ox1State_BluetoothCheck(this);
		base.State = State_BluetoothCheck;
	}

	public override void RunInForeground(Action a)
	{
		Device.BeginInvokeOnMainThread(a);
	}

	public void Change()
	{
		(GetDelegate() as BluetoothPulseOx1View)?.Change();
	}
}

// Activ8rlives.BluetoothPulseOx1ReadingState
using Activ8rlives;
using System;

public class BluetoothPulseOx1ReadingState : BluetoothPulseOx1State
{
	public BluetoothPulseOx1ReadingState(BluetoothPulseOx1 model, string name)
		: base(model, name)
	{
	}

	public virtual bool OnChunkReceived(int spo2_low_ind, int long_search_ind, int signal_level, int pulse_wave, int pulse, int spo2, int probe_error_ind, int pulse_ind)
	{
		return true;
	}

	public override void OnBluetoothDataReceived(Guid characteristic, byte[] data)
	{
		int num = data.Length;
		int num2 = 0;
		while (num >= 5)
		{
			int num3 = data[num2];
			int num4 = data[num2 + 1];
			int num5 = data[num2 + 2];
			int num6 = data[num2 + 3];
			int num7 = data[num2 + 4];
			if ((num3 & 0x80) != 0)
			{
				int spo2_low_ind = ((num3 & 0x20) != 0) ? 1 : 0;
				int long_search_ind = ((num3 & 0x10) != 0) ? 1 : 0;
				int signal_level = num3 & 0xF;
				int pulse_wave = (num4 & 0x7F) | ((num5 & 0xF) << 7);
				int pulse = (num6 & 0x7F) | (((num5 & 0x40) != 0) ? 128 : 0);
				int spo = num7 & 0x7F;
				int probe_error_ind = ((num5 & 0x10) != 0) ? 1 : 0;
				int pulse_ind = ((num5 & 0x20) == 0) ? 1 : 0;
				if (!OnChunkReceived(spo2_low_ind, long_search_ind, signal_level, pulse_wave, pulse, spo, probe_error_ind, pulse_ind))
				{
					break;
				}
			}
			num -= 5;
			num2 += 5;
		}
	}
}

// Activ8rlives.BluetoothPulseOx1State
using Activ8rlives;

public class BluetoothPulseOx1State : GenericBluetoothState<BluetoothPulseOx1>
{
	public BluetoothPulseOx1State(BluetoothPulseOx1 model, string name)
		: base(model, name)
	{
	}

	public override void OnBluetoothDeviceDisconnected()
	{
		base.OnBluetoothDeviceDisconnected();
		base.State = base.StateMachine.State_Failed;
	}
}

// Activ8rlives.BluetoothPulseOx1View
using Activ8rlives;
using System;
using System.Collections.Generic;
using Vernacular;

public class BluetoothPulseOx1View : StateMachineView
{
	private BluetoothPulseOx1 state_machine_;

	private Action<IList<string>, string> done_action_;

	private Action choose_action_;

	public BluetoothPulseOx1View(Action<IList<string>, string> done_action, Action choose_again_action)
	{
		state_machine_ = new BluetoothPulseOx1(this);
		done_action_ = done_action;
		choose_action_ = choose_again_action;
		base.DefaultTitle = Catalog.GetString("Pulse Oximeter");
	}

	public void Change()
	{
		state_machine_.Shutdown();
		choose_action_();
	}

	public override void Done()
	{
		state_machine_.Shutdown();
		done_action_(new List<string>
		{
			"Oxygen",
			"Pulse"
		}, "pulseox");
	}

	protected override void OnRemoved()
	{
		base.OnRemoved();
		state_machine_.Shutdown();
	}
}

// Activ8rlives.BluetoothPulseOx2
using Activ8rlives;
using Activ8rlivesBase;
using System;
using Xamarin.Forms;

public class BluetoothPulseOx2 : BluetoothStateMachine
{
	public BluetoothPulseOx2State State_Setup;

	public BluetoothPulseOx2State State_Waiting;

	public BluetoothPulseOx2State State_Connecting;

	public BluetoothPulseOx2State State_WaitForPulse;

	public PulseOx2State_Collecting State_Collecting;

	public BluetoothPulseOx2State State_Paused;

	public BluetoothPulseOx2State State_Failed;

	public Ox2State_BluetoothCheck State_BluetoothCheck;

	public static int TotalCollectionTime = 15;

	public static uint PlethBufferSize = 1024u;

	public DataModel DataModel
	{
		get;
		private set;
	}

	public BluetoothPulseOx2(IStateMachineDelegate d)
		: base(CommonApp.CurrentCommonApp.getThreadService(), CommonApp.CurrentCommonApp.getLogger(), CommonApp.CurrentCommonApp.getBluetoothManager(), "Pulse Ox 2", d, lockout: true)
	{
		DataModel = CommonApp.CurrentCommonApp.getDataModel();
		State_Setup = new PulseOx2State_Setup(this);
		State_Waiting = new PulseOx2State_Waiting(this);
		State_Connecting = new PulseOx2State_Connecting(this);
		State_Collecting = new PulseOx2State_Collecting(this);
		State_Failed = new PulseOx2State_Failed(this);
		State_BluetoothCheck = new Ox2State_BluetoothCheck(this);
		base.State = State_BluetoothCheck;
	}

	public void Change()
	{
		(GetDelegate() as BluetoothPulseOx2View)?.Change();
	}

	public override void RunInForeground(Action a)
	{
		Device.BeginInvokeOnMainThread(a);
	}
}

// Activ8rlives.BluetoothPulseOx2State
using Activ8rlives;

public class BluetoothPulseOx2State : GenericBluetoothState<BluetoothPulseOx2>
{
	public BluetoothPulseOx2State(BluetoothPulseOx2 model, string name)
		: base(model, name)
	{
	}

	public override void OnBluetoothDeviceDisconnected()
	{
		base.OnBluetoothDeviceDisconnected();
		base.State = base.StateMachine.State_Failed;
	}
}

// Activ8rlives.BluetoothPulseOx2View
using Activ8rlives;
using System;
using System.Collections.Generic;
using Vernacular;

public class BluetoothPulseOx2View : StateMachineView
{
	private BluetoothPulseOx2 state_machine_;

	private Action<IList<string>, string> done_action_;

	private Action choose_action_;

	public BluetoothPulseOx2View(Action<IList<string>, string> done_action, Action choose_again_action)
	{
		state_machine_ = new BluetoothPulseOx2(this);
		done_action_ = done_action;
		choose_action_ = choose_again_action;
		base.DefaultTitle = Catalog.GetString("Pulse Oximeter");
	}

	public void Change()
	{
		state_machine_.Shutdown();
		choose_action_();
	}

	public override void Done()
	{
		state_machine_.Shutdown();
		done_action_(new List<string>
		{
			"Oxygen",
			"Pulse"
		}, "pulseox/jumper");
	}

	protected override void OnRemoved()
	{
		base.OnRemoved();
		state_machine_.Shutdown();
	}
}

// Activ8rlives.BluetoothScalesCheckPage
using Activ8rlives;
using System;
using System.CodeDom.Compiler;
using System.Reflection;
using System.Threading.Tasks;
using Vernacular;
using Vernacular.Xaml;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Devices/BluetoothSmartScales/BluetoothScalesCheckPage.xaml")]
public class BluetoothScalesCheckPage : StackLayout
{
	private DataModel model_;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private WeightUnitsEditor weight_units_input;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private HeightUnitsEditor height_units_input;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private HeightEditor height_input;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label no_height_input;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private GenderEditor gender_input;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _next;

	public BluetoothScalesCheckPage(IBluetoothScalesCheckState state)
	{
		base.Resources = Theme.GetResourceDictionary();
		InitializeComponent();
		model_ = CommonApp.CurrentCommonApp.getDataModel();
		height_input.IsVisible = (height_units_input.SelectedIndex != -1);
		no_height_input.IsVisible = (height_units_input.SelectedIndex == -1);
		height_units_input.SelectedIndexChanged += HeightUnitsSet;
		weight_units_input.SelectedIndexChanged += WeightUnitsSet;
		gender_input.SelectedIndexChanged += GenderSet;
		_next.IsEnabled = NextEnabled();
		_next.Clicked += delegate
		{
			if (model_.GetLatestNumericValueForType("Height", 0.0, -1L) < 1.0)
			{
				CommonApp.CurrentCommonApp.DisplayAlert1(Vernacular.Catalog.GetString("Error: No height found"), Vernacular.Catalog.GetString("Body composition analysis requires an accurate height to be entered.\n\nPlease use the height editor on this page to enter your height."), Vernacular.Catalog.GetString("OK"));
			}
			else
			{
				Unfocus();
				Task.Delay(500).ContinueWith(delegate
				{
					Device.BeginInvokeOnMainThread(delegate
					{
						state.OnNextButton();
					});
				});
			}
		};
	}

	public bool NextEnabled()
	{
		if (weight_units_input.SelectedIndex < 0 || height_units_input.SelectedIndex < 0 || gender_input.SelectedIndex < 0)
		{
			return false;
		}
		return true;
	}

	private void HeightUnitsSet(object sender, EventArgs e)
	{
		height_input.IsVisible = (height_units_input.SelectedIndex != -1);
		no_height_input.IsVisible = (height_units_input.SelectedIndex == -1);
		_next.IsEnabled = NextEnabled();
	}

	private void WeightUnitsSet(object sender, EventArgs e)
	{
		_next.IsEnabled = NextEnabled();
	}

	private void GenderSet(object sender, EventArgs e)
	{
		_next.IsEnabled = NextEnabled();
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly().GetName(), "Devices/BluetoothSmartScales/BluetoothScalesCheckPage.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		StaticResourceExtension staticResourceExtension = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension2 = new StaticResourceExtension();
		Label label = new Label();
		StaticResourceExtension staticResourceExtension3 = new StaticResourceExtension();
		Label label2 = new Label();
		StaticResourceExtension staticResourceExtension4 = new StaticResourceExtension();
		Label label3 = new Label();
		StaticResourceExtension staticResourceExtension5 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension6 = new StaticResourceExtension();
		WeightUnitsEditor weightUnitsEditor = new WeightUnitsEditor();
		StaticResourceExtension staticResourceExtension7 = new StaticResourceExtension();
		Label label4 = new Label();
		StaticResourceExtension staticResourceExtension8 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension9 = new StaticResourceExtension();
		HeightUnitsEditor heightUnitsEditor = new HeightUnitsEditor();
		StaticResourceExtension staticResourceExtension10 = new StaticResourceExtension();
		Label label5 = new Label();
		StaticResourceExtension staticResourceExtension11 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension12 = new StaticResourceExtension();
		HeightEditor heightEditor = new HeightEditor();
		Color a8_PINK_X = Colors.A8_PINK_X;
		Label label6 = new Label();
		StaticResourceExtension staticResourceExtension13 = new StaticResourceExtension();
		Label label7 = new Label();
		StaticResourceExtension staticResourceExtension14 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension15 = new StaticResourceExtension();
		DateOfBirthEditor dateOfBirthEditor = new DateOfBirthEditor();
		StaticResourceExtension staticResourceExtension16 = new StaticResourceExtension();
		Label label8 = new Label();
		StaticResourceExtension staticResourceExtension17 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension18 = new StaticResourceExtension();
		GenderEditor genderEditor = new GenderEditor();
		StaticResourceExtension staticResourceExtension19 = new StaticResourceExtension();
		Label label9 = new Label();
		SkipScalesChecksEditor skipScalesChecksEditor = new SkipScalesChecksEditor();
		StackLayout stackLayout = new StackLayout();
		StackLayout stackLayout2 = new StackLayout();
		ScrollView scrollView = new ScrollView();
		BlueButton blueButton = new BlueButton();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(scrollView, nameScope);
		NameScope.SetNameScope(stackLayout2, nameScope);
		NameScope.SetNameScope(label, nameScope);
		NameScope.SetNameScope(label2, nameScope);
		NameScope.SetNameScope(label3, nameScope);
		NameScope.SetNameScope(weightUnitsEditor, nameScope);
		((INameScope)nameScope).RegisterName("weight_units_input", (object)weightUnitsEditor);
		if (weightUnitsEditor.StyleId == null)
		{
			weightUnitsEditor.StyleId = "weight_units_input";
		}
		NameScope.SetNameScope(label4, nameScope);
		NameScope.SetNameScope(heightUnitsEditor, nameScope);
		((INameScope)nameScope).RegisterName("height_units_input", (object)heightUnitsEditor);
		if (heightUnitsEditor.StyleId == null)
		{
			heightUnitsEditor.StyleId = "height_units_input";
		}
		NameScope.SetNameScope(label5, nameScope);
		NameScope.SetNameScope(heightEditor, nameScope);
		((INameScope)nameScope).RegisterName("height_input", (object)heightEditor);
		if (heightEditor.StyleId == null)
		{
			heightEditor.StyleId = "height_input";
		}
		NameScope.SetNameScope(label6, nameScope);
		((INameScope)nameScope).RegisterName("no_height_input", (object)label6);
		if (label6.StyleId == null)
		{
			label6.StyleId = "no_height_input";
		}
		NameScope.SetNameScope(label7, nameScope);
		NameScope.SetNameScope(dateOfBirthEditor, nameScope);
		NameScope.SetNameScope(label8, nameScope);
		NameScope.SetNameScope(genderEditor, nameScope);
		((INameScope)nameScope).RegisterName("gender_input", (object)genderEditor);
		if (genderEditor.StyleId == null)
		{
			genderEditor.StyleId = "gender_input";
		}
		NameScope.SetNameScope(stackLayout, nameScope);
		NameScope.SetNameScope(label9, nameScope);
		NameScope.SetNameScope(skipScalesChecksEditor, nameScope);
		NameScope.SetNameScope(blueButton, nameScope);
		((INameScope)nameScope).RegisterName("_next", (object)blueButton);
		if (blueButton.StyleId == null)
		{
			blueButton.StyleId = "_next";
		}
		weight_units_input = weightUnitsEditor;
		height_units_input = heightUnitsEditor;
		height_input = heightEditor;
		no_height_input = label6;
		gender_input = genderEditor;
		_next = blueButton;
		SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0, 10.0, 10.0, 10.0));
		staticResourceExtension.Key = "PageBGColor";
		StaticResourceExtension staticResourceExtension20 = staticResourceExtension;
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 1];
		array[0] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, VisualElement.BackgroundColorProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(8, 4)));
		object obj = ((IMarkupExtension)staticResourceExtension20).ProvideValue((IServiceProvider)xamlServiceProvider);
		BackgroundColor = (Color)obj;
		scrollView.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		scrollView.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
		label.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Check Settings");
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label10 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 4];
		array2[0] = label;
		array2[1] = stackLayout2;
		array2[2] = scrollView;
		array2[3] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.FontSizeProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(12, 101)));
		label10.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider2));
		staticResourceExtension2.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension21 = staticResourceExtension2;
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 4];
		array3[0] = label;
		array3[1] = stackLayout2;
		array3[2] = scrollView;
		array3[3] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, Label.TextColorProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(12, 115)));
		object obj2 = ((IMarkupExtension)staticResourceExtension21).ProvideValue((IServiceProvider)xamlServiceProvider3);
		label.TextColor = (Color)obj2;
		label.SetValue(View.MarginProperty, new Thickness(0.0, 0.0, 0.0, 0.0));
		label.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		stackLayout2.Children.Add(label);
		label2.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "To work properly, the Body Analyser needs your Height, Age and Gender. Please make sure they are correct.");
		Label label11 = label2;
		BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
		Type typeFromHandle7 = typeof(IProvideValueTarget);
		object[] array4 = new object[0 + 4];
		array4[0] = label2;
		array4[1] = stackLayout2;
		array4[2] = scrollView;
		array4[3] = this;
		xamlServiceProvider4.Add(typeFromHandle7, new SimpleValueTargetProvider(array4, Label.FontSizeProperty));
		xamlServiceProvider4.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle8 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
		xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver4.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver4.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(14, 141)));
		label11.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider4));
		staticResourceExtension3.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension22 = staticResourceExtension3;
		XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
		Type typeFromHandle9 = typeof(IProvideValueTarget);
		object[] array5 = new object[0 + 4];
		array5[0] = label2;
		array5[1] = stackLayout2;
		array5[2] = scrollView;
		array5[3] = this;
		xamlServiceProvider5.Add(typeFromHandle9, new SimpleValueTargetProvider(array5, Label.TextColorProperty));
		xamlServiceProvider5.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle10 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
		xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver5.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver5.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(14, 155)));
		object obj3 = ((IMarkupExtension)staticResourceExtension22).ProvideValue((IServiceProvider)xamlServiceProvider5);
		label2.TextColor = (Color)obj3;
		stackLayout2.Children.Add(label2);
		label3.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Weight Units");
		label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label12 = label3;
		BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
		Type typeFromHandle11 = typeof(IProvideValueTarget);
		object[] array6 = new object[0 + 4];
		array6[0] = label3;
		array6[1] = stackLayout2;
		array6[2] = scrollView;
		array6[3] = this;
		xamlServiceProvider6.Add(typeFromHandle11, new SimpleValueTargetProvider(array6, Label.FontSizeProperty));
		xamlServiceProvider6.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle12 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
		xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver6.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver6.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(16, 99)));
		label12.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider6));
		staticResourceExtension4.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension23 = staticResourceExtension4;
		XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
		Type typeFromHandle13 = typeof(IProvideValueTarget);
		object[] array7 = new object[0 + 4];
		array7[0] = label3;
		array7[1] = stackLayout2;
		array7[2] = scrollView;
		array7[3] = this;
		xamlServiceProvider7.Add(typeFromHandle13, new SimpleValueTargetProvider(array7, Label.TextColorProperty));
		xamlServiceProvider7.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle14 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
		xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver7.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver7.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(16, 113)));
		object obj4 = ((IMarkupExtension)staticResourceExtension23).ProvideValue((IServiceProvider)xamlServiceProvider7);
		label3.TextColor = (Color)obj4;
		label3.SetValue(View.MarginProperty, new Thickness(0.0, 15.0, 0.0, 0.0));
		stackLayout2.Children.Add(label3);
		weightUnitsEditor.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension5.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension24 = staticResourceExtension5;
		XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
		Type typeFromHandle15 = typeof(IProvideValueTarget);
		object[] array8 = new object[0 + 4];
		array8[0] = weightUnitsEditor;
		array8[1] = stackLayout2;
		array8[2] = scrollView;
		array8[3] = this;
		xamlServiceProvider8.Add(typeFromHandle15, new SimpleValueTargetProvider(array8, VisualElement.BackgroundColorProperty));
		xamlServiceProvider8.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle16 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
		xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver8.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver8.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(17, 89)));
		object obj5 = ((IMarkupExtension)staticResourceExtension24).ProvideValue((IServiceProvider)xamlServiceProvider8);
		weightUnitsEditor.BackgroundColor = (Color)obj5;
		staticResourceExtension6.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension25 = staticResourceExtension6;
		XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
		Type typeFromHandle17 = typeof(IProvideValueTarget);
		object[] array9 = new object[0 + 4];
		array9[0] = weightUnitsEditor;
		array9[1] = stackLayout2;
		array9[2] = scrollView;
		array9[3] = this;
		xamlServiceProvider9.Add(typeFromHandle17, new SimpleValueTargetProvider(array9, Picker.TextColorProperty));
		xamlServiceProvider9.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle18 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
		xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver9.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver9.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(17, 140)));
		object obj6 = ((IMarkupExtension)staticResourceExtension25).ProvideValue((IServiceProvider)xamlServiceProvider9);
		weightUnitsEditor.TextColor = (Color)obj6;
		weightUnitsEditor.SetValue(Picker.TitleProperty, "Select units");
		stackLayout2.Children.Add(weightUnitsEditor);
		label4.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Height Units");
		label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label13 = label4;
		BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
		Type typeFromHandle19 = typeof(IProvideValueTarget);
		object[] array10 = new object[0 + 4];
		array10[0] = label4;
		array10[1] = stackLayout2;
		array10[2] = scrollView;
		array10[3] = this;
		xamlServiceProvider10.Add(typeFromHandle19, new SimpleValueTargetProvider(array10, Label.FontSizeProperty));
		xamlServiceProvider10.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle20 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
		xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver10.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver10.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(19, 99)));
		label13.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider10));
		staticResourceExtension7.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension26 = staticResourceExtension7;
		XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
		Type typeFromHandle21 = typeof(IProvideValueTarget);
		object[] array11 = new object[0 + 4];
		array11[0] = label4;
		array11[1] = stackLayout2;
		array11[2] = scrollView;
		array11[3] = this;
		xamlServiceProvider11.Add(typeFromHandle21, new SimpleValueTargetProvider(array11, Label.TextColorProperty));
		xamlServiceProvider11.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle22 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
		xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver11.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver11.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(19, 113)));
		object obj7 = ((IMarkupExtension)staticResourceExtension26).ProvideValue((IServiceProvider)xamlServiceProvider11);
		label4.TextColor = (Color)obj7;
		label4.SetValue(View.MarginProperty, new Thickness(0.0, 15.0, 0.0, 0.0));
		stackLayout2.Children.Add(label4);
		heightUnitsEditor.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension8.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension27 = staticResourceExtension8;
		XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
		Type typeFromHandle23 = typeof(IProvideValueTarget);
		object[] array12 = new object[0 + 4];
		array12[0] = heightUnitsEditor;
		array12[1] = stackLayout2;
		array12[2] = scrollView;
		array12[3] = this;
		xamlServiceProvider12.Add(typeFromHandle23, new SimpleValueTargetProvider(array12, VisualElement.BackgroundColorProperty));
		xamlServiceProvider12.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle24 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
		xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver12.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver12.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(20, 89)));
		object obj8 = ((IMarkupExtension)staticResourceExtension27).ProvideValue((IServiceProvider)xamlServiceProvider12);
		heightUnitsEditor.BackgroundColor = (Color)obj8;
		staticResourceExtension9.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension28 = staticResourceExtension9;
		XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
		Type typeFromHandle25 = typeof(IProvideValueTarget);
		object[] array13 = new object[0 + 4];
		array13[0] = heightUnitsEditor;
		array13[1] = stackLayout2;
		array13[2] = scrollView;
		array13[3] = this;
		xamlServiceProvider13.Add(typeFromHandle25, new SimpleValueTargetProvider(array13, Picker.TextColorProperty));
		xamlServiceProvider13.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle26 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
		xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver13.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver13.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(20, 140)));
		object obj9 = ((IMarkupExtension)staticResourceExtension28).ProvideValue((IServiceProvider)xamlServiceProvider13);
		heightUnitsEditor.TextColor = (Color)obj9;
		heightUnitsEditor.SetValue(Picker.TitleProperty, "Select units");
		stackLayout2.Children.Add(heightUnitsEditor);
		label5.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Height");
		label5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label14 = label5;
		BindableProperty fontSizeProperty5 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
		Type typeFromHandle27 = typeof(IProvideValueTarget);
		object[] array14 = new object[0 + 4];
		array14[0] = label5;
		array14[1] = stackLayout2;
		array14[2] = scrollView;
		array14[3] = this;
		xamlServiceProvider14.Add(typeFromHandle27, new SimpleValueTargetProvider(array14, Label.FontSizeProperty));
		xamlServiceProvider14.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle28 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
		xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver14.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver14.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(22, 93)));
		label14.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider14));
		staticResourceExtension10.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension29 = staticResourceExtension10;
		XamlServiceProvider xamlServiceProvider15 = new XamlServiceProvider();
		Type typeFromHandle29 = typeof(IProvideValueTarget);
		object[] array15 = new object[0 + 4];
		array15[0] = label5;
		array15[1] = stackLayout2;
		array15[2] = scrollView;
		array15[3] = this;
		xamlServiceProvider15.Add(typeFromHandle29, new SimpleValueTargetProvider(array15, Label.TextColorProperty));
		xamlServiceProvider15.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle30 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver15 = new XmlNamespaceResolver();
		xmlNamespaceResolver15.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver15.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver15.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver15.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider15.Add(typeFromHandle30, new XamlTypeResolver(xmlNamespaceResolver15, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider15.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(22, 107)));
		object obj10 = ((IMarkupExtension)staticResourceExtension29).ProvideValue((IServiceProvider)xamlServiceProvider15);
		label5.TextColor = (Color)obj10;
		label5.SetValue(View.MarginProperty, new Thickness(0.0, 15.0, 0.0, 0.0));
		stackLayout2.Children.Add(label5);
		heightEditor.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension11.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension30 = staticResourceExtension11;
		XamlServiceProvider xamlServiceProvider16 = new XamlServiceProvider();
		Type typeFromHandle31 = typeof(IProvideValueTarget);
		object[] array16 = new object[0 + 4];
		array16[0] = heightEditor;
		array16[1] = stackLayout2;
		array16[2] = scrollView;
		array16[3] = this;
		xamlServiceProvider16.Add(typeFromHandle31, new SimpleValueTargetProvider(array16, typeof(DoubleUnitEditor).GetRuntimeProperty("CustomBGColor")));
		xamlServiceProvider16.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle32 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver16 = new XmlNamespaceResolver();
		xmlNamespaceResolver16.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver16.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver16.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver16.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider16.Add(typeFromHandle32, new XamlTypeResolver(xmlNamespaceResolver16, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider16.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(23, 78)));
		object obj11 = ((IMarkupExtension)staticResourceExtension30).ProvideValue((IServiceProvider)xamlServiceProvider16);
		heightEditor.CustomBGColor = (Color)obj11;
		staticResourceExtension12.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension31 = staticResourceExtension12;
		XamlServiceProvider xamlServiceProvider17 = new XamlServiceProvider();
		Type typeFromHandle33 = typeof(IProvideValueTarget);
		object[] array17 = new object[0 + 4];
		array17[0] = heightEditor;
		array17[1] = stackLayout2;
		array17[2] = scrollView;
		array17[3] = this;
		xamlServiceProvider17.Add(typeFromHandle33, new SimpleValueTargetProvider(array17, typeof(DoubleUnitEditor).GetRuntimeProperty("CustomTextColor")));
		xamlServiceProvider17.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle34 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver17 = new XmlNamespaceResolver();
		xmlNamespaceResolver17.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver17.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver17.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver17.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider17.Add(typeFromHandle34, new XamlTypeResolver(xmlNamespaceResolver17, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider17.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(23, 127)));
		object obj12 = ((IMarkupExtension)staticResourceExtension31).ProvideValue((IServiceProvider)xamlServiceProvider17);
		heightEditor.CustomTextColor = (Color)obj12;
		heightEditor.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(0.0, 0.0, 10.0, 0.0));
		stackLayout2.Children.Add(heightEditor);
		label6.SetValue(Label.TextProperty, "Select Height Units first");
		label6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label6.SetValue(Label.TextColorProperty, a8_PINK_X);
		label6.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout2.Children.Add(label6);
		label7.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Date of Birth");
		label7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label7.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label15 = label7;
		BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider18 = new XamlServiceProvider();
		Type typeFromHandle35 = typeof(IProvideValueTarget);
		object[] array18 = new object[0 + 4];
		array18[0] = label7;
		array18[1] = stackLayout2;
		array18[2] = scrollView;
		array18[3] = this;
		xamlServiceProvider18.Add(typeFromHandle35, new SimpleValueTargetProvider(array18, Label.FontSizeProperty));
		xamlServiceProvider18.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle36 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver18 = new XmlNamespaceResolver();
		xmlNamespaceResolver18.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver18.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver18.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver18.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider18.Add(typeFromHandle36, new XamlTypeResolver(xmlNamespaceResolver18, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider18.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(26, 100)));
		label15.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider18));
		staticResourceExtension13.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension32 = staticResourceExtension13;
		XamlServiceProvider xamlServiceProvider19 = new XamlServiceProvider();
		Type typeFromHandle37 = typeof(IProvideValueTarget);
		object[] array19 = new object[0 + 4];
		array19[0] = label7;
		array19[1] = stackLayout2;
		array19[2] = scrollView;
		array19[3] = this;
		xamlServiceProvider19.Add(typeFromHandle37, new SimpleValueTargetProvider(array19, Label.TextColorProperty));
		xamlServiceProvider19.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle38 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver19 = new XmlNamespaceResolver();
		xmlNamespaceResolver19.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver19.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver19.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver19.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider19.Add(typeFromHandle38, new XamlTypeResolver(xmlNamespaceResolver19, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider19.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(26, 114)));
		object obj13 = ((IMarkupExtension)staticResourceExtension32).ProvideValue((IServiceProvider)xamlServiceProvider19);
		label7.TextColor = (Color)obj13;
		label7.SetValue(View.MarginProperty, new Thickness(0.0, 15.0, 0.0, 0.0));
		stackLayout2.Children.Add(label7);
		dateOfBirthEditor.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension14.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension33 = staticResourceExtension14;
		XamlServiceProvider xamlServiceProvider20 = new XamlServiceProvider();
		Type typeFromHandle39 = typeof(IProvideValueTarget);
		object[] array20 = new object[0 + 4];
		array20[0] = dateOfBirthEditor;
		array20[1] = stackLayout2;
		array20[2] = scrollView;
		array20[3] = this;
		xamlServiceProvider20.Add(typeFromHandle39, new SimpleValueTargetProvider(array20, VisualElement.BackgroundColorProperty));
		xamlServiceProvider20.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle40 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver20 = new XmlNamespaceResolver();
		xmlNamespaceResolver20.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver20.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver20.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver20.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider20.Add(typeFromHandle40, new XamlTypeResolver(xmlNamespaceResolver20, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider20.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(27, 61)));
		object obj14 = ((IMarkupExtension)staticResourceExtension33).ProvideValue((IServiceProvider)xamlServiceProvider20);
		dateOfBirthEditor.BackgroundColor = (Color)obj14;
		staticResourceExtension15.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension34 = staticResourceExtension15;
		XamlServiceProvider xamlServiceProvider21 = new XamlServiceProvider();
		Type typeFromHandle41 = typeof(IProvideValueTarget);
		object[] array21 = new object[0 + 4];
		array21[0] = dateOfBirthEditor;
		array21[1] = stackLayout2;
		array21[2] = scrollView;
		array21[3] = this;
		xamlServiceProvider21.Add(typeFromHandle41, new SimpleValueTargetProvider(array21, DatePicker.TextColorProperty));
		xamlServiceProvider21.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle42 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver21 = new XmlNamespaceResolver();
		xmlNamespaceResolver21.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver21.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver21.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver21.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider21.Add(typeFromHandle42, new XamlTypeResolver(xmlNamespaceResolver21, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider21.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(27, 112)));
		object obj15 = ((IMarkupExtension)staticResourceExtension34).ProvideValue((IServiceProvider)xamlServiceProvider21);
		dateOfBirthEditor.TextColor = (Color)obj15;
		stackLayout2.Children.Add(dateOfBirthEditor);
		label8.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Gender");
		label8.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label8.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label16 = label8;
		BindableProperty fontSizeProperty7 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider22 = new XamlServiceProvider();
		Type typeFromHandle43 = typeof(IProvideValueTarget);
		object[] array22 = new object[0 + 4];
		array22[0] = label8;
		array22[1] = stackLayout2;
		array22[2] = scrollView;
		array22[3] = this;
		xamlServiceProvider22.Add(typeFromHandle43, new SimpleValueTargetProvider(array22, Label.FontSizeProperty));
		xamlServiceProvider22.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle44 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver22 = new XmlNamespaceResolver();
		xmlNamespaceResolver22.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver22.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver22.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver22.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider22.Add(typeFromHandle44, new XamlTypeResolver(xmlNamespaceResolver22, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider22.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(29, 93)));
		label16.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider22));
		staticResourceExtension16.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension35 = staticResourceExtension16;
		XamlServiceProvider xamlServiceProvider23 = new XamlServiceProvider();
		Type typeFromHandle45 = typeof(IProvideValueTarget);
		object[] array23 = new object[0 + 4];
		array23[0] = label8;
		array23[1] = stackLayout2;
		array23[2] = scrollView;
		array23[3] = this;
		xamlServiceProvider23.Add(typeFromHandle45, new SimpleValueTargetProvider(array23, Label.TextColorProperty));
		xamlServiceProvider23.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle46 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver23 = new XmlNamespaceResolver();
		xmlNamespaceResolver23.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver23.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver23.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver23.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider23.Add(typeFromHandle46, new XamlTypeResolver(xmlNamespaceResolver23, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider23.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(29, 107)));
		object obj16 = ((IMarkupExtension)staticResourceExtension35).ProvideValue((IServiceProvider)xamlServiceProvider23);
		label8.TextColor = (Color)obj16;
		label8.SetValue(View.MarginProperty, new Thickness(0.0, 15.0, 0.0, 0.0));
		stackLayout2.Children.Add(label8);
		genderEditor.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension17.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension36 = staticResourceExtension17;
		XamlServiceProvider xamlServiceProvider24 = new XamlServiceProvider();
		Type typeFromHandle47 = typeof(IProvideValueTarget);
		object[] array24 = new object[0 + 4];
		array24[0] = genderEditor;
		array24[1] = stackLayout2;
		array24[2] = scrollView;
		array24[3] = this;
		xamlServiceProvider24.Add(typeFromHandle47, new SimpleValueTargetProvider(array24, VisualElement.BackgroundColorProperty));
		xamlServiceProvider24.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle48 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver24 = new XmlNamespaceResolver();
		xmlNamespaceResolver24.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver24.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver24.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver24.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider24.Add(typeFromHandle48, new XamlTypeResolver(xmlNamespaceResolver24, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider24.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(30, 78)));
		object obj17 = ((IMarkupExtension)staticResourceExtension36).ProvideValue((IServiceProvider)xamlServiceProvider24);
		genderEditor.BackgroundColor = (Color)obj17;
		staticResourceExtension18.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension37 = staticResourceExtension18;
		XamlServiceProvider xamlServiceProvider25 = new XamlServiceProvider();
		Type typeFromHandle49 = typeof(IProvideValueTarget);
		object[] array25 = new object[0 + 4];
		array25[0] = genderEditor;
		array25[1] = stackLayout2;
		array25[2] = scrollView;
		array25[3] = this;
		xamlServiceProvider25.Add(typeFromHandle49, new SimpleValueTargetProvider(array25, Picker.TextColorProperty));
		xamlServiceProvider25.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle50 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver25 = new XmlNamespaceResolver();
		xmlNamespaceResolver25.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver25.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver25.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver25.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider25.Add(typeFromHandle50, new XamlTypeResolver(xmlNamespaceResolver25, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider25.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(30, 129)));
		object obj18 = ((IMarkupExtension)staticResourceExtension37).ProvideValue((IServiceProvider)xamlServiceProvider25);
		genderEditor.TextColor = (Color)obj18;
		genderEditor.SetValue(Picker.TitleProperty, "Select gender");
		stackLayout2.Children.Add(genderEditor);
		stackLayout.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout.SetValue(View.MarginProperty, new Thickness(0.0, 20.0, 0.0, 0.0));
		label9.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Skip this check in future (It can be re-enabled from the Settings page)");
		Label label17 = label9;
		BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider26 = new XamlServiceProvider();
		Type typeFromHandle51 = typeof(IProvideValueTarget);
		object[] array26 = new object[0 + 5];
		array26[0] = label9;
		array26[1] = stackLayout;
		array26[2] = stackLayout2;
		array26[3] = scrollView;
		array26[4] = this;
		xamlServiceProvider26.Add(typeFromHandle51, new SimpleValueTargetProvider(array26, Label.FontSizeProperty));
		xamlServiceProvider26.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle52 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver26 = new XmlNamespaceResolver();
		xmlNamespaceResolver26.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver26.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver26.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver26.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider26.Add(typeFromHandle52, new XamlTypeResolver(xmlNamespaceResolver26, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider26.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(33, 107)));
		label17.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider26));
		staticResourceExtension19.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension38 = staticResourceExtension19;
		XamlServiceProvider xamlServiceProvider27 = new XamlServiceProvider();
		Type typeFromHandle53 = typeof(IProvideValueTarget);
		object[] array27 = new object[0 + 5];
		array27[0] = label9;
		array27[1] = stackLayout;
		array27[2] = stackLayout2;
		array27[3] = scrollView;
		array27[4] = this;
		xamlServiceProvider27.Add(typeFromHandle53, new SimpleValueTargetProvider(array27, Label.TextColorProperty));
		xamlServiceProvider27.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle54 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver27 = new XmlNamespaceResolver();
		xmlNamespaceResolver27.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver27.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver27.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver27.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider27.Add(typeFromHandle54, new XamlTypeResolver(xmlNamespaceResolver27, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider27.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(33, 121)));
		object obj19 = ((IMarkupExtension)staticResourceExtension38).ProvideValue((IServiceProvider)xamlServiceProvider27);
		label9.TextColor = (Color)obj19;
		label9.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label9.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		stackLayout.Children.Add(label9);
		skipScalesChecksEditor.SetValue(View.HorizontalOptionsProperty, LayoutOptions.End);
		skipScalesChecksEditor.SetValue(View.MarginProperty, new Thickness(10.0, 0.0, 0.0, 0.0));
		stackLayout.Children.Add(skipScalesChecksEditor);
		stackLayout2.Children.Add(stackLayout);
		scrollView.Content = stackLayout2;
		Children.Add(scrollView);
		blueButton.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Next");
		BlueButton blueButton2 = blueButton;
		BindableProperty fontSizeProperty9 = Button.FontSizeProperty;
		FontSizeConverter fontSizeConverter9 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider28 = new XamlServiceProvider();
		Type typeFromHandle55 = typeof(IProvideValueTarget);
		object[] array28 = new object[0 + 2];
		array28[0] = blueButton;
		array28[1] = this;
		xamlServiceProvider28.Add(typeFromHandle55, new SimpleValueTargetProvider(array28, Button.FontSizeProperty));
		xamlServiceProvider28.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle56 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver28 = new XmlNamespaceResolver();
		xmlNamespaceResolver28.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver28.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver28.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver28.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider28.Add(typeFromHandle56, new XamlTypeResolver(xmlNamespaceResolver28, typeof(BluetoothScalesCheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider28.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(40, 60)));
		blueButton2.SetValue(fontSizeProperty9, ((IExtendedTypeConverter)fontSizeConverter9).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider28));
		blueButton.SetValue(Button.FontAttributesProperty, FontAttributes.Bold);
		Children.Add(blueButton);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BluetoothScalesCheckPage));
		weight_units_input = this.FindByName<WeightUnitsEditor>("weight_units_input");
		height_units_input = this.FindByName<HeightUnitsEditor>("height_units_input");
		height_input = this.FindByName<HeightEditor>("height_input");
		no_height_input = this.FindByName<Label>("no_height_input");
		gender_input = this.FindByName<GenderEditor>("gender_input");
		_next = this.FindByName<BlueButton>("_next");
	}
}

// Activ8rlives.BluetoothSmartScales
using Activ8rlives;
using Activ8rlivesBase;
using System;
using Xamarin.Forms;

public class BluetoothSmartScales : BluetoothStateMachine
{
	public ScalesState_Placement State_Placement;

	public ScalesState_Scan State_Scan;

	public ScalesState_Wait State_Wait;

	public ScalesState_Error State_Error;

	public ScalesState_Check State_Check;

	public ScalesState_BluetoothCheck State_BluetoothCheck;

	public const byte MAX_HEIGHT = byte.MaxValue;

	public const byte MIN_HEIGHT = 50;

	public const byte MAX_AGE = 120;

	public const byte MIN_AGE = 5;

	public static ServiceDescriptor svc1 = new ServiceDescriptor
	{
		Service = ScalesConstants.svc,
		Characteristics = new Guid[2]
		{
			ScalesConstants.read_char,
			ScalesConstants.write_char
		}
	};

	public DataModel DataModel
	{
		get;
		private set;
	}

	public int CurrentAge()
	{
		return DataModel.GetDateParameter("user-dateofbirth", DateTime.Now, -1L).AsAge();
	}

	public BluetoothSmartScales(IStateMachineDelegate d)
		: base(CommonApp.CurrentCommonApp.getThreadService(), CommonApp.CurrentCommonApp.getLogger(), CommonApp.CurrentCommonApp.getBluetoothManager(), "Smart Scales", d, lockout: true)
	{
		DataModel = CommonApp.CurrentCommonApp.getDataModel();
		State_Placement = new ScalesState_Placement(this);
		State_Scan = new ScalesState_Scan(this);
		State_Wait = new ScalesState_Wait(this);
		State_Error = new ScalesState_Error(this);
		State_Check = new ScalesState_Check(this);
		State_BluetoothCheck = new ScalesState_BluetoothCheck(this);
		base.State = State_BluetoothCheck;
	}

	public override void RunInForeground(Action a)
	{
		Device.BeginInvokeOnMainThread(a);
	}

	public void Ping()
	{
		byte[] array = new byte[8];
		int num = (int)DataModel.GetLatestNumericValueForType("Height", 0.0, -1L);
		ExtendedUnits extendedUnits = DataModel.WeightUnits(-1L);
		bool flag = DataModel.GetParameter("user-gender", "M", -1L) == "M";
		int num2 = CurrentAge();
		if (num2 > 120)
		{
			num2 = 120;
		}
		if (num2 < 5)
		{
		}
		if (num > 255)
		{
			num = 255;
		}
		if (num < 50)
		{
			num = 50;
		}
		byte b;
		switch (extendedUnits)
		{
		case ExtendedUnits.METRIC:
			b = 1;
			break;
		case ExtendedUnits.IMPERIAL:
			b = 2;
			break;
		default:
			b = 4;
			break;
		}
		array[0] = 254;
		array[1] = 1;
		array[2] = (byte)(flag ? 1 : 0);
		array[3] = 0;
		array[4] = (byte)num;
		array[5] = (byte)CurrentAge();
		array[6] = b;
		array[7] = 0;
		for (int i = 1; i < 7; i++)
		{
			array[7] ^= array[i];
		}
		Log("Util", "Sent Ping, p={0} g={1} h={2} a={3} u={4}", array[1], array[2], array[4], array[5], array[6]);
		base.Bluetooth.writeCharacteristic(ScalesConstants.write_char, array);
	}

	public bool ShouldUploadAnalysis()
	{
		if (!CommonApp.CurrentCommonApp.AllowBodyAnalysisforU16() && CurrentAge() < 16)
		{
			return false;
		}
		return true;
	}

	public void ScalesShutdown()
	{
		byte[] array = new byte[8]
		{
			253,
			53,
			0,
			0,
			0,
			0,
			0,
			0
		};
		for (int i = 1; i < 7; i++)
		{
			array[7] ^= array[i];
		}
		base.Bluetooth.writeCharacteristic(ScalesConstants.write_char, array);
	}
}

// Activ8rlives.BluetoothSmartScalesView
using Activ8rlives;
using System;
using System.Collections.Generic;
using Vernacular;

public class BluetoothSmartScalesView : StateMachineView
{
	private BluetoothSmartScales state_machine_;

	private Action<IList<string>, string> done_action_;

	public BluetoothSmartScalesView(Action<IList<string>, string> done_action)
	{
		state_machine_ = new BluetoothSmartScales(this);
		done_action_ = done_action;
		base.DefaultTitle = Catalog.GetString("Body Analyser");
	}

	public override void Done()
	{
		state_machine_.Shutdown();
		done_action_(new List<string>
		{
			"Weight",
			"Water",
			"Muscle",
			"Visc",
			"Fat",
			"Bone"
		}, "scales/body-analyser");
	}

	protected override void OnRemoved()
	{
		base.OnRemoved();
		state_machine_.Shutdown();
	}
}

// Activ8rlives.BluetoothThermometer
using Activ8rlives;
using Activ8rlivesBase;
using System;
using System.Collections.Generic;
using Vernacular;
using Xamarin.Forms;

public class BluetoothThermometer : BluetoothStateMachine
{
	public class ThermometerConstants
	{
		public static Guid svc = "fe18".AsGuid();

		public static Guid read_char = "fe10".AsGuid();

		public static Guid write_char = "fe11".AsGuid();

		public static ServiceDescriptor svc1 = new ServiceDescriptor
		{
			Service = svc,
			Characteristics = new Guid[2]
			{
				read_char,
				write_char
			}
		};
	}

	public abstract class States
	{
		public class BluetoothThermometerState : GenericBluetoothState<BluetoothThermometer>
		{
			public BluetoothThermometerState(BluetoothThermometer model, string name)
				: base(model, name)
			{
			}

			public override void OnBluetoothDeviceDisconnected()
			{
				base.OnBluetoothDeviceDisconnected();
				base.State = base.StateMachine.State_Error;
			}

			public void Ping()
			{
				byte[] array = new byte[7];
				bool flag = MetaData.BODY_TEMPERATURE.PreferredUnits() == ExtendedUnits.METRIC;
				array[0] = 245;
				array[1] = 17;
				array[2] = 2;
				array[3] = 0;
				array[4] = (byte)((!flag) ? 1 : 0);
				array[5] = (byte)(array[3] ^ array[4]);
				array[6] = byte.MaxValue;
				base.StateMachine.Bluetooth.writeCharacteristic(ThermometerConstants.write_char, array);
			}
		}

		public class BluetoothCheck : BluetoothCheckStatusState<BluetoothThermometer>
		{
			public BluetoothCheck(BluetoothThermometer model)
				: base(model, (string)null)
			{
			}

			public override void OnBluetoothRunning()
			{
				base.State = base.StateMachine.State_Setup;
			}
		}

		public class ThermometerState_Setup : BluetoothThermometerState
		{
			public ThermometerState_Setup(BluetoothThermometer model)
				: base(model, "Setup")
			{
				base.Button1Label = Catalog.GetString("Next");
				base.TopText = Catalog.GetString("Switch on the thermometer");
				base.BottomText = Catalog.GetString("Press any button on the thermometer to switch it on, then press next.");
				base.Image = "thermometer_01.png";
			}

			public override void StateStarted()
			{
				base.StateStarted();
				base.StateMachine.Bluetooth.resetToIdle();
			}

			public override void OnButton1()
			{
				if (string.IsNullOrEmpty(base.StateMachine.CurrentDevice))
				{
					base.State = base.StateMachine.State_Scan;
				}
				else
				{
					base.State = base.StateMachine.State_Find;
				}
			}
		}

		public class ThermometerState_Scan : BluetoothThermometerState
		{
			public ThermometerState_Scan(BluetoothThermometer model)
				: base(model, "Scan")
			{
				base.TopText = Catalog.GetString("Looking for a Thermometer");
				base.BottomText = "";
				base.Image = "";
				base.Content = new ThermometerDiscoverySlide(ThermometerSelected);
			}

			public override void StateStarted()
			{
				(base.Content as ThermometerDiscoverySlide).Clear();
				base.StateStarted();
				base.StateMachine.Bluetooth.startScanning();
			}

			public override void OnBluetoothDiscovered(Guid uuid, string name, Guid[] services, byte[] manufacturer, int rssi)
			{
				if (services.CheckForService(ThermometerConstants.svc1.Service) && name.StartsWith("JXB_TTM_", StringComparison.Ordinal))
				{
					Log("Found Thermometer: {0}", name);
					base.Image = null;
					(base.Content as ThermometerDiscoverySlide).AddThermometer(new DiscoveredThermometer
					{
						Identifier = name.Substring(8),
						Rssi = rssi,
						Guid = uuid
					});
				}
			}

			public void ThermometerSelected(DiscoveredThermometer device)
			{
				Log("Connecting");
				base.StateMachine.CurrentDevice = device.Identifier;
				base.StateMachine.Bluetooth.resetToIdle();
				base.StateMachine.Bluetooth.connectDevice(device.Guid, ThermometerConstants.svc1, null, null);
			}

			public override void OnBluetoothDeviceConnected()
			{
				base.StateMachine.Bluetooth.startNotifying(ThermometerConstants.read_char);
				base.State = base.StateMachine.State_Configure;
			}

			public override void OnBluetoothDeviceNotConnected()
			{
				base.StateMachine.Bluetooth.startScanning();
			}
		}

		public class ThermometerState_Find : BluetoothThermometerState
		{
			public ThermometerState_Find(BluetoothThermometer model)
				: base(model, "Scan")
			{
				base.TopText = Catalog.GetString("Connecting to your Thermometer");
				base.BottomText = Catalog.GetString("If you have a different Thermometer, press 'Change Meter'");
				base.Button1Label = Catalog.GetString("Change Meter");
				base.Image = "thermometer_02.png";
			}

			public override void StateStarted()
			{
				base.StateStarted();
				base.StateMachine.Bluetooth.startScanning();
			}

			public override void OnButton1()
			{
				base.StateMachine.Bluetooth.resetToIdle();
				base.StateMachine.CurrentDevice = string.Empty;
				base.State = base.StateMachine.State_Scan;
			}

			public override void OnBluetoothDiscovered(Guid uuid, string name, Guid[] services, byte[] manufacturer, int rssi)
			{
				if (services.CheckForService(ThermometerConstants.svc1.Service) && name.Equals("JXB_TTM_" + base.StateMachine.CurrentDevice))
				{
					Log("Found Thermometer: {0}", uuid);
					base.StateMachine.Bluetooth.resetToIdle();
					base.StateMachine.Bluetooth.connectDevice(uuid, ThermometerConstants.svc1, null, null);
				}
			}

			public override void OnBluetoothDeviceConnected()
			{
				base.StateMachine.Bluetooth.startNotifying(ThermometerConstants.read_char);
				base.State = base.StateMachine.State_Configure;
			}

			public override void OnBluetoothDeviceNotConnected()
			{
				base.StateMachine.Bluetooth.startScanning();
			}
		}

		public class ThermometerState_Configure : BluetoothThermometerState
		{
			public ThermometerState_Configure(BluetoothThermometer model)
				: base(model, "Configure")
			{
				base.TopText = Catalog.GetString("Setting up");
				base.BottomText = Catalog.GetString("Setting up your thermometer for body temperature");
				base.Image = "thermometer_02.png";
			}

			public override void StateStarted()
			{
				base.StateStarted();
				Ping();
			}

			public override void OnBluetoothDataSent(Guid uuid)
			{
				base.State = base.StateMachine.State_Wait;
			}
		}

		public class ThermometerState_Wait : BluetoothThermometerState
		{
			public ThermometerState_Wait(BluetoothThermometer model)
				: base(model, "Wait")
			{
				base.TopText = Catalog.GetString("Measure your temperature");
				base.Image = "thermometer_03.png";
			}

			public override void OnBluetoothDataReceived(Guid characteristic, byte[] data)
			{
				Log("Received {0} bytes data", data.Length);
				if (data.Length >= 9)
				{
					double num = data[7] + 256 * data[8];
					double num2 = data[5] + 256 * data[6];
					double num3 = data[3] + 256 * data[4];
					num /= 10.0;
					num2 /= 10.0;
					num3 /= 10.0;
					Log("Room={0} Surface={1} Body={2}", num, num3, num2);
					if (num2 < 32.0 || num2 > 45.0)
					{
						base.BottomText = Catalog.GetString("Value is out of range.  Please try again");
						return;
					}
					DateTime now = DateTime.Now;
					string source = "thermometer";
					base.StateMachine.DataModel.SetData(source, Guid.NewGuid(), now, now, null, new Dictionary<string, object>
					{
						{
							"Temperature",
							num2
						},
						{
							"Room Temperature",
							num
						}
					}, signal: true, null, -1L);
					Done();
				}
			}

			public override void StateStarted()
			{
				base.StateStarted();
				base.BottomText = Catalog.GetString("Place the thermometer against your temple and click the 'Scan' button");
			}

			public override void StateEnded()
			{
				base.StateEnded();
			}
		}

		public class ThermometerState_Error : BluetoothThermometerState
		{
			public ThermometerState_Error(BluetoothThermometer model)
				: base(model, "Error")
			{
				base.TopText = Catalog.GetString("Reading Error");
				base.BottomText = Catalog.GetString("Something went wrong.  Press Next to try again.");
				base.Button1Label = Catalog.GetString("Next");
				base.Image = "thermometer_01.png";
			}

			public override void StateStarted()
			{
				base.StateStarted();
				base.StateMachine.Bluetooth.resetToIdle();
			}

			public override void OnButton1()
			{
				base.State = base.StateMachine.State_Scan;
			}
		}
	}

	public States.BluetoothCheck State_BluetoothCheck;

	public States.ThermometerState_Setup State_Setup;

	public States.ThermometerState_Scan State_Scan;

	public States.ThermometerState_Find State_Find;

	public States.ThermometerState_Configure State_Configure;

	public States.ThermometerState_Wait State_Wait;

	public States.ThermometerState_Error State_Error;

	public string device_;

	public DataModel DataModel
	{
		get;
		private set;
	}

	public string CurrentDevice
	{
		get
		{
			return device_;
		}
		set
		{
			device_ = value;
			DataModel.SetLocalParameter("thermometer-device", device_, -1L);
		}
	}

	public override void RunInForeground(Action a)
	{
		Device.BeginInvokeOnMainThread(a);
	}

	public BluetoothThermometer(IStateMachineDelegate d)
		: base(CommonApp.CurrentCommonApp.getThreadService(), CommonApp.CurrentCommonApp.getLogger(), CommonApp.CurrentCommonApp.getBluetoothManager(), "Thermometer", d, lockout: true)
	{
		DataModel = CommonApp.CurrentCommonApp.getDataModel();
		device_ = DataModel.GetLocalParameter("thermometer-device", null, -1L);
		State_BluetoothCheck = new States.BluetoothCheck(this);
		State_Setup = new States.ThermometerState_Setup(this);
		State_Scan = new States.ThermometerState_Scan(this);
		State_Find = new States.ThermometerState_Find(this);
		State_Wait = new States.ThermometerState_Wait(this);
		State_Error = new States.ThermometerState_Error(this);
		State_Configure = new States.ThermometerState_Configure(this);
		base.State = State_BluetoothCheck;
	}
}

// Activ8rlives.BluetoothThermometerView
using Activ8rlives;
using System;
using System.Collections.Generic;
using Vernacular;

public class BluetoothThermometerView : StateMachineView
{
	private BluetoothThermometer state_machine_;

	private Action<IList<string>, string> done_action_;

	public BluetoothThermometerView(Action<IList<string>, string> done_action)
	{
		state_machine_ = new BluetoothThermometer(this);
		done_action_ = done_action;
		base.DefaultTitle = Catalog.GetString("Thermometer");
	}

	public override void Done()
	{
		state_machine_.Shutdown();
		done_action_(new List<string>
		{
			"Temperature",
			"Room Temperature"
		}, "thermometer");
	}

	protected override void OnRemoved()
	{
		base.OnRemoved();
		state_machine_.Shutdown();
	}
}

// Activ8rlives.BlutoothGlucose
using Activ8rlives;
using Activ8rlivesBase;
using System;
using Xamarin.Forms;

public class BlutoothGlucose : BluetoothStateMachine
{
	public GlucoseState_BluetoothCheck State_BluetoothCheck;

	public GlucoseState_Pair State_Pair;

	public GlucoseState_PairPrep State_PairPrep;

	public GlucoseState_Bond State_Bond;

	public GlucoseState_BondFail State_BondFail;

	public GlucoseState_WaitForMeasure State_WaitForMeasure;

	private Guid current_device_;

	public DataModel DataModel
	{
		get;
		private set;
	}

	public bool DeleteOnPair
	{
		get;
		set;
	}

	public Guid CurrentDevice
	{
		get
		{
			return current_device_;
		}
		set
		{
			current_device_ = value;
		}
	}

	public BlutoothGlucose(IStateMachineDelegate d)
		: base(CommonApp.CurrentCommonApp.getThreadService(), CommonApp.CurrentCommonApp.getLogger(), CommonApp.CurrentCommonApp.getBluetoothManager(), "Glucose", d, lockout: true)
	{
		DataModel = CommonApp.CurrentCommonApp.getDataModel();
		State_BluetoothCheck = new GlucoseState_BluetoothCheck(this);
		State_Pair = new GlucoseState_Pair(this);
		State_PairPrep = new GlucoseState_PairPrep(this);
		State_Bond = new GlucoseState_Bond(this);
		State_BondFail = new GlucoseState_BondFail(this);
		State_WaitForMeasure = new GlucoseState_WaitForMeasure(this);
		current_device_ = DataModel.GetObjectLocalParameter<Guid>("glucose-device", -1L);
	}

	public override void RunInForeground(Action a)
	{
		Device.BeginInvokeOnMainThread(a);
	}
}

// Activ8rlives.BoolLocalParameterEditor
using Activ8rlives;
using System;
using System.Collections.Generic;
using Xamarin.Forms;

public class BoolLocalParameterEditor : Switch, ILocalParamSubscriber
{
	private DataModel model_;

	private string param_name_;

	private bool refreshing_;

	private string on_value_;

	private string off_value_;

	private bool def_;

	public BoolLocalParameterEditor(string param_name, string on_value, string off_value, bool def)
	{
		model_ = CommonApp.CurrentCommonApp.getDataModel();
		param_name_ = param_name;
		on_value_ = on_value;
		off_value_ = off_value;
		def_ = def;
		MessageCenterUtils.LocalParamsUpdated(this);
		base.Toggled += Update;
		Refresh();
	}

	public void LocalParamsUpdated(ISet<string> names)
	{
		if (names == null || names.Contains(param_name_))
		{
			Refresh();
		}
	}

	private string GetSelectedValue()
	{
		if (!base.IsToggled)
		{
			return off_value_;
		}
		return on_value_;
	}

	private bool GetIndexFor(string value)
	{
		return on_value_.Equals(value);
	}

	private void Update(object sender, EventArgs args)
	{
		if (!refreshing_)
		{
			model_.SetLocalParameter(param_name_, GetSelectedValue(), -1L);
		}
	}

	private void Refresh()
	{
		refreshing_ = true;
		try
		{
			base.IsToggled = GetIndexFor(model_.GetLocalParameter(param_name_, def_ ? on_value_ : off_value_, -1L));
		}
		finally
		{
			refreshing_ = false;
		}
	}
}

// Activ8rlives.BoolParameterEditor
using Activ8rlives;
using System;
using System.Collections.Generic;
using Xamarin.Forms;

public class BoolParameterEditor : Switch, IParamSubscriber
{
	private DataModel model_;

	private string param_name_;

	private bool refreshing_;

	private string on_value_;

	private string off_value_;

	private bool def_;

	public BoolParameterEditor(string param_name, string on_value, string off_value, bool def)
	{
		model_ = CommonApp.CurrentCommonApp.getDataModel();
		param_name_ = param_name;
		on_value_ = on_value;
		off_value_ = off_value;
		def_ = def;
		MessageCenterUtils.ParamsUpdated(this);
		base.Toggled += Update;
		Refresh();
	}

	public void ParamsUpdated(ISet<string> names)
	{
		if (names == null || names.Contains(param_name_))
		{
			Refresh();
		}
	}

	private string GetSelectedValue()
	{
		if (!base.IsToggled)
		{
			return off_value_;
		}
		return on_value_;
	}

	private bool GetIndexFor(string value)
	{
		return on_value_.Equals(value);
	}

	private void Update(object sender, EventArgs args)
	{
		if (!refreshing_)
		{
			model_.SetParameter(param_name_, GetSelectedValue(), uploaded: false, -1L);
		}
	}

	private void Refresh()
	{
		refreshing_ = true;
		try
		{
			base.IsToggled = GetIndexFor(model_.GetParameter(param_name_, def_ ? on_value_ : off_value_, -1L));
		}
		finally
		{
			refreshing_ = false;
		}
	}
}

// Activ8rlives.BuddyBand2CheckPage
using Activ8rlives;
using System;
using System.CodeDom.Compiler;
using System.Reflection;
using System.Threading.Tasks;
using Vernacular.Xaml;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Devices/BuddyBand2/BuddyBand2CheckPage.xaml")]
public class BuddyBand2CheckPage : StackLayout
{
	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private WeightUnitsEditor weight_units_input;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private HeightUnitsEditor height_units_input;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private MetricEditor units_input;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private StrideLengthEditor stride_input;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label no_stride_input;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private WeightEditor weight_input;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label no_weight_input;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private HeightEditor height_input;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label no_height_input;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _next;

	public BuddyBand2CheckPage(IBuddyBand2CheckState state)
	{
		base.Resources = Theme.GetResourceDictionary();
		InitializeComponent();
		height_input.IsVisible = (height_units_input.SelectedIndex != -1);
		no_height_input.IsVisible = (height_units_input.SelectedIndex == -1);
		weight_input.IsVisible = (weight_units_input.SelectedIndex != -1);
		no_weight_input.IsVisible = (weight_units_input.SelectedIndex == -1);
		stride_input.IsVisible = (units_input.SelectedIndex != -1);
		no_stride_input.IsVisible = (units_input.SelectedIndex == -1);
		height_units_input.SelectedIndexChanged += HeightUnitsSet;
		weight_units_input.SelectedIndexChanged += WeightUnitsSet;
		units_input.SelectedIndexChanged += UnitsSet;
		_next.IsEnabled = NextEnabled();
		_next.Clicked += delegate
		{
			if (CommonApp.CurrentCommonApp.getDataModel().GetLatestNumericValueForType("Stride-length", -1.0, -1L) < 1.0)
			{
				CommonApp.CurrentCommonApp.DisplayAlert1(Catalog.GetString("Error: No Stride Length entered"), Catalog.GetString("We ask for your stride length so that we can convert the number of steps you take into the distance you have walked\n\nPlease ensure that the correct value is entered"), Catalog.GetString("OK"));
			}
			else
			{
				Unfocus();
				Task.Delay(500).ContinueWith(delegate
				{
					Device.BeginInvokeOnMainThread(delegate
					{
						state.OnNextButton();
					});
				});
			}
		};
	}

	public bool NextEnabled()
	{
		if (weight_units_input.SelectedIndex < 0 || height_units_input.SelectedIndex < 0 || units_input.SelectedIndex < 0)
		{
			return false;
		}
		return true;
	}

	private void HeightUnitsSet(object sender, EventArgs e)
	{
		height_input.IsVisible = (height_units_input.SelectedIndex != -1);
		no_height_input.IsVisible = (height_units_input.SelectedIndex == -1);
		_next.IsEnabled = NextEnabled();
	}

	private void WeightUnitsSet(object sender, EventArgs e)
	{
		weight_input.IsVisible = (weight_units_input.SelectedIndex != -1);
		no_weight_input.IsVisible = (weight_units_input.SelectedIndex == -1);
		_next.IsEnabled = NextEnabled();
	}

	private void UnitsSet(object sender, EventArgs e)
	{
		stride_input.IsVisible = (units_input.SelectedIndex != -1);
		no_stride_input.IsVisible = (units_input.SelectedIndex == -1);
		_next.IsEnabled = NextEnabled();
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly().GetName(), "Devices/BuddyBand2/BuddyBand2CheckPage.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		StaticResourceExtension staticResourceExtension = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension2 = new StaticResourceExtension();
		Label label = new Label();
		StaticResourceExtension staticResourceExtension3 = new StaticResourceExtension();
		Label label2 = new Label();
		StaticResourceExtension staticResourceExtension4 = new StaticResourceExtension();
		Label label3 = new Label();
		StaticResourceExtension staticResourceExtension5 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension6 = new StaticResourceExtension();
		WeightUnitsEditor weightUnitsEditor = new WeightUnitsEditor();
		StaticResourceExtension staticResourceExtension7 = new StaticResourceExtension();
		Label label4 = new Label();
		StaticResourceExtension staticResourceExtension8 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension9 = new StaticResourceExtension();
		HeightUnitsEditor heightUnitsEditor = new HeightUnitsEditor();
		StaticResourceExtension staticResourceExtension10 = new StaticResourceExtension();
		Label label5 = new Label();
		StaticResourceExtension staticResourceExtension11 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension12 = new StaticResourceExtension();
		MetricEditor metricEditor = new MetricEditor();
		StaticResourceExtension staticResourceExtension13 = new StaticResourceExtension();
		Label label6 = new Label();
		StaticResourceExtension staticResourceExtension14 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension15 = new StaticResourceExtension();
		StrideLengthEditor strideLengthEditor = new StrideLengthEditor();
		Color a8_PINK_X = Colors.A8_PINK_X;
		Label label7 = new Label();
		StaticResourceExtension staticResourceExtension16 = new StaticResourceExtension();
		Label label8 = new Label();
		StaticResourceExtension staticResourceExtension17 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension18 = new StaticResourceExtension();
		WeightEditor weightEditor = new WeightEditor();
		Color a8_PINK_X2 = Colors.A8_PINK_X;
		Label label9 = new Label();
		StaticResourceExtension staticResourceExtension19 = new StaticResourceExtension();
		Label label10 = new Label();
		StaticResourceExtension staticResourceExtension20 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension21 = new StaticResourceExtension();
		HeightEditor heightEditor = new HeightEditor();
		Color a8_PINK_X3 = Colors.A8_PINK_X;
		Label label11 = new Label();
		StackLayout stackLayout = new StackLayout();
		ScrollView scrollView = new ScrollView();
		BlueButton blueButton = new BlueButton();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(scrollView, nameScope);
		NameScope.SetNameScope(stackLayout, nameScope);
		NameScope.SetNameScope(label, nameScope);
		NameScope.SetNameScope(label2, nameScope);
		NameScope.SetNameScope(label3, nameScope);
		NameScope.SetNameScope(weightUnitsEditor, nameScope);
		((INameScope)nameScope).RegisterName("weight_units_input", (object)weightUnitsEditor);
		if (weightUnitsEditor.StyleId == null)
		{
			weightUnitsEditor.StyleId = "weight_units_input";
		}
		NameScope.SetNameScope(label4, nameScope);
		NameScope.SetNameScope(heightUnitsEditor, nameScope);
		((INameScope)nameScope).RegisterName("height_units_input", (object)heightUnitsEditor);
		if (heightUnitsEditor.StyleId == null)
		{
			heightUnitsEditor.StyleId = "height_units_input";
		}
		NameScope.SetNameScope(label5, nameScope);
		NameScope.SetNameScope(metricEditor, nameScope);
		((INameScope)nameScope).RegisterName("units_input", (object)metricEditor);
		if (metricEditor.StyleId == null)
		{
			metricEditor.StyleId = "units_input";
		}
		NameScope.SetNameScope(label6, nameScope);
		NameScope.SetNameScope(strideLengthEditor, nameScope);
		((INameScope)nameScope).RegisterName("stride_input", (object)strideLengthEditor);
		if (strideLengthEditor.StyleId == null)
		{
			strideLengthEditor.StyleId = "stride_input";
		}
		NameScope.SetNameScope(label7, nameScope);
		((INameScope)nameScope).RegisterName("no_stride_input", (object)label7);
		if (label7.StyleId == null)
		{
			label7.StyleId = "no_stride_input";
		}
		NameScope.SetNameScope(label8, nameScope);
		NameScope.SetNameScope(weightEditor, nameScope);
		((INameScope)nameScope).RegisterName("weight_input", (object)weightEditor);
		if (weightEditor.StyleId == null)
		{
			weightEditor.StyleId = "weight_input";
		}
		NameScope.SetNameScope(label9, nameScope);
		((INameScope)nameScope).RegisterName("no_weight_input", (object)label9);
		if (label9.StyleId == null)
		{
			label9.StyleId = "no_weight_input";
		}
		NameScope.SetNameScope(label10, nameScope);
		NameScope.SetNameScope(heightEditor, nameScope);
		((INameScope)nameScope).RegisterName("height_input", (object)heightEditor);
		if (heightEditor.StyleId == null)
		{
			heightEditor.StyleId = "height_input";
		}
		NameScope.SetNameScope(label11, nameScope);
		((INameScope)nameScope).RegisterName("no_height_input", (object)label11);
		if (label11.StyleId == null)
		{
			label11.StyleId = "no_height_input";
		}
		NameScope.SetNameScope(blueButton, nameScope);
		((INameScope)nameScope).RegisterName("_next", (object)blueButton);
		if (blueButton.StyleId == null)
		{
			blueButton.StyleId = "_next";
		}
		weight_units_input = weightUnitsEditor;
		height_units_input = heightUnitsEditor;
		units_input = metricEditor;
		stride_input = strideLengthEditor;
		no_stride_input = label7;
		weight_input = weightEditor;
		no_weight_input = label9;
		height_input = heightEditor;
		no_height_input = label11;
		_next = blueButton;
		SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0, 10.0, 10.0, 10.0));
		staticResourceExtension.Key = "PageBGColor";
		StaticResourceExtension staticResourceExtension22 = staticResourceExtension;
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 1];
		array[0] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, VisualElement.BackgroundColorProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(8, 9)));
		object obj = ((IMarkupExtension)staticResourceExtension22).ProvideValue((IServiceProvider)xamlServiceProvider);
		BackgroundColor = (Color)obj;
		scrollView.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		scrollView.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
		label.SetValue(Catalog.MessageProperty, "Check Settings");
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label12 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 4];
		array2[0] = label;
		array2[1] = stackLayout;
		array2[2] = scrollView;
		array2[3] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.FontSizeProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(12, 101)));
		label12.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider2));
		staticResourceExtension2.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension23 = staticResourceExtension2;
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 4];
		array3[0] = label;
		array3[1] = stackLayout;
		array3[2] = scrollView;
		array3[3] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, Label.TextColorProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(12, 115)));
		object obj2 = ((IMarkupExtension)staticResourceExtension23).ProvideValue((IServiceProvider)xamlServiceProvider3);
		label.TextColor = (Color)obj2;
		label.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		stackLayout.Children.Add(label);
		label2.SetValue(Catalog.MessageProperty, "To work properly, the BuddyBand needs your Stride Length, Height and Weight. Please make sure they are correct.");
		Label label13 = label2;
		BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
		Type typeFromHandle7 = typeof(IProvideValueTarget);
		object[] array4 = new object[0 + 4];
		array4[0] = label2;
		array4[1] = stackLayout;
		array4[2] = scrollView;
		array4[3] = this;
		xamlServiceProvider4.Add(typeFromHandle7, new SimpleValueTargetProvider(array4, Label.FontSizeProperty));
		xamlServiceProvider4.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle8 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
		xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver4.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver4.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(14, 147)));
		label13.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider4));
		staticResourceExtension3.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension24 = staticResourceExtension3;
		XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
		Type typeFromHandle9 = typeof(IProvideValueTarget);
		object[] array5 = new object[0 + 4];
		array5[0] = label2;
		array5[1] = stackLayout;
		array5[2] = scrollView;
		array5[3] = this;
		xamlServiceProvider5.Add(typeFromHandle9, new SimpleValueTargetProvider(array5, Label.TextColorProperty));
		xamlServiceProvider5.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle10 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
		xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver5.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver5.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(14, 161)));
		object obj3 = ((IMarkupExtension)staticResourceExtension24).ProvideValue((IServiceProvider)xamlServiceProvider5);
		label2.TextColor = (Color)obj3;
		stackLayout.Children.Add(label2);
		label3.SetValue(Catalog.MessageProperty, "Weight Units");
		label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label14 = label3;
		BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
		Type typeFromHandle11 = typeof(IProvideValueTarget);
		object[] array6 = new object[0 + 4];
		array6[0] = label3;
		array6[1] = stackLayout;
		array6[2] = scrollView;
		array6[3] = this;
		xamlServiceProvider6.Add(typeFromHandle11, new SimpleValueTargetProvider(array6, Label.FontSizeProperty));
		xamlServiceProvider6.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle12 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
		xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver6.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver6.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(16, 99)));
		label14.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider6));
		staticResourceExtension4.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension25 = staticResourceExtension4;
		XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
		Type typeFromHandle13 = typeof(IProvideValueTarget);
		object[] array7 = new object[0 + 4];
		array7[0] = label3;
		array7[1] = stackLayout;
		array7[2] = scrollView;
		array7[3] = this;
		xamlServiceProvider7.Add(typeFromHandle13, new SimpleValueTargetProvider(array7, Label.TextColorProperty));
		xamlServiceProvider7.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle14 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
		xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver7.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver7.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(16, 113)));
		object obj4 = ((IMarkupExtension)staticResourceExtension25).ProvideValue((IServiceProvider)xamlServiceProvider7);
		label3.TextColor = (Color)obj4;
		label3.SetValue(View.MarginProperty, new Thickness(0.0, 15.0, 0.0, 0.0));
		stackLayout.Children.Add(label3);
		weightUnitsEditor.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension5.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension26 = staticResourceExtension5;
		XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
		Type typeFromHandle15 = typeof(IProvideValueTarget);
		object[] array8 = new object[0 + 4];
		array8[0] = weightUnitsEditor;
		array8[1] = stackLayout;
		array8[2] = scrollView;
		array8[3] = this;
		xamlServiceProvider8.Add(typeFromHandle15, new SimpleValueTargetProvider(array8, VisualElement.BackgroundColorProperty));
		xamlServiceProvider8.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle16 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
		xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver8.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver8.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(17, 89)));
		object obj5 = ((IMarkupExtension)staticResourceExtension26).ProvideValue((IServiceProvider)xamlServiceProvider8);
		weightUnitsEditor.BackgroundColor = (Color)obj5;
		staticResourceExtension6.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension27 = staticResourceExtension6;
		XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
		Type typeFromHandle17 = typeof(IProvideValueTarget);
		object[] array9 = new object[0 + 4];
		array9[0] = weightUnitsEditor;
		array9[1] = stackLayout;
		array9[2] = scrollView;
		array9[3] = this;
		xamlServiceProvider9.Add(typeFromHandle17, new SimpleValueTargetProvider(array9, Picker.TextColorProperty));
		xamlServiceProvider9.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle18 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
		xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver9.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver9.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(17, 140)));
		object obj6 = ((IMarkupExtension)staticResourceExtension27).ProvideValue((IServiceProvider)xamlServiceProvider9);
		weightUnitsEditor.TextColor = (Color)obj6;
		weightUnitsEditor.SetValue(Picker.TitleProperty, "Select units");
		stackLayout.Children.Add(weightUnitsEditor);
		label4.SetValue(Catalog.MessageProperty, "Height Units");
		label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label15 = label4;
		BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
		Type typeFromHandle19 = typeof(IProvideValueTarget);
		object[] array10 = new object[0 + 4];
		array10[0] = label4;
		array10[1] = stackLayout;
		array10[2] = scrollView;
		array10[3] = this;
		xamlServiceProvider10.Add(typeFromHandle19, new SimpleValueTargetProvider(array10, Label.FontSizeProperty));
		xamlServiceProvider10.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle20 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
		xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver10.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver10.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(19, 99)));
		label15.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider10));
		staticResourceExtension7.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension28 = staticResourceExtension7;
		XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
		Type typeFromHandle21 = typeof(IProvideValueTarget);
		object[] array11 = new object[0 + 4];
		array11[0] = label4;
		array11[1] = stackLayout;
		array11[2] = scrollView;
		array11[3] = this;
		xamlServiceProvider11.Add(typeFromHandle21, new SimpleValueTargetProvider(array11, Label.TextColorProperty));
		xamlServiceProvider11.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle22 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
		xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver11.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver11.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(19, 113)));
		object obj7 = ((IMarkupExtension)staticResourceExtension28).ProvideValue((IServiceProvider)xamlServiceProvider11);
		label4.TextColor = (Color)obj7;
		label4.SetValue(View.MarginProperty, new Thickness(0.0, 15.0, 0.0, 0.0));
		stackLayout.Children.Add(label4);
		heightUnitsEditor.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension8.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension29 = staticResourceExtension8;
		XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
		Type typeFromHandle23 = typeof(IProvideValueTarget);
		object[] array12 = new object[0 + 4];
		array12[0] = heightUnitsEditor;
		array12[1] = stackLayout;
		array12[2] = scrollView;
		array12[3] = this;
		xamlServiceProvider12.Add(typeFromHandle23, new SimpleValueTargetProvider(array12, VisualElement.BackgroundColorProperty));
		xamlServiceProvider12.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle24 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
		xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver12.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver12.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(20, 89)));
		object obj8 = ((IMarkupExtension)staticResourceExtension29).ProvideValue((IServiceProvider)xamlServiceProvider12);
		heightUnitsEditor.BackgroundColor = (Color)obj8;
		staticResourceExtension9.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension30 = staticResourceExtension9;
		XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
		Type typeFromHandle25 = typeof(IProvideValueTarget);
		object[] array13 = new object[0 + 4];
		array13[0] = heightUnitsEditor;
		array13[1] = stackLayout;
		array13[2] = scrollView;
		array13[3] = this;
		xamlServiceProvider13.Add(typeFromHandle25, new SimpleValueTargetProvider(array13, Picker.TextColorProperty));
		xamlServiceProvider13.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle26 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
		xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver13.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver13.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(20, 140)));
		object obj9 = ((IMarkupExtension)staticResourceExtension30).ProvideValue((IServiceProvider)xamlServiceProvider13);
		heightUnitsEditor.TextColor = (Color)obj9;
		heightUnitsEditor.SetValue(Picker.TitleProperty, "Select units");
		stackLayout.Children.Add(heightUnitsEditor);
		label5.SetValue(Catalog.MessageProperty, "Units");
		label5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label16 = label5;
		BindableProperty fontSizeProperty5 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
		Type typeFromHandle27 = typeof(IProvideValueTarget);
		object[] array14 = new object[0 + 4];
		array14[0] = label5;
		array14[1] = stackLayout;
		array14[2] = scrollView;
		array14[3] = this;
		xamlServiceProvider14.Add(typeFromHandle27, new SimpleValueTargetProvider(array14, Label.FontSizeProperty));
		xamlServiceProvider14.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle28 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
		xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver14.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver14.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(22, 92)));
		label16.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider14));
		staticResourceExtension10.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension31 = staticResourceExtension10;
		XamlServiceProvider xamlServiceProvider15 = new XamlServiceProvider();
		Type typeFromHandle29 = typeof(IProvideValueTarget);
		object[] array15 = new object[0 + 4];
		array15[0] = label5;
		array15[1] = stackLayout;
		array15[2] = scrollView;
		array15[3] = this;
		xamlServiceProvider15.Add(typeFromHandle29, new SimpleValueTargetProvider(array15, Label.TextColorProperty));
		xamlServiceProvider15.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle30 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver15 = new XmlNamespaceResolver();
		xmlNamespaceResolver15.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver15.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver15.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver15.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider15.Add(typeFromHandle30, new XamlTypeResolver(xmlNamespaceResolver15, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider15.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(22, 106)));
		object obj10 = ((IMarkupExtension)staticResourceExtension31).ProvideValue((IServiceProvider)xamlServiceProvider15);
		label5.TextColor = (Color)obj10;
		label5.SetValue(View.MarginProperty, new Thickness(0.0, 15.0, 0.0, 0.0));
		stackLayout.Children.Add(label5);
		metricEditor.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension11.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension32 = staticResourceExtension11;
		XamlServiceProvider xamlServiceProvider16 = new XamlServiceProvider();
		Type typeFromHandle31 = typeof(IProvideValueTarget);
		object[] array16 = new object[0 + 4];
		array16[0] = metricEditor;
		array16[1] = stackLayout;
		array16[2] = scrollView;
		array16[3] = this;
		xamlServiceProvider16.Add(typeFromHandle31, new SimpleValueTargetProvider(array16, VisualElement.BackgroundColorProperty));
		xamlServiceProvider16.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle32 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver16 = new XmlNamespaceResolver();
		xmlNamespaceResolver16.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver16.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver16.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver16.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider16.Add(typeFromHandle32, new XamlTypeResolver(xmlNamespaceResolver16, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider16.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(23, 77)));
		object obj11 = ((IMarkupExtension)staticResourceExtension32).ProvideValue((IServiceProvider)xamlServiceProvider16);
		metricEditor.BackgroundColor = (Color)obj11;
		staticResourceExtension12.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension33 = staticResourceExtension12;
		XamlServiceProvider xamlServiceProvider17 = new XamlServiceProvider();
		Type typeFromHandle33 = typeof(IProvideValueTarget);
		object[] array17 = new object[0 + 4];
		array17[0] = metricEditor;
		array17[1] = stackLayout;
		array17[2] = scrollView;
		array17[3] = this;
		xamlServiceProvider17.Add(typeFromHandle33, new SimpleValueTargetProvider(array17, Picker.TextColorProperty));
		xamlServiceProvider17.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle34 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver17 = new XmlNamespaceResolver();
		xmlNamespaceResolver17.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver17.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver17.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver17.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider17.Add(typeFromHandle34, new XamlTypeResolver(xmlNamespaceResolver17, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider17.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(23, 128)));
		object obj12 = ((IMarkupExtension)staticResourceExtension33).ProvideValue((IServiceProvider)xamlServiceProvider17);
		metricEditor.TextColor = (Color)obj12;
		metricEditor.SetValue(Picker.TitleProperty, "Select units");
		stackLayout.Children.Add(metricEditor);
		label6.SetValue(Catalog.MessageProperty, "Stride Length");
		label6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label6.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label17 = label6;
		BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider18 = new XamlServiceProvider();
		Type typeFromHandle35 = typeof(IProvideValueTarget);
		object[] array18 = new object[0 + 4];
		array18[0] = label6;
		array18[1] = stackLayout;
		array18[2] = scrollView;
		array18[3] = this;
		xamlServiceProvider18.Add(typeFromHandle35, new SimpleValueTargetProvider(array18, Label.FontSizeProperty));
		xamlServiceProvider18.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle36 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver18 = new XmlNamespaceResolver();
		xmlNamespaceResolver18.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver18.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver18.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver18.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider18.Add(typeFromHandle36, new XamlTypeResolver(xmlNamespaceResolver18, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider18.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(25, 100)));
		label17.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider18));
		staticResourceExtension13.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension34 = staticResourceExtension13;
		XamlServiceProvider xamlServiceProvider19 = new XamlServiceProvider();
		Type typeFromHandle37 = typeof(IProvideValueTarget);
		object[] array19 = new object[0 + 4];
		array19[0] = label6;
		array19[1] = stackLayout;
		array19[2] = scrollView;
		array19[3] = this;
		xamlServiceProvider19.Add(typeFromHandle37, new SimpleValueTargetProvider(array19, Label.TextColorProperty));
		xamlServiceProvider19.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle38 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver19 = new XmlNamespaceResolver();
		xmlNamespaceResolver19.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver19.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver19.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver19.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider19.Add(typeFromHandle38, new XamlTypeResolver(xmlNamespaceResolver19, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider19.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(25, 114)));
		object obj13 = ((IMarkupExtension)staticResourceExtension34).ProvideValue((IServiceProvider)xamlServiceProvider19);
		label6.TextColor = (Color)obj13;
		label6.SetValue(View.MarginProperty, new Thickness(0.0, 15.0, 0.0, 0.0));
		stackLayout.Children.Add(label6);
		strideLengthEditor.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension14.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension35 = staticResourceExtension14;
		XamlServiceProvider xamlServiceProvider20 = new XamlServiceProvider();
		Type typeFromHandle39 = typeof(IProvideValueTarget);
		object[] array20 = new object[0 + 4];
		array20[0] = strideLengthEditor;
		array20[1] = stackLayout;
		array20[2] = scrollView;
		array20[3] = this;
		xamlServiceProvider20.Add(typeFromHandle39, new SimpleValueTargetProvider(array20, typeof(DoubleUnitEditor).GetRuntimeProperty("CustomBGColor")));
		xamlServiceProvider20.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle40 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver20 = new XmlNamespaceResolver();
		xmlNamespaceResolver20.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver20.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver20.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver20.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider20.Add(typeFromHandle40, new XamlTypeResolver(xmlNamespaceResolver20, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider20.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(26, 84)));
		object obj14 = ((IMarkupExtension)staticResourceExtension35).ProvideValue((IServiceProvider)xamlServiceProvider20);
		strideLengthEditor.CustomBGColor = (Color)obj14;
		staticResourceExtension15.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension36 = staticResourceExtension15;
		XamlServiceProvider xamlServiceProvider21 = new XamlServiceProvider();
		Type typeFromHandle41 = typeof(IProvideValueTarget);
		object[] array21 = new object[0 + 4];
		array21[0] = strideLengthEditor;
		array21[1] = stackLayout;
		array21[2] = scrollView;
		array21[3] = this;
		xamlServiceProvider21.Add(typeFromHandle41, new SimpleValueTargetProvider(array21, typeof(DoubleUnitEditor).GetRuntimeProperty("CustomTextColor")));
		xamlServiceProvider21.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle42 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver21 = new XmlNamespaceResolver();
		xmlNamespaceResolver21.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver21.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver21.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver21.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider21.Add(typeFromHandle42, new XamlTypeResolver(xmlNamespaceResolver21, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider21.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(26, 133)));
		object obj15 = ((IMarkupExtension)staticResourceExtension36).ProvideValue((IServiceProvider)xamlServiceProvider21);
		strideLengthEditor.CustomTextColor = (Color)obj15;
		stackLayout.Children.Add(strideLengthEditor);
		label7.SetValue(Label.TextProperty, "Select Units first");
		label7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label7.SetValue(Label.TextColorProperty, a8_PINK_X);
		label7.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout.Children.Add(label7);
		label8.SetValue(Catalog.MessageProperty, "Weight");
		label8.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label8.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label18 = label8;
		BindableProperty fontSizeProperty7 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider22 = new XamlServiceProvider();
		Type typeFromHandle43 = typeof(IProvideValueTarget);
		object[] array22 = new object[0 + 4];
		array22[0] = label8;
		array22[1] = stackLayout;
		array22[2] = scrollView;
		array22[3] = this;
		xamlServiceProvider22.Add(typeFromHandle43, new SimpleValueTargetProvider(array22, Label.FontSizeProperty));
		xamlServiceProvider22.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle44 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver22 = new XmlNamespaceResolver();
		xmlNamespaceResolver22.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver22.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver22.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver22.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider22.Add(typeFromHandle44, new XamlTypeResolver(xmlNamespaceResolver22, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider22.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(29, 93)));
		label18.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider22));
		staticResourceExtension16.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension37 = staticResourceExtension16;
		XamlServiceProvider xamlServiceProvider23 = new XamlServiceProvider();
		Type typeFromHandle45 = typeof(IProvideValueTarget);
		object[] array23 = new object[0 + 4];
		array23[0] = label8;
		array23[1] = stackLayout;
		array23[2] = scrollView;
		array23[3] = this;
		xamlServiceProvider23.Add(typeFromHandle45, new SimpleValueTargetProvider(array23, Label.TextColorProperty));
		xamlServiceProvider23.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle46 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver23 = new XmlNamespaceResolver();
		xmlNamespaceResolver23.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver23.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver23.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver23.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider23.Add(typeFromHandle46, new XamlTypeResolver(xmlNamespaceResolver23, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider23.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(29, 107)));
		object obj16 = ((IMarkupExtension)staticResourceExtension37).ProvideValue((IServiceProvider)xamlServiceProvider23);
		label8.TextColor = (Color)obj16;
		label8.SetValue(View.MarginProperty, new Thickness(0.0, 15.0, 0.0, 0.0));
		stackLayout.Children.Add(label8);
		weightEditor.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension17.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension38 = staticResourceExtension17;
		XamlServiceProvider xamlServiceProvider24 = new XamlServiceProvider();
		Type typeFromHandle47 = typeof(IProvideValueTarget);
		object[] array24 = new object[0 + 4];
		array24[0] = weightEditor;
		array24[1] = stackLayout;
		array24[2] = scrollView;
		array24[3] = this;
		xamlServiceProvider24.Add(typeFromHandle47, new SimpleValueTargetProvider(array24, typeof(DoubleUnitEditor).GetRuntimeProperty("CustomBGColor")));
		xamlServiceProvider24.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle48 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver24 = new XmlNamespaceResolver();
		xmlNamespaceResolver24.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver24.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver24.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver24.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider24.Add(typeFromHandle48, new XamlTypeResolver(xmlNamespaceResolver24, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider24.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(30, 78)));
		object obj17 = ((IMarkupExtension)staticResourceExtension38).ProvideValue((IServiceProvider)xamlServiceProvider24);
		weightEditor.CustomBGColor = (Color)obj17;
		staticResourceExtension18.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension39 = staticResourceExtension18;
		XamlServiceProvider xamlServiceProvider25 = new XamlServiceProvider();
		Type typeFromHandle49 = typeof(IProvideValueTarget);
		object[] array25 = new object[0 + 4];
		array25[0] = weightEditor;
		array25[1] = stackLayout;
		array25[2] = scrollView;
		array25[3] = this;
		xamlServiceProvider25.Add(typeFromHandle49, new SimpleValueTargetProvider(array25, typeof(DoubleUnitEditor).GetRuntimeProperty("CustomTextColor")));
		xamlServiceProvider25.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle50 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver25 = new XmlNamespaceResolver();
		xmlNamespaceResolver25.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver25.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver25.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver25.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider25.Add(typeFromHandle50, new XamlTypeResolver(xmlNamespaceResolver25, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider25.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(30, 127)));
		object obj18 = ((IMarkupExtension)staticResourceExtension39).ProvideValue((IServiceProvider)xamlServiceProvider25);
		weightEditor.CustomTextColor = (Color)obj18;
		stackLayout.Children.Add(weightEditor);
		label9.SetValue(Label.TextProperty, "Select Weight Units first");
		label9.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label9.SetValue(Label.TextColorProperty, a8_PINK_X2);
		label9.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout.Children.Add(label9);
		label10.SetValue(Catalog.MessageProperty, "Height");
		label10.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label10.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label19 = label10;
		BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider26 = new XamlServiceProvider();
		Type typeFromHandle51 = typeof(IProvideValueTarget);
		object[] array26 = new object[0 + 4];
		array26[0] = label10;
		array26[1] = stackLayout;
		array26[2] = scrollView;
		array26[3] = this;
		xamlServiceProvider26.Add(typeFromHandle51, new SimpleValueTargetProvider(array26, Label.FontSizeProperty));
		xamlServiceProvider26.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle52 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver26 = new XmlNamespaceResolver();
		xmlNamespaceResolver26.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver26.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver26.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver26.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider26.Add(typeFromHandle52, new XamlTypeResolver(xmlNamespaceResolver26, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider26.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(33, 93)));
		label19.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider26));
		staticResourceExtension19.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension40 = staticResourceExtension19;
		XamlServiceProvider xamlServiceProvider27 = new XamlServiceProvider();
		Type typeFromHandle53 = typeof(IProvideValueTarget);
		object[] array27 = new object[0 + 4];
		array27[0] = label10;
		array27[1] = stackLayout;
		array27[2] = scrollView;
		array27[3] = this;
		xamlServiceProvider27.Add(typeFromHandle53, new SimpleValueTargetProvider(array27, Label.TextColorProperty));
		xamlServiceProvider27.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle54 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver27 = new XmlNamespaceResolver();
		xmlNamespaceResolver27.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver27.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver27.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver27.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider27.Add(typeFromHandle54, new XamlTypeResolver(xmlNamespaceResolver27, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider27.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(33, 107)));
		object obj19 = ((IMarkupExtension)staticResourceExtension40).ProvideValue((IServiceProvider)xamlServiceProvider27);
		label10.TextColor = (Color)obj19;
		label10.SetValue(View.MarginProperty, new Thickness(0.0, 15.0, 0.0, 0.0));
		stackLayout.Children.Add(label10);
		heightEditor.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension20.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension41 = staticResourceExtension20;
		XamlServiceProvider xamlServiceProvider28 = new XamlServiceProvider();
		Type typeFromHandle55 = typeof(IProvideValueTarget);
		object[] array28 = new object[0 + 4];
		array28[0] = heightEditor;
		array28[1] = stackLayout;
		array28[2] = scrollView;
		array28[3] = this;
		xamlServiceProvider28.Add(typeFromHandle55, new SimpleValueTargetProvider(array28, typeof(DoubleUnitEditor).GetRuntimeProperty("CustomBGColor")));
		xamlServiceProvider28.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle56 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver28 = new XmlNamespaceResolver();
		xmlNamespaceResolver28.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver28.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver28.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver28.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider28.Add(typeFromHandle56, new XamlTypeResolver(xmlNamespaceResolver28, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider28.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(34, 78)));
		object obj20 = ((IMarkupExtension)staticResourceExtension41).ProvideValue((IServiceProvider)xamlServiceProvider28);
		heightEditor.CustomBGColor = (Color)obj20;
		staticResourceExtension21.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension42 = staticResourceExtension21;
		XamlServiceProvider xamlServiceProvider29 = new XamlServiceProvider();
		Type typeFromHandle57 = typeof(IProvideValueTarget);
		object[] array29 = new object[0 + 4];
		array29[0] = heightEditor;
		array29[1] = stackLayout;
		array29[2] = scrollView;
		array29[3] = this;
		xamlServiceProvider29.Add(typeFromHandle57, new SimpleValueTargetProvider(array29, typeof(DoubleUnitEditor).GetRuntimeProperty("CustomTextColor")));
		xamlServiceProvider29.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle58 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver29 = new XmlNamespaceResolver();
		xmlNamespaceResolver29.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver29.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver29.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver29.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider29.Add(typeFromHandle58, new XamlTypeResolver(xmlNamespaceResolver29, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider29.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(34, 127)));
		object obj21 = ((IMarkupExtension)staticResourceExtension42).ProvideValue((IServiceProvider)xamlServiceProvider29);
		heightEditor.CustomTextColor = (Color)obj21;
		stackLayout.Children.Add(heightEditor);
		label11.SetValue(Label.TextProperty, "Select Height Units first");
		label11.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label11.SetValue(Label.TextColorProperty, a8_PINK_X3);
		label11.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		stackLayout.Children.Add(label11);
		scrollView.Content = stackLayout;
		Children.Add(scrollView);
		blueButton.SetValue(Catalog.MessageProperty, "Next");
		BlueButton blueButton2 = blueButton;
		BindableProperty fontSizeProperty9 = Button.FontSizeProperty;
		FontSizeConverter fontSizeConverter9 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider30 = new XamlServiceProvider();
		Type typeFromHandle59 = typeof(IProvideValueTarget);
		object[] array30 = new object[0 + 2];
		array30[0] = blueButton;
		array30[1] = this;
		xamlServiceProvider30.Add(typeFromHandle59, new SimpleValueTargetProvider(array30, Button.FontSizeProperty));
		xamlServiceProvider30.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle60 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver30 = new XmlNamespaceResolver();
		xmlNamespaceResolver30.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver30.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver30.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver30.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider30.Add(typeFromHandle60, new XamlTypeResolver(xmlNamespaceResolver30, typeof(BuddyBand2CheckPage).GetTypeInfo().get_Assembly()));
		xamlServiceProvider30.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(40, 60)));
		blueButton2.SetValue(fontSizeProperty9, ((IExtendedTypeConverter)fontSizeConverter9).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider30));
		Children.Add(blueButton);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BuddyBand2CheckPage));
		weight_units_input = this.FindByName<WeightUnitsEditor>("weight_units_input");
		height_units_input = this.FindByName<HeightUnitsEditor>("height_units_input");
		units_input = this.FindByName<MetricEditor>("units_input");
		stride_input = this.FindByName<StrideLengthEditor>("stride_input");
		no_stride_input = this.FindByName<Label>("no_stride_input");
		weight_input = this.FindByName<WeightEditor>("weight_input");
		no_weight_input = this.FindByName<Label>("no_weight_input");
		height_input = this.FindByName<HeightEditor>("height_input");
		no_height_input = this.FindByName<Label>("no_height_input");
		_next = this.FindByName<BlueButton>("_next");
	}
}

// Activ8rlives.BuddyBand2Comms
using Activ8rlives;
using Activ8rlivesBase;
using NGraphics;
using Vernacular;

public class BuddyBand2Comms
{
	public static string deviceName(FirmwareDeviceType type)
	{
		switch (type)
		{
		case FirmwareDeviceType.BUDDYBAND2:
			return Catalog.GetString("BuddyBand2", "Display name of device");
		case FirmwareDeviceType.PUFFCLICKER:
			return Catalog.GetString("PUFFClicker", "Display name of device");
		default:
			return Catalog.GetString("Unknown Device");
		}
	}

	public static string deviceIcon(FirmwareDeviceType type)
	{
		switch (type)
		{
		case FirmwareDeviceType.BUDDYBAND2:
			return "device_icon_bb2.png";
		case FirmwareDeviceType.PUFFCLICKER:
			return "device_icon_puffclicker.png";
		default:
			return null;
		}
	}

	public static bool connectedForState(BuddyBand2PublicState state)
	{
		switch (state)
		{
		case BuddyBand2PublicState.CONFIGURING:
			return true;
		case BuddyBand2PublicState.CONNECTING:
			return false;
		case BuddyBand2PublicState.NOT_CONNECTED:
			return false;
		case BuddyBand2PublicState.SYNCHRONISING:
			return true;
		case BuddyBand2PublicState.TRACKING:
			return true;
		case BuddyBand2PublicState.WAITING:
			return false;
		case BuddyBand2PublicState.PAUSED:
			return false;
		default:
			return false;
		}
	}

	public static Color colorForState(BuddyBand2PublicState state)
	{
		switch (state)
		{
		case BuddyBand2PublicState.CONFIGURING:
			return DataColors.RAG_ORANGE;
		case BuddyBand2PublicState.CONNECTING:
			return DataColors.RAG_ORANGE;
		case BuddyBand2PublicState.NOT_CONNECTED:
			return DataColors.RAG_RED;
		case BuddyBand2PublicState.SYNCHRONISING:
			return DataColors.RAG_GREEN;
		case BuddyBand2PublicState.TRACKING:
			return DataColors.RAG_GREEN;
		case BuddyBand2PublicState.WAITING:
			return DataColors.RAG_ORANGE;
		case BuddyBand2PublicState.PAUSED:
			return DataColors.RAG_ORANGE;
		default:
			return DataColors.RAG_RED;
		}
	}

	public static string labelForState(BuddyBand2PublicState state)
	{
		switch (state)
		{
		case BuddyBand2PublicState.CONFIGURING:
			return Catalog.GetString("Configuring");
		case BuddyBand2PublicState.CONNECTING:
			return Catalog.GetString("Connecting");
		case BuddyBand2PublicState.NOT_CONNECTED:
			return Catalog.GetString("Not Configured");
		case BuddyBand2PublicState.SYNCHRONISING:
			return Catalog.GetString("Synchronising");
		case BuddyBand2PublicState.TRACKING:
			return Catalog.GetString("Monitoring");
		case BuddyBand2PublicState.WAITING:
			return Catalog.GetString("Waiting");
		case BuddyBand2PublicState.PAUSED:
			return Catalog.GetString("Resuming");
		default:
			return Catalog.GetString("Not Configured");
		}
	}
}

// Activ8rlives.BuddyBand2DiscoverySlide
using Activ8rlives;
using System;
using System.CodeDom.Compiler;
using System.Collections.ObjectModel;
using System.Reflection;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Devices/BuddyBand2/BuddyBand2DiscoverySlide.xaml")]
public class BuddyBand2DiscoverySlide : Activ8ListView
{
	private ObservableCollection<DiscoveredBuddyBand2> source_ = new ObservableCollection<DiscoveredBuddyBand2>();

	public BuddyBand2DiscoverySlide(Action<DiscoveredBuddyBand2> action)
	{
		InitializeComponent();
		base.ItemsSource = source_;
		if (action != null)
		{
			base.ItemSelected += delegate(object sender, SelectedItemChangedEventArgs e)
			{
				action(e.SelectedItem as DiscoveredBuddyBand2);
			};
		}
	}

	public void Clear()
	{
		source_.Clear();
	}

	public void AddBuddyBand(DiscoveredBuddyBand2 band)
	{
		source_.Add(band);
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BuddyBand2DiscoverySlide).GetTypeInfo().get_Assembly().GetName(), "Devices/BuddyBand2/BuddyBand2DiscoverySlide.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		DataTemplate dataTemplate = new DataTemplate();
		NameScope value = new NameScope();
		NameScope.SetNameScope(this, value);
		DataTemplate dataTemplate2 = dataTemplate;
		object[] array = new object[0 + 2];
		array[0] = dataTemplate;
		array[1] = this;
		object[] parentValues = array;
		((IDataTemplate)dataTemplate2).LoadTemplate = delegate
		{
			BindingExtension bindingExtension = new BindingExtension();
			Image image = new Image();
			BindingExtension bindingExtension2 = new BindingExtension();
			Color aSTHMA_BLACK_X = Colors.ASTHMA_BLACK_X;
			Label label = new Label();
			BindingExtension bindingExtension3 = new BindingExtension();
			Color aSTHMA_BLACK_X2 = Colors.ASTHMA_BLACK_X;
			Label label2 = new Label();
			StackLayout stackLayout = new StackLayout();
			ViewCell viewCell = new ViewCell();
			NameScope nameScope = new NameScope();
			NameScope.SetNameScope(viewCell, nameScope);
			NameScope.SetNameScope(stackLayout, nameScope);
			NameScope.SetNameScope(image, nameScope);
			NameScope.SetNameScope(label, nameScope);
			NameScope.SetNameScope(label2, nameScope);
			stackLayout.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
			stackLayout.SetValue(StackLayout.SpacingProperty, 10.0);
			bindingExtension.Path = "Icon";
			BindingBase binding = ((IMarkupExtension<BindingBase>)bindingExtension).ProvideValue((IServiceProvider)null);
			image.SetBinding(Image.SourceProperty, binding);
			image.SetValue(VisualElement.HeightRequestProperty, 35.0);
			image.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
			stackLayout.Children.Add(image);
			bindingExtension2.Path = "DeviceName";
			BindingBase binding2 = ((IMarkupExtension<BindingBase>)bindingExtension2).ProvideValue((IServiceProvider)null);
			label.SetBinding(Label.TextProperty, binding2);
			Label label3 = label;
			BindableProperty fontSizeProperty = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
			Type typeFromHandle = typeof(IProvideValueTarget);
			int length;
			object[] array2 = new object[(length = parentValues.Length) + 3];
			Array.Copy(parentValues, 0, array2, 3, length);
			object[] array3 = array2;
			array3[0] = label;
			array3[1] = stackLayout;
			array3[2] = viewCell;
			xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array3, Label.FontSizeProperty));
			xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
			{
				NameScope = nameScope
			});
			Type typeFromHandle2 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
			xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
			xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
			xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(<InitializeComponent>_anonXamlCDataTemplate_3).GetTypeInfo().get_Assembly()));
			xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(12, 56)));
			label3.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("20", (IServiceProvider)xamlServiceProvider));
			label.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
			label.SetValue(Label.TextColorProperty, aSTHMA_BLACK_X);
			label.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
			label.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			stackLayout.Children.Add(label);
			bindingExtension3.Path = "Identifier";
			BindingBase binding3 = ((IMarkupExtension<BindingBase>)bindingExtension3).ProvideValue((IServiceProvider)null);
			label2.SetBinding(Label.TextProperty, binding3);
			Label label4 = label2;
			BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
			Type typeFromHandle3 = typeof(IProvideValueTarget);
			int length2;
			object[] array4 = new object[(length2 = parentValues.Length) + 3];
			Array.Copy(parentValues, 0, array4, 3, length2);
			object[] array5 = array4;
			array5[0] = label2;
			array5[1] = stackLayout;
			array5[2] = viewCell;
			xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array5, Label.FontSizeProperty));
			xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
			{
				NameScope = nameScope
			});
			Type typeFromHandle4 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
			xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
			xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
			xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(<InitializeComponent>_anonXamlCDataTemplate_3).GetTypeInfo().get_Assembly()));
			xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(13, 56)));
			label4.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("28", (IServiceProvider)xamlServiceProvider2));
			label2.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
			label2.SetValue(Label.TextColorProperty, aSTHMA_BLACK_X2);
			label2.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
			label2.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
			stackLayout.Children.Add(label2);
			viewCell.View = stackLayout;
			return viewCell;
		};
		SetValue(ItemsView<Cell>.ItemTemplateProperty, dataTemplate);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BuddyBand2DiscoverySlide));
	}
}

// Activ8rlives.BuddyBand2FirmwareUpgradeView
using Activ8rlives;
using System;

public class BuddyBand2FirmwareUpgradeView : BuddyBand2GenericView
{
	public BuddyBand2FirmwareUpgradeView(FirmwareVersion version_to_download, Action done_action)
		: base(done_action)
	{
		StateMachine.State_FirmwarePrep.Setup(version_to_download);
		StateMachine.State = StateMachine.State_FirmwarePrep;
	}
}

// Activ8rlives.BuddyBand2GenericView
using Activ8rlives;
using Activ8rlivesBase;
using System;
using System.Threading.Tasks;
using Vernacular;
using Xamarin.Forms;

public class BuddyBand2GenericView : StateMachineView, IBuddyBand2UIDelegate, IStateMachineDelegate
{
	protected BuddyBand2UI StateMachine;

	private Action done_action_;

	public BuddyBand2GenericView(Action done_action)
	{
		base.DefaultTitle = Catalog.GetString("BuddyBand2", "Page Title for pairing sequence");
		StateMachine = new BuddyBand2UI(this);
		done_action_ = done_action;
	}

	public string DeviceName()
	{
		return base.DefaultTitle;
	}

	public string DeviceType()
	{
		return "BuddyBand2";
	}

	public bool UseBonding()
	{
		return Device.RuntimePlatform == "iOS";
	}

	public override void Done()
	{
		StateMachine.Shutdown();
		done_action_();
	}

	protected override void OnRemoved()
	{
		base.OnRemoved();
		StateMachine.Shutdown();
	}

	public string IdentifyImage()
	{
		return "buddyband2_identify_screen.png";
	}

	public string ConnectingImage()
	{
		return "buddyband2_connecting.png";
	}

	public string PairingHelpUrl()
	{
		return "help/#/device_bb2_pairing";
	}

	public void Reboot()
	{
		CommonApp.CurrentCommonApp.getBuddyBand2()?.Reboot();
	}

	public void SetActiveDevice(BuddyBand2HardwareSettings device)
	{
		BuddyBand2Settings settings = BuddyBand2Proxy.getSettings(StateMachine.DataModel);
		settings.DeviceType = device.DeviceType;
		settings.BluetoothID = device.BluetoothID;
		settings.HardwareID = device.HardwareID;
		BuddyBand2Proxy.setSettings(StateMachine.DataModel, settings);
	}

	public BuddyBand2HardwareSettings GetActiveDevice()
	{
		BuddyBand2Settings settings = BuddyBand2Proxy.getSettings(StateMachine.DataModel);
		return new BuddyBand2HardwareSettings
		{
			DeviceType = settings.DeviceType,
			BluetoothID = settings.BluetoothID,
			HardwareID = settings.HardwareID
		};
	}

	public void ClearActiveDevice()
	{
		BuddyBand2Proxy.clearSettings(StateMachine.DataModel);
	}

	public DiscoveredBuddyBand2 CheckDevice(byte[] manufacturer)
	{
		if (manufacturer.Length != 4 || manufacturer[0] != 52 || manufacturer[1] != 18 || manufacturer[2] != 1)
		{
			return null;
		}
		if (manufacturer[3] == 0)
		{
			return null;
		}
		return new DiscoveredBuddyBand2
		{
			DeviceType = FirmwareDeviceType.BUDDYBAND2
		};
	}

	public bool RunStateCheck()
	{
		return true;
	}

	public View GetInstructionView(Action done_action)
	{
		return new BuddyBand2InstructionView(done_action);
	}

	public Task<byte[]> GetFirmware(FirmwareVersion f)
	{
		return CommonApp.CurrentCommonApp.getFirmwareChecker().Get_BB2_Firmware(f);
	}
}

// Activ8rlives.BuddyBand2HardwareSettings
using Activ8rlivesBase;
using System;

public class BuddyBand2HardwareSettings
{
	public Guid BluetoothID
	{
		get;
		set;
	}

	public byte[] HardwareID
	{
		get;
		set;
	}

	public FirmwareDeviceType DeviceType
	{
		get;
		set;
	}
}

// Activ8rlives.BuddyBand2InstructionView
using Activ8rlives;
using System;
using System.Collections.Generic;
using Vernacular;
using Xamarin.Forms;

public class BuddyBand2InstructionView : InstructionView
{
	public string Title => Catalog.GetString("BuddyBand2 Pairing Instructions");

	public BuddyBand2InstructionView(Action done_action)
		: base(done_action)
	{
	}

	public override List<View> CreateViews()
	{
		return new List<View>
		{
			new InstructionSlide(-1, 1, this, "Tap the silver button on the BuddyBand2 to wake it up", "Does the screen show a two-digit number?", "bb2_extra_setup8", "Yes", "No"),
			new InstructionSlide(2, 0, this, "Put your BuddyBand2 into pairing mode", "Tap the silver button on the BuddyBand2 until you reach the sleep screen", "bb2_extra_setup2", "Next", "Back"),
			new InstructionSlide(3, 1, this, "On the sleep screen, press and hold the silver button on the BuddyBand2", "Keep holding when you see the bed screen and don't let go until you see the cogs screen.", "bb2_extra_setup3", "Next", "Back"),
			new InstructionSlide(-1, 2, this, "Double-tap the silver button on the BuddyBand2", "Before the progress bar empties, tap the silver button on the BuddyBand2 twice quickly to put your BuddyBand2 in to pairing mode.", "bb2_extra_setup5", "Next", "Back")
		};
	}
}

// Activ8rlives.BuddyBand2PairingView
using Activ8rlives;
using System;

public class BuddyBand2PairingView : BuddyBand2GenericView
{
	public BuddyBand2PairingView(Action done_action)
		: base(done_action)
	{
		StateMachine.State = StateMachine.State_BluetoothCheck;
	}
}

// Activ8rlives.BuddyBand2RawDataView
using Activ8rlives;
using Activ8rlivesBase;
using System;
using System.CodeDom.Compiler;
using System.Reflection;
using Vernacular;
using Vernacular.Xaml;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Modules/BuddyBand2/BuddyBand2RawDataView.xaml")]
public class BuddyBand2RawDataView : ContentView
{
	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _date;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8Entry _steps;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8Entry _comment;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _store;

	public BuddyBand2RawDataView(IBuddyBand2 buddyband2, DateTime date_collected)
	{
		base.Resources = Theme.GetResourceDictionary();
		InitializeComponent();
		_store.Clicked += async delegate
		{
			try
			{
				int steps = Convert.ToInt32(_steps.Text);
				buddyband2.FileRaw(steps, _comment.Text);
				CommonApp.CurrentCommonApp.PopDirect();
				return;
			}
			catch (Exception)
			{
			}
			await CommonApp.CurrentCommonApp.DisplayAlert1(Vernacular.Catalog.GetString("Invalid Number"), Vernacular.Catalog.GetString("You must enter the steps you counted while recording the data"), Vernacular.Catalog.GetString("OK"));
		};
		date_collected = date_collected.ToLocalTime();
		_date.Text = string.Format("{0} at {1:T}", new object[2]
		{
			date_collected.InformalDate(),
			date_collected
		});
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly().GetName(), "Modules/BuddyBand2/BuddyBand2RawDataView.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		StaticResourceExtension staticResourceExtension = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension2 = new StaticResourceExtension();
		Label label = new Label();
		StaticResourceExtension staticResourceExtension3 = new StaticResourceExtension();
		Label label2 = new Label();
		StaticResourceExtension staticResourceExtension4 = new StaticResourceExtension();
		Label label3 = new Label();
		StaticResourceExtension staticResourceExtension5 = new StaticResourceExtension();
		Label label4 = new Label();
		Activ8Entry activ8Entry = new Activ8Entry();
		StaticResourceExtension staticResourceExtension6 = new StaticResourceExtension();
		Label label5 = new Label();
		StaticResourceExtension staticResourceExtension7 = new StaticResourceExtension();
		Activ8Entry activ8Entry2 = new Activ8Entry();
		BlueButton blueButton = new BlueButton();
		StaticResourceExtension staticResourceExtension8 = new StaticResourceExtension();
		Label label6 = new Label();
		StackLayout stackLayout = new StackLayout();
		ScrollView scrollView = new ScrollView();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(scrollView, nameScope);
		NameScope.SetNameScope(stackLayout, nameScope);
		NameScope.SetNameScope(label, nameScope);
		NameScope.SetNameScope(label2, nameScope);
		NameScope.SetNameScope(label3, nameScope);
		((INameScope)nameScope).RegisterName("_date", (object)label3);
		if (label3.StyleId == null)
		{
			label3.StyleId = "_date";
		}
		NameScope.SetNameScope(label4, nameScope);
		NameScope.SetNameScope(activ8Entry, nameScope);
		((INameScope)nameScope).RegisterName("_steps", (object)activ8Entry);
		if (activ8Entry.StyleId == null)
		{
			activ8Entry.StyleId = "_steps";
		}
		NameScope.SetNameScope(label5, nameScope);
		NameScope.SetNameScope(activ8Entry2, nameScope);
		((INameScope)nameScope).RegisterName("_comment", (object)activ8Entry2);
		if (activ8Entry2.StyleId == null)
		{
			activ8Entry2.StyleId = "_comment";
		}
		NameScope.SetNameScope(blueButton, nameScope);
		((INameScope)nameScope).RegisterName("_store", (object)blueButton);
		if (blueButton.StyleId == null)
		{
			blueButton.StyleId = "_store";
		}
		NameScope.SetNameScope(label6, nameScope);
		_date = label3;
		_steps = activ8Entry;
		_comment = activ8Entry2;
		_store = blueButton;
		SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0, 10.0, 10.0, 0.0));
		staticResourceExtension.Key = "PageBGColor";
		StaticResourceExtension staticResourceExtension9 = staticResourceExtension;
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 1];
		array[0] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, VisualElement.BackgroundColorProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(7, 9)));
		object obj = ((IMarkupExtension)staticResourceExtension9).ProvideValue((IServiceProvider)xamlServiceProvider);
		BackgroundColor = (Color)obj;
		label.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "BuddyBand2 Raw Data Upload");
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label7 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 4];
		array2[0] = label;
		array2[1] = stackLayout;
		array2[2] = scrollView;
		array2[3] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.FontSizeProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(11, 125)));
		label7.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider2));
		staticResourceExtension2.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension10 = staticResourceExtension2;
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 4];
		array3[0] = label;
		array3[1] = stackLayout;
		array3[2] = scrollView;
		array3[3] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, Label.TextColorProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(11, 139)));
		object obj2 = ((IMarkupExtension)staticResourceExtension10).ProvideValue((IServiceProvider)xamlServiceProvider3);
		label.TextColor = (Color)obj2;
		stackLayout.Children.Add(label);
		label2.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "This data was collected");
		label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label8 = label2;
		BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
		Type typeFromHandle7 = typeof(IProvideValueTarget);
		object[] array4 = new object[0 + 4];
		array4[0] = label2;
		array4[1] = stackLayout;
		array4[2] = scrollView;
		array4[3] = this;
		xamlServiceProvider4.Add(typeFromHandle7, new SimpleValueTargetProvider(array4, Label.FontSizeProperty));
		xamlServiceProvider4.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle8 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
		xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver4.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver4.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(13, 122)));
		label8.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider4));
		staticResourceExtension3.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension11 = staticResourceExtension3;
		XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
		Type typeFromHandle9 = typeof(IProvideValueTarget);
		object[] array5 = new object[0 + 4];
		array5[0] = label2;
		array5[1] = stackLayout;
		array5[2] = scrollView;
		array5[3] = this;
		xamlServiceProvider5.Add(typeFromHandle9, new SimpleValueTargetProvider(array5, Label.TextColorProperty));
		xamlServiceProvider5.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle10 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
		xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver5.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver5.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(13, 136)));
		object obj3 = ((IMarkupExtension)staticResourceExtension11).ProvideValue((IServiceProvider)xamlServiceProvider5);
		label2.TextColor = (Color)obj3;
		label2.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		stackLayout.Children.Add(label2);
		label3.SetValue(Label.TextProperty, "");
		label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label9 = label3;
		BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
		Type typeFromHandle11 = typeof(IProvideValueTarget);
		object[] array6 = new object[0 + 4];
		array6[0] = label3;
		array6[1] = stackLayout;
		array6[2] = scrollView;
		array6[3] = this;
		xamlServiceProvider6.Add(typeFromHandle11, new SimpleValueTargetProvider(array6, Label.FontSizeProperty));
		xamlServiceProvider6.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle12 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
		xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver6.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver6.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(14, 98)));
		label9.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider6));
		staticResourceExtension4.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension12 = staticResourceExtension4;
		XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
		Type typeFromHandle13 = typeof(IProvideValueTarget);
		object[] array7 = new object[0 + 4];
		array7[0] = label3;
		array7[1] = stackLayout;
		array7[2] = scrollView;
		array7[3] = this;
		xamlServiceProvider7.Add(typeFromHandle13, new SimpleValueTargetProvider(array7, Label.TextColorProperty));
		xamlServiceProvider7.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle14 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
		xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver7.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver7.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(14, 112)));
		object obj4 = ((IMarkupExtension)staticResourceExtension12).ProvideValue((IServiceProvider)xamlServiceProvider7);
		label3.TextColor = (Color)obj4;
		stackLayout.Children.Add(label3);
		label4.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Please enter the number of steps taken during the collection of this data");
		label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label10 = label4;
		BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
		Type typeFromHandle15 = typeof(IProvideValueTarget);
		object[] array8 = new object[0 + 4];
		array8[0] = label4;
		array8[1] = stackLayout;
		array8[2] = scrollView;
		array8[3] = this;
		xamlServiceProvider8.Add(typeFromHandle15, new SimpleValueTargetProvider(array8, Label.FontSizeProperty));
		xamlServiceProvider8.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle16 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
		xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver8.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver8.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(16, 172)));
		label10.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider8));
		staticResourceExtension5.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension13 = staticResourceExtension5;
		XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
		Type typeFromHandle17 = typeof(IProvideValueTarget);
		object[] array9 = new object[0 + 4];
		array9[0] = label4;
		array9[1] = stackLayout;
		array9[2] = scrollView;
		array9[3] = this;
		xamlServiceProvider9.Add(typeFromHandle17, new SimpleValueTargetProvider(array9, Label.TextColorProperty));
		xamlServiceProvider9.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle18 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
		xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver9.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver9.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(16, 186)));
		object obj5 = ((IMarkupExtension)staticResourceExtension13).ProvideValue((IServiceProvider)xamlServiceProvider9);
		label4.TextColor = (Color)obj5;
		label4.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label4.SetValue(View.MarginProperty, new Thickness(0.0, 20.0, 0.0, 0.0));
		stackLayout.Children.Add(label4);
		activ8Entry.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		activ8Entry.SetValue(InputView.KeyboardProperty, new KeyboardTypeConverter().ConvertFromInvariantString("Numeric"));
		activ8Entry.SetValue(Entry.PlaceholderProperty, "Enter total steps");
		stackLayout.Children.Add(activ8Entry);
		label5.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "You can also enter a comment about the data.");
		label5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label11 = label5;
		BindableProperty fontSizeProperty5 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
		Type typeFromHandle19 = typeof(IProvideValueTarget);
		object[] array10 = new object[0 + 4];
		array10[0] = label5;
		array10[1] = stackLayout;
		array10[2] = scrollView;
		array10[3] = this;
		xamlServiceProvider10.Add(typeFromHandle19, new SimpleValueTargetProvider(array10, Label.FontSizeProperty));
		xamlServiceProvider10.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle20 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
		xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver10.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver10.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(19, 143)));
		label11.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider10));
		staticResourceExtension6.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension14 = staticResourceExtension6;
		XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
		Type typeFromHandle21 = typeof(IProvideValueTarget);
		object[] array11 = new object[0 + 4];
		array11[0] = label5;
		array11[1] = stackLayout;
		array11[2] = scrollView;
		array11[3] = this;
		xamlServiceProvider11.Add(typeFromHandle21, new SimpleValueTargetProvider(array11, Label.TextColorProperty));
		xamlServiceProvider11.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle22 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
		xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver11.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver11.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(19, 157)));
		object obj6 = ((IMarkupExtension)staticResourceExtension14).ProvideValue((IServiceProvider)xamlServiceProvider11);
		label5.TextColor = (Color)obj6;
		label5.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		label5.SetValue(View.MarginProperty, new Thickness(0.0, 20.0, 0.0, 0.0));
		stackLayout.Children.Add(label5);
		staticResourceExtension7.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension15 = staticResourceExtension7;
		XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
		Type typeFromHandle23 = typeof(IProvideValueTarget);
		object[] array12 = new object[0 + 4];
		array12[0] = activ8Entry2;
		array12[1] = stackLayout;
		array12[2] = scrollView;
		array12[3] = this;
		xamlServiceProvider12.Add(typeFromHandle23, new SimpleValueTargetProvider(array12, VisualElement.BackgroundColorProperty));
		xamlServiceProvider12.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle24 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
		xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver12.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver12.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(20, 34)));
		object obj7 = ((IMarkupExtension)staticResourceExtension15).ProvideValue((IServiceProvider)xamlServiceProvider12);
		activ8Entry2.BackgroundColor = (Color)obj7;
		activ8Entry2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout.Children.Add(activ8Entry2);
		blueButton.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Store Now");
		blueButton.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		blueButton.SetValue(View.MarginProperty, new Thickness(0.0, 20.0, 0.0, 0.0));
		stackLayout.Children.Add(blueButton);
		label6.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "After you have collected all the data sets you need, please file a bug report to send them to Activ8rlives.");
		label6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label6.SetValue(View.VerticalOptionsProperty, LayoutOptions.End);
		Label label12 = label6;
		BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
		Type typeFromHandle25 = typeof(IProvideValueTarget);
		object[] array13 = new object[0 + 4];
		array13[0] = label6;
		array13[1] = stackLayout;
		array13[2] = scrollView;
		array13[3] = this;
		xamlServiceProvider13.Add(typeFromHandle25, new SimpleValueTargetProvider(array13, Label.FontSizeProperty));
		xamlServiceProvider13.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle26 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
		xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver13.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver13.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(24, 203)));
		label12.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider13));
		staticResourceExtension8.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension16 = staticResourceExtension8;
		XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
		Type typeFromHandle27 = typeof(IProvideValueTarget);
		object[] array14 = new object[0 + 4];
		array14[0] = label6;
		array14[1] = stackLayout;
		array14[2] = scrollView;
		array14[3] = this;
		xamlServiceProvider14.Add(typeFromHandle27, new SimpleValueTargetProvider(array14, Label.TextColorProperty));
		xamlServiceProvider14.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle28 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
		xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver14.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver14.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(BuddyBand2RawDataView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(24, 217)));
		object obj8 = ((IMarkupExtension)staticResourceExtension16).ProvideValue((IServiceProvider)xamlServiceProvider14);
		label6.TextColor = (Color)obj8;
		label6.SetValue(View.MarginProperty, new Thickness(0.0, 20.0, 0.0, 0.0));
		stackLayout.Children.Add(label6);
		scrollView.Content = stackLayout;
		SetValue(ContentView.ContentProperty, scrollView);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BuddyBand2RawDataView));
		_date = this.FindByName<Label>("_date");
		_steps = this.FindByName<Activ8Entry>("_steps");
		_comment = this.FindByName<Activ8Entry>("_comment");
		_store = this.FindByName<BlueButton>("_store");
	}
}

// Activ8rlives.BuddyBand2Settings_AlarmView
using Activ8rlives;
using System;
using System.CodeDom.Compiler;
using System.Reflection;
using Vernacular;
using Vernacular.Xaml;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Modules/BuddyBand2/BuddyBand2Settings_AlarmView.xaml")]
public class BuddyBand2Settings_AlarmView : ContentView
{
	private BuddyBand2SettingsView main_page_;

	private int alarm_number_;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _alarm_title;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Switch _enabled;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8TimePicker _time;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _mon_t;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Switch _mon_enabled;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _tue_t;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Switch _tue_enabled;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _wed_t;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Switch _wed_enabled;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _thu_t;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Switch _thu_enabled;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _fri_t;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Switch _fri_enabled;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _sat_t;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Switch _sat_enabled;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _sun_t;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Switch _sun_enabled;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _wday_t;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Switch _wday_enabled;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _wend_t;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Switch _wend_enabled;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _done;

	public BuddyBand2Settings_AlarmView(BuddyBand2SettingsView main_page, int alarm_number)
	{
		main_page_ = main_page;
		alarm_number_ = alarm_number;
		base.Resources = Theme.GetResourceDictionary();
		InitializeComponent();
		_mon_t.Text = Vernacular.Catalog.GetString("Monday");
		_tue_t.Text = Vernacular.Catalog.GetString("Tuesday");
		_wed_t.Text = Vernacular.Catalog.GetString("Wednesday");
		_thu_t.Text = Vernacular.Catalog.GetString("Thursday");
		_fri_t.Text = Vernacular.Catalog.GetString("Friday");
		_sat_t.Text = Vernacular.Catalog.GetString("Saturday");
		_sun_t.Text = Vernacular.Catalog.GetString("Sunday");
		_wday_t.Text = Vernacular.Catalog.GetString("Weekdays");
		_wend_t.Text = Vernacular.Catalog.GetString("Weekends");
		_alarm_title.Text = $"Alarm {alarm_number.ToString()}";
		_enabled.Toggled += delegate
		{
			if (alarm_number_ == 1)
			{
				main_page_.Set_Alarm1Enable(_enabled.IsToggled);
			}
			if (alarm_number_ == 2)
			{
				main_page_.Set_Alarm2Enable(_enabled.IsToggled);
			}
			if (alarm_number_ == 3)
			{
				main_page_.Set_Alarm3Enable(_enabled.IsToggled);
			}
		};
		_time.PropertyChanged += delegate
		{
			if (alarm_number_ == 1)
			{
				main_page_.Set_Alarm1Time(_time.Time);
			}
			if (alarm_number_ == 2)
			{
				main_page_.Set_Alarm2Time(_time.Time);
			}
			if (alarm_number_ == 3)
			{
				main_page_.Set_Alarm3Time(_time.Time);
			}
		};
		_done.Clicked += delegate
		{
			CommonApp.CurrentCommonApp.PopDirect();
		};
		Update();
		if (_mon_enabled.IsToggled && _tue_enabled.IsToggled && _wed_enabled.IsToggled && _thu_enabled.IsToggled && _fri_enabled.IsToggled)
		{
			_wday_enabled.IsToggled = true;
		}
		if (_sat_enabled.IsToggled && _sun_enabled.IsToggled)
		{
			_wend_enabled.IsToggled = true;
		}
		_mon_enabled.Toggled += delegate
		{
			SetMask(alarm_number);
		};
		_tue_enabled.Toggled += delegate
		{
			SetMask(alarm_number);
		};
		_wed_enabled.Toggled += delegate
		{
			SetMask(alarm_number);
		};
		_thu_enabled.Toggled += delegate
		{
			SetMask(alarm_number);
		};
		_fri_enabled.Toggled += delegate
		{
			SetMask(alarm_number);
		};
		_sat_enabled.Toggled += delegate
		{
			SetMask(alarm_number);
		};
		_sun_enabled.Toggled += delegate
		{
			SetMask(alarm_number);
		};
		_wday_enabled.Toggled += delegate
		{
			_mon_enabled.IsToggled = _wday_enabled.IsToggled;
			_tue_enabled.IsToggled = _wday_enabled.IsToggled;
			_wed_enabled.IsToggled = _wday_enabled.IsToggled;
			_thu_enabled.IsToggled = _wday_enabled.IsToggled;
			_fri_enabled.IsToggled = _wday_enabled.IsToggled;
			SetMask(alarm_number);
		};
		_wend_enabled.Toggled += delegate
		{
			_sat_enabled.IsToggled = _wend_enabled.IsToggled;
			_sun_enabled.IsToggled = _wend_enabled.IsToggled;
			SetMask(alarm_number);
		};
	}

	private void SetMask(int number)
	{
		ushort num = 0;
		if (_mon_enabled.IsToggled)
		{
			num = (ushort)(num | 1);
		}
		if (_tue_enabled.IsToggled)
		{
			num = (ushort)(num | 2);
		}
		if (_wed_enabled.IsToggled)
		{
			num = (ushort)(num | 4);
		}
		if (_thu_enabled.IsToggled)
		{
			num = (ushort)(num | 8);
		}
		if (_fri_enabled.IsToggled)
		{
			num = (ushort)(num | 0x10);
		}
		if (_sat_enabled.IsToggled)
		{
			num = (ushort)(num | 0x20);
		}
		if (_sun_enabled.IsToggled)
		{
			num = (ushort)(num | 0x40);
		}
		if (number == 1)
		{
			main_page_.Set_Alarm1Mask(num);
		}
		if (number == 2)
		{
			main_page_.Set_Alarm2Mask(num);
		}
		if (number == 3)
		{
			main_page_.Set_Alarm3Mask(num);
		}
	}

	public void Update()
	{
		if (alarm_number_ == 1)
		{
			_enabled.IsToggled = main_page_.Settings.Alarm1Enable;
			_time.Time = main_page_.Settings.Alarm1Time;
			_mon_enabled.IsToggled = ((main_page_.Settings.Alarm1Mask & 1) != 0);
			_tue_enabled.IsToggled = ((main_page_.Settings.Alarm1Mask & 2) != 0);
			_wed_enabled.IsToggled = ((main_page_.Settings.Alarm1Mask & 4) != 0);
			_thu_enabled.IsToggled = ((main_page_.Settings.Alarm1Mask & 8) != 0);
			_fri_enabled.IsToggled = ((main_page_.Settings.Alarm1Mask & 0x10) != 0);
			_sat_enabled.IsToggled = ((main_page_.Settings.Alarm1Mask & 0x20) != 0);
			_sun_enabled.IsToggled = ((main_page_.Settings.Alarm1Mask & 0x40) != 0);
		}
		if (alarm_number_ == 2)
		{
			_enabled.IsToggled = main_page_.Settings.Alarm2Enable;
			_time.Time = main_page_.Settings.Alarm2Time;
			_mon_enabled.IsToggled = ((main_page_.Settings.Alarm2Mask & 1) != 0);
			_tue_enabled.IsToggled = ((main_page_.Settings.Alarm2Mask & 2) != 0);
			_wed_enabled.IsToggled = ((main_page_.Settings.Alarm2Mask & 4) != 0);
			_thu_enabled.IsToggled = ((main_page_.Settings.Alarm2Mask & 8) != 0);
			_fri_enabled.IsToggled = ((main_page_.Settings.Alarm2Mask & 0x10) != 0);
			_sat_enabled.IsToggled = ((main_page_.Settings.Alarm2Mask & 0x20) != 0);
			_sun_enabled.IsToggled = ((main_page_.Settings.Alarm2Mask & 0x40) != 0);
		}
		if (alarm_number_ == 3)
		{
			_enabled.IsToggled = main_page_.Settings.Alarm3Enable;
			_time.Time = main_page_.Settings.Alarm3Time;
			_mon_enabled.IsToggled = ((main_page_.Settings.Alarm3Mask & 1) != 0);
			_tue_enabled.IsToggled = ((main_page_.Settings.Alarm3Mask & 2) != 0);
			_wed_enabled.IsToggled = ((main_page_.Settings.Alarm3Mask & 4) != 0);
			_thu_enabled.IsToggled = ((main_page_.Settings.Alarm3Mask & 8) != 0);
			_fri_enabled.IsToggled = ((main_page_.Settings.Alarm3Mask & 0x10) != 0);
			_sat_enabled.IsToggled = ((main_page_.Settings.Alarm3Mask & 0x20) != 0);
			_sun_enabled.IsToggled = ((main_page_.Settings.Alarm3Mask & 0x40) != 0);
		}
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly().GetName(), "Modules/BuddyBand2/BuddyBand2Settings_AlarmView.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		StaticResourceExtension staticResourceExtension = new StaticResourceExtension();
		Thickness pagePadding = Sizes.PagePadding;
		StaticResourceExtension staticResourceExtension2 = new StaticResourceExtension();
		Label label = new Label();
		Switch @switch = new Switch();
		StackLayout stackLayout = new StackLayout();
		StaticResourceExtension staticResourceExtension3 = new StaticResourceExtension();
		Label label2 = new Label();
		StaticResourceExtension staticResourceExtension4 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension5 = new StaticResourceExtension();
		Activ8TimePicker activ8TimePicker = new Activ8TimePicker();
		StaticResourceExtension staticResourceExtension6 = new StaticResourceExtension();
		Label label3 = new Label();
		RowDefinition rowDefinition = new RowDefinition();
		RowDefinition rowDefinition2 = new RowDefinition();
		RowDefinition rowDefinition3 = new RowDefinition();
		RowDefinition rowDefinition4 = new RowDefinition();
		RowDefinition rowDefinition5 = new RowDefinition();
		RowDefinition rowDefinition6 = new RowDefinition();
		RowDefinition rowDefinition7 = new RowDefinition();
		ColumnDefinition columnDefinition = new ColumnDefinition();
		ColumnDefinition columnDefinition2 = new ColumnDefinition();
		StaticResourceExtension staticResourceExtension7 = new StaticResourceExtension();
		Label label4 = new Label();
		Switch switch2 = new Switch();
		StackLayout stackLayout2 = new StackLayout();
		StaticResourceExtension staticResourceExtension8 = new StaticResourceExtension();
		Label label5 = new Label();
		Switch switch3 = new Switch();
		StackLayout stackLayout3 = new StackLayout();
		StaticResourceExtension staticResourceExtension9 = new StaticResourceExtension();
		Label label6 = new Label();
		Switch switch4 = new Switch();
		StackLayout stackLayout4 = new StackLayout();
		StaticResourceExtension staticResourceExtension10 = new StaticResourceExtension();
		Label label7 = new Label();
		Switch switch5 = new Switch();
		StackLayout stackLayout5 = new StackLayout();
		StaticResourceExtension staticResourceExtension11 = new StaticResourceExtension();
		Label label8 = new Label();
		Switch switch6 = new Switch();
		StackLayout stackLayout6 = new StackLayout();
		StaticResourceExtension staticResourceExtension12 = new StaticResourceExtension();
		Label label9 = new Label();
		Switch switch7 = new Switch();
		StackLayout stackLayout7 = new StackLayout();
		StaticResourceExtension staticResourceExtension13 = new StaticResourceExtension();
		Label label10 = new Label();
		Switch switch8 = new Switch();
		StackLayout stackLayout8 = new StackLayout();
		StaticResourceExtension staticResourceExtension14 = new StaticResourceExtension();
		Label label11 = new Label();
		Switch switch9 = new Switch();
		StackLayout stackLayout9 = new StackLayout();
		StaticResourceExtension staticResourceExtension15 = new StaticResourceExtension();
		Label label12 = new Label();
		Switch switch10 = new Switch();
		StackLayout stackLayout10 = new StackLayout();
		Grid grid = new Grid();
		BlueButton blueButton = new BlueButton();
		StackLayout stackLayout11 = new StackLayout();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(stackLayout11, nameScope);
		NameScope.SetNameScope(stackLayout, nameScope);
		NameScope.SetNameScope(label, nameScope);
		((INameScope)nameScope).RegisterName("_alarm_title", (object)label);
		if (label.StyleId == null)
		{
			label.StyleId = "_alarm_title";
		}
		NameScope.SetNameScope(@switch, nameScope);
		((INameScope)nameScope).RegisterName("_enabled", (object)@switch);
		if (@switch.StyleId == null)
		{
			@switch.StyleId = "_enabled";
		}
		NameScope.SetNameScope(label2, nameScope);
		NameScope.SetNameScope(activ8TimePicker, nameScope);
		((INameScope)nameScope).RegisterName("_time", (object)activ8TimePicker);
		if (activ8TimePicker.StyleId == null)
		{
			activ8TimePicker.StyleId = "_time";
		}
		NameScope.SetNameScope(label3, nameScope);
		NameScope.SetNameScope(grid, nameScope);
		NameScope.SetNameScope(rowDefinition, nameScope);
		NameScope.SetNameScope(rowDefinition2, nameScope);
		NameScope.SetNameScope(rowDefinition3, nameScope);
		NameScope.SetNameScope(rowDefinition4, nameScope);
		NameScope.SetNameScope(rowDefinition5, nameScope);
		NameScope.SetNameScope(rowDefinition6, nameScope);
		NameScope.SetNameScope(rowDefinition7, nameScope);
		NameScope.SetNameScope(columnDefinition, nameScope);
		NameScope.SetNameScope(columnDefinition2, nameScope);
		NameScope.SetNameScope(stackLayout2, nameScope);
		NameScope.SetNameScope(label4, nameScope);
		((INameScope)nameScope).RegisterName("_mon_t", (object)label4);
		if (label4.StyleId == null)
		{
			label4.StyleId = "_mon_t";
		}
		NameScope.SetNameScope(switch2, nameScope);
		((INameScope)nameScope).RegisterName("_mon_enabled", (object)switch2);
		if (switch2.StyleId == null)
		{
			switch2.StyleId = "_mon_enabled";
		}
		NameScope.SetNameScope(stackLayout3, nameScope);
		NameScope.SetNameScope(label5, nameScope);
		((INameScope)nameScope).RegisterName("_tue_t", (object)label5);
		if (label5.StyleId == null)
		{
			label5.StyleId = "_tue_t";
		}
		NameScope.SetNameScope(switch3, nameScope);
		((INameScope)nameScope).RegisterName("_tue_enabled", (object)switch3);
		if (switch3.StyleId == null)
		{
			switch3.StyleId = "_tue_enabled";
		}
		NameScope.SetNameScope(stackLayout4, nameScope);
		NameScope.SetNameScope(label6, nameScope);
		((INameScope)nameScope).RegisterName("_wed_t", (object)label6);
		if (label6.StyleId == null)
		{
			label6.StyleId = "_wed_t";
		}
		NameScope.SetNameScope(switch4, nameScope);
		((INameScope)nameScope).RegisterName("_wed_enabled", (object)switch4);
		if (switch4.StyleId == null)
		{
			switch4.StyleId = "_wed_enabled";
		}
		NameScope.SetNameScope(stackLayout5, nameScope);
		NameScope.SetNameScope(label7, nameScope);
		((INameScope)nameScope).RegisterName("_thu_t", (object)label7);
		if (label7.StyleId == null)
		{
			label7.StyleId = "_thu_t";
		}
		NameScope.SetNameScope(switch5, nameScope);
		((INameScope)nameScope).RegisterName("_thu_enabled", (object)switch5);
		if (switch5.StyleId == null)
		{
			switch5.StyleId = "_thu_enabled";
		}
		NameScope.SetNameScope(stackLayout6, nameScope);
		NameScope.SetNameScope(label8, nameScope);
		((INameScope)nameScope).RegisterName("_fri_t", (object)label8);
		if (label8.StyleId == null)
		{
			label8.StyleId = "_fri_t";
		}
		NameScope.SetNameScope(switch6, nameScope);
		((INameScope)nameScope).RegisterName("_fri_enabled", (object)switch6);
		if (switch6.StyleId == null)
		{
			switch6.StyleId = "_fri_enabled";
		}
		NameScope.SetNameScope(stackLayout7, nameScope);
		NameScope.SetNameScope(label9, nameScope);
		((INameScope)nameScope).RegisterName("_sat_t", (object)label9);
		if (label9.StyleId == null)
		{
			label9.StyleId = "_sat_t";
		}
		NameScope.SetNameScope(switch7, nameScope);
		((INameScope)nameScope).RegisterName("_sat_enabled", (object)switch7);
		if (switch7.StyleId == null)
		{
			switch7.StyleId = "_sat_enabled";
		}
		NameScope.SetNameScope(stackLayout8, nameScope);
		NameScope.SetNameScope(label10, nameScope);
		((INameScope)nameScope).RegisterName("_sun_t", (object)label10);
		if (label10.StyleId == null)
		{
			label10.StyleId = "_sun_t";
		}
		NameScope.SetNameScope(switch8, nameScope);
		((INameScope)nameScope).RegisterName("_sun_enabled", (object)switch8);
		if (switch8.StyleId == null)
		{
			switch8.StyleId = "_sun_enabled";
		}
		NameScope.SetNameScope(stackLayout9, nameScope);
		NameScope.SetNameScope(label11, nameScope);
		((INameScope)nameScope).RegisterName("_wday_t", (object)label11);
		if (label11.StyleId == null)
		{
			label11.StyleId = "_wday_t";
		}
		NameScope.SetNameScope(switch9, nameScope);
		((INameScope)nameScope).RegisterName("_wday_enabled", (object)switch9);
		if (switch9.StyleId == null)
		{
			switch9.StyleId = "_wday_enabled";
		}
		NameScope.SetNameScope(stackLayout10, nameScope);
		NameScope.SetNameScope(label12, nameScope);
		((INameScope)nameScope).RegisterName("_wend_t", (object)label12);
		if (label12.StyleId == null)
		{
			label12.StyleId = "_wend_t";
		}
		NameScope.SetNameScope(switch10, nameScope);
		((INameScope)nameScope).RegisterName("_wend_enabled", (object)switch10);
		if (switch10.StyleId == null)
		{
			switch10.StyleId = "_wend_enabled";
		}
		NameScope.SetNameScope(blueButton, nameScope);
		((INameScope)nameScope).RegisterName("_done", (object)blueButton);
		if (blueButton.StyleId == null)
		{
			blueButton.StyleId = "_done";
		}
		_alarm_title = label;
		_enabled = @switch;
		_time = activ8TimePicker;
		_mon_t = label4;
		_mon_enabled = switch2;
		_tue_t = label5;
		_tue_enabled = switch3;
		_wed_t = label6;
		_wed_enabled = switch4;
		_thu_t = label7;
		_thu_enabled = switch5;
		_fri_t = label8;
		_fri_enabled = switch6;
		_sat_t = label9;
		_sat_enabled = switch7;
		_sun_t = label10;
		_sun_enabled = switch8;
		_wday_t = label11;
		_wday_enabled = switch9;
		_wend_t = label12;
		_wend_enabled = switch10;
		_done = blueButton;
		staticResourceExtension.Key = "PageBGColor";
		StaticResourceExtension staticResourceExtension16 = staticResourceExtension;
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 1];
		array[0] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, VisualElement.BackgroundColorProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(7, 9)));
		object obj = ((IMarkupExtension)staticResourceExtension16).ProvideValue((IServiceProvider)xamlServiceProvider);
		BackgroundColor = (Color)obj;
		stackLayout11.SetValue(Xamarin.Forms.Layout.PaddingProperty, pagePadding);
		stackLayout.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label13 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 4];
		array2[0] = label;
		array2[1] = stackLayout;
		array2[2] = stackLayout11;
		array2[3] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.FontSizeProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(11, 85)));
		label13.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider2));
		staticResourceExtension2.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension17 = staticResourceExtension2;
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 4];
		array3[0] = label;
		array3[1] = stackLayout;
		array3[2] = stackLayout11;
		array3[3] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, Label.TextColorProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(11, 99)));
		object obj2 = ((IMarkupExtension)staticResourceExtension17).ProvideValue((IServiceProvider)xamlServiceProvider3);
		label.TextColor = (Color)obj2;
		stackLayout.Children.Add(label);
		@switch.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		stackLayout.Children.Add(@switch);
		stackLayout11.Children.Add(stackLayout);
		label2.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Alarm Time");
		label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label14 = label2;
		BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
		Type typeFromHandle7 = typeof(IProvideValueTarget);
		object[] array4 = new object[0 + 3];
		array4[0] = label2;
		array4[1] = stackLayout11;
		array4[2] = this;
		xamlServiceProvider4.Add(typeFromHandle7, new SimpleValueTargetProvider(array4, Label.FontSizeProperty));
		xamlServiceProvider4.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle8 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
		xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver4.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver4.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(15, 96)));
		label14.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider4));
		staticResourceExtension3.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension18 = staticResourceExtension3;
		XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
		Type typeFromHandle9 = typeof(IProvideValueTarget);
		object[] array5 = new object[0 + 3];
		array5[0] = label2;
		array5[1] = stackLayout11;
		array5[2] = this;
		xamlServiceProvider5.Add(typeFromHandle9, new SimpleValueTargetProvider(array5, Label.TextColorProperty));
		xamlServiceProvider5.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle10 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
		xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver5.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver5.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(15, 110)));
		object obj3 = ((IMarkupExtension)staticResourceExtension18).ProvideValue((IServiceProvider)xamlServiceProvider5);
		label2.TextColor = (Color)obj3;
		label2.SetValue(View.MarginProperty, new Thickness(0.0, 10.0, 0.0, 0.0));
		stackLayout11.Children.Add(label2);
		activ8TimePicker.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension4.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension19 = staticResourceExtension4;
		XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
		Type typeFromHandle11 = typeof(IProvideValueTarget);
		object[] array6 = new object[0 + 3];
		array6[0] = activ8TimePicker;
		array6[1] = stackLayout11;
		array6[2] = this;
		xamlServiceProvider6.Add(typeFromHandle11, new SimpleValueTargetProvider(array6, TimePicker.TextColorProperty));
		xamlServiceProvider6.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle12 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
		xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver6.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver6.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(16, 74)));
		object obj4 = ((IMarkupExtension)staticResourceExtension19).ProvideValue((IServiceProvider)xamlServiceProvider6);
		activ8TimePicker.TextColor = (Color)obj4;
		staticResourceExtension5.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension20 = staticResourceExtension5;
		XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
		Type typeFromHandle13 = typeof(IProvideValueTarget);
		object[] array7 = new object[0 + 3];
		array7[0] = activ8TimePicker;
		array7[1] = stackLayout11;
		array7[2] = this;
		xamlServiceProvider7.Add(typeFromHandle13, new SimpleValueTargetProvider(array7, VisualElement.BackgroundColorProperty));
		xamlServiceProvider7.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle14 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
		xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver7.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver7.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(16, 121)));
		object obj5 = ((IMarkupExtension)staticResourceExtension20).ProvideValue((IServiceProvider)xamlServiceProvider7);
		activ8TimePicker.BackgroundColor = (Color)obj5;
		stackLayout11.Children.Add(activ8TimePicker);
		label3.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Alarm Repeat");
		label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label15 = label3;
		BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
		Type typeFromHandle15 = typeof(IProvideValueTarget);
		object[] array8 = new object[0 + 3];
		array8[0] = label3;
		array8[1] = stackLayout11;
		array8[2] = this;
		xamlServiceProvider8.Add(typeFromHandle15, new SimpleValueTargetProvider(array8, Label.FontSizeProperty));
		xamlServiceProvider8.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle16 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
		xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver8.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver8.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(18, 98)));
		label15.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider8));
		staticResourceExtension6.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension21 = staticResourceExtension6;
		XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
		Type typeFromHandle17 = typeof(IProvideValueTarget);
		object[] array9 = new object[0 + 3];
		array9[0] = label3;
		array9[1] = stackLayout11;
		array9[2] = this;
		xamlServiceProvider9.Add(typeFromHandle17, new SimpleValueTargetProvider(array9, Label.TextColorProperty));
		xamlServiceProvider9.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle18 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
		xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver9.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver9.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(18, 112)));
		object obj6 = ((IMarkupExtension)staticResourceExtension21).ProvideValue((IServiceProvider)xamlServiceProvider9);
		label3.TextColor = (Color)obj6;
		label3.SetValue(View.MarginProperty, new Thickness(0.0, 10.0, 0.0, 0.0));
		stackLayout11.Children.Add(label3);
		grid.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0, 0.0, 10.0, 0.0));
		rowDefinition.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition);
		rowDefinition2.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition2);
		rowDefinition3.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition3);
		rowDefinition4.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition4);
		rowDefinition5.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition5);
		rowDefinition6.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition6);
		rowDefinition7.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition7);
		columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
		columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
		((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
		stackLayout2.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout2.SetValue(Grid.RowProperty, 0);
		stackLayout2.SetValue(Grid.ColumnProperty, 0);
		label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label16 = label4;
		BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
		Type typeFromHandle19 = typeof(IProvideValueTarget);
		object[] array10 = new object[0 + 5];
		array10[0] = label4;
		array10[1] = stackLayout2;
		array10[2] = grid;
		array10[3] = stackLayout11;
		array10[4] = this;
		xamlServiceProvider10.Add(typeFromHandle19, new SimpleValueTargetProvider(array10, Label.FontSizeProperty));
		xamlServiceProvider10.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle20 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
		xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver10.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver10.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(36, 89)));
		label16.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider10));
		staticResourceExtension7.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension22 = staticResourceExtension7;
		XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
		Type typeFromHandle21 = typeof(IProvideValueTarget);
		object[] array11 = new object[0 + 5];
		array11[0] = label4;
		array11[1] = stackLayout2;
		array11[2] = grid;
		array11[3] = stackLayout11;
		array11[4] = this;
		xamlServiceProvider11.Add(typeFromHandle21, new SimpleValueTargetProvider(array11, Label.TextColorProperty));
		xamlServiceProvider11.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle22 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
		xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver11.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver11.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(36, 103)));
		object obj7 = ((IMarkupExtension)staticResourceExtension22).ProvideValue((IServiceProvider)xamlServiceProvider11);
		label4.TextColor = (Color)obj7;
		stackLayout2.Children.Add(label4);
		switch2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		stackLayout2.Children.Add(switch2);
		grid.Children.Add(stackLayout2);
		stackLayout3.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout3.SetValue(Grid.RowProperty, 1);
		stackLayout3.SetValue(Grid.ColumnProperty, 0);
		label5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label17 = label5;
		BindableProperty fontSizeProperty5 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
		Type typeFromHandle23 = typeof(IProvideValueTarget);
		object[] array12 = new object[0 + 5];
		array12[0] = label5;
		array12[1] = stackLayout3;
		array12[2] = grid;
		array12[3] = stackLayout11;
		array12[4] = this;
		xamlServiceProvider12.Add(typeFromHandle23, new SimpleValueTargetProvider(array12, Label.FontSizeProperty));
		xamlServiceProvider12.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle24 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
		xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver12.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver12.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(41, 89)));
		label17.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider12));
		staticResourceExtension8.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension23 = staticResourceExtension8;
		XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
		Type typeFromHandle25 = typeof(IProvideValueTarget);
		object[] array13 = new object[0 + 5];
		array13[0] = label5;
		array13[1] = stackLayout3;
		array13[2] = grid;
		array13[3] = stackLayout11;
		array13[4] = this;
		xamlServiceProvider13.Add(typeFromHandle25, new SimpleValueTargetProvider(array13, Label.TextColorProperty));
		xamlServiceProvider13.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle26 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
		xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver13.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver13.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(41, 103)));
		object obj8 = ((IMarkupExtension)staticResourceExtension23).ProvideValue((IServiceProvider)xamlServiceProvider13);
		label5.TextColor = (Color)obj8;
		stackLayout3.Children.Add(label5);
		switch3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		stackLayout3.Children.Add(switch3);
		grid.Children.Add(stackLayout3);
		stackLayout4.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout4.SetValue(Grid.RowProperty, 2);
		stackLayout4.SetValue(Grid.ColumnProperty, 0);
		label6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label6.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label18 = label6;
		BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
		Type typeFromHandle27 = typeof(IProvideValueTarget);
		object[] array14 = new object[0 + 5];
		array14[0] = label6;
		array14[1] = stackLayout4;
		array14[2] = grid;
		array14[3] = stackLayout11;
		array14[4] = this;
		xamlServiceProvider14.Add(typeFromHandle27, new SimpleValueTargetProvider(array14, Label.FontSizeProperty));
		xamlServiceProvider14.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle28 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
		xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver14.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver14.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(46, 89)));
		label18.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider14));
		staticResourceExtension9.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension24 = staticResourceExtension9;
		XamlServiceProvider xamlServiceProvider15 = new XamlServiceProvider();
		Type typeFromHandle29 = typeof(IProvideValueTarget);
		object[] array15 = new object[0 + 5];
		array15[0] = label6;
		array15[1] = stackLayout4;
		array15[2] = grid;
		array15[3] = stackLayout11;
		array15[4] = this;
		xamlServiceProvider15.Add(typeFromHandle29, new SimpleValueTargetProvider(array15, Label.TextColorProperty));
		xamlServiceProvider15.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle30 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver15 = new XmlNamespaceResolver();
		xmlNamespaceResolver15.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver15.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver15.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver15.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider15.Add(typeFromHandle30, new XamlTypeResolver(xmlNamespaceResolver15, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider15.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(46, 103)));
		object obj9 = ((IMarkupExtension)staticResourceExtension24).ProvideValue((IServiceProvider)xamlServiceProvider15);
		label6.TextColor = (Color)obj9;
		stackLayout4.Children.Add(label6);
		switch4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		stackLayout4.Children.Add(switch4);
		grid.Children.Add(stackLayout4);
		stackLayout5.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout5.SetValue(Grid.RowProperty, 3);
		stackLayout5.SetValue(Grid.ColumnProperty, 0);
		label7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label7.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label19 = label7;
		BindableProperty fontSizeProperty7 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider16 = new XamlServiceProvider();
		Type typeFromHandle31 = typeof(IProvideValueTarget);
		object[] array16 = new object[0 + 5];
		array16[0] = label7;
		array16[1] = stackLayout5;
		array16[2] = grid;
		array16[3] = stackLayout11;
		array16[4] = this;
		xamlServiceProvider16.Add(typeFromHandle31, new SimpleValueTargetProvider(array16, Label.FontSizeProperty));
		xamlServiceProvider16.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle32 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver16 = new XmlNamespaceResolver();
		xmlNamespaceResolver16.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver16.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver16.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver16.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider16.Add(typeFromHandle32, new XamlTypeResolver(xmlNamespaceResolver16, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider16.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(51, 89)));
		label19.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider16));
		staticResourceExtension10.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension25 = staticResourceExtension10;
		XamlServiceProvider xamlServiceProvider17 = new XamlServiceProvider();
		Type typeFromHandle33 = typeof(IProvideValueTarget);
		object[] array17 = new object[0 + 5];
		array17[0] = label7;
		array17[1] = stackLayout5;
		array17[2] = grid;
		array17[3] = stackLayout11;
		array17[4] = this;
		xamlServiceProvider17.Add(typeFromHandle33, new SimpleValueTargetProvider(array17, Label.TextColorProperty));
		xamlServiceProvider17.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle34 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver17 = new XmlNamespaceResolver();
		xmlNamespaceResolver17.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver17.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver17.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver17.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider17.Add(typeFromHandle34, new XamlTypeResolver(xmlNamespaceResolver17, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider17.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(51, 103)));
		object obj10 = ((IMarkupExtension)staticResourceExtension25).ProvideValue((IServiceProvider)xamlServiceProvider17);
		label7.TextColor = (Color)obj10;
		stackLayout5.Children.Add(label7);
		switch5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		stackLayout5.Children.Add(switch5);
		grid.Children.Add(stackLayout5);
		stackLayout6.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout6.SetValue(Grid.RowProperty, 4);
		stackLayout6.SetValue(Grid.ColumnProperty, 0);
		label8.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label8.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label20 = label8;
		BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider18 = new XamlServiceProvider();
		Type typeFromHandle35 = typeof(IProvideValueTarget);
		object[] array18 = new object[0 + 5];
		array18[0] = label8;
		array18[1] = stackLayout6;
		array18[2] = grid;
		array18[3] = stackLayout11;
		array18[4] = this;
		xamlServiceProvider18.Add(typeFromHandle35, new SimpleValueTargetProvider(array18, Label.FontSizeProperty));
		xamlServiceProvider18.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle36 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver18 = new XmlNamespaceResolver();
		xmlNamespaceResolver18.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver18.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver18.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver18.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider18.Add(typeFromHandle36, new XamlTypeResolver(xmlNamespaceResolver18, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider18.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(56, 89)));
		label20.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider18));
		staticResourceExtension11.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension26 = staticResourceExtension11;
		XamlServiceProvider xamlServiceProvider19 = new XamlServiceProvider();
		Type typeFromHandle37 = typeof(IProvideValueTarget);
		object[] array19 = new object[0 + 5];
		array19[0] = label8;
		array19[1] = stackLayout6;
		array19[2] = grid;
		array19[3] = stackLayout11;
		array19[4] = this;
		xamlServiceProvider19.Add(typeFromHandle37, new SimpleValueTargetProvider(array19, Label.TextColorProperty));
		xamlServiceProvider19.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle38 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver19 = new XmlNamespaceResolver();
		xmlNamespaceResolver19.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver19.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver19.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver19.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider19.Add(typeFromHandle38, new XamlTypeResolver(xmlNamespaceResolver19, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider19.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(56, 103)));
		object obj11 = ((IMarkupExtension)staticResourceExtension26).ProvideValue((IServiceProvider)xamlServiceProvider19);
		label8.TextColor = (Color)obj11;
		stackLayout6.Children.Add(label8);
		switch6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		stackLayout6.Children.Add(switch6);
		grid.Children.Add(stackLayout6);
		stackLayout7.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout7.SetValue(Grid.RowProperty, 5);
		stackLayout7.SetValue(Grid.ColumnProperty, 0);
		label9.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label9.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label21 = label9;
		BindableProperty fontSizeProperty9 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter9 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider20 = new XamlServiceProvider();
		Type typeFromHandle39 = typeof(IProvideValueTarget);
		object[] array20 = new object[0 + 5];
		array20[0] = label9;
		array20[1] = stackLayout7;
		array20[2] = grid;
		array20[3] = stackLayout11;
		array20[4] = this;
		xamlServiceProvider20.Add(typeFromHandle39, new SimpleValueTargetProvider(array20, Label.FontSizeProperty));
		xamlServiceProvider20.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle40 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver20 = new XmlNamespaceResolver();
		xmlNamespaceResolver20.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver20.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver20.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver20.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider20.Add(typeFromHandle40, new XamlTypeResolver(xmlNamespaceResolver20, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider20.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(61, 89)));
		label21.SetValue(fontSizeProperty9, ((IExtendedTypeConverter)fontSizeConverter9).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider20));
		staticResourceExtension12.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension27 = staticResourceExtension12;
		XamlServiceProvider xamlServiceProvider21 = new XamlServiceProvider();
		Type typeFromHandle41 = typeof(IProvideValueTarget);
		object[] array21 = new object[0 + 5];
		array21[0] = label9;
		array21[1] = stackLayout7;
		array21[2] = grid;
		array21[3] = stackLayout11;
		array21[4] = this;
		xamlServiceProvider21.Add(typeFromHandle41, new SimpleValueTargetProvider(array21, Label.TextColorProperty));
		xamlServiceProvider21.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle42 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver21 = new XmlNamespaceResolver();
		xmlNamespaceResolver21.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver21.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver21.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver21.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider21.Add(typeFromHandle42, new XamlTypeResolver(xmlNamespaceResolver21, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider21.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(61, 103)));
		object obj12 = ((IMarkupExtension)staticResourceExtension27).ProvideValue((IServiceProvider)xamlServiceProvider21);
		label9.TextColor = (Color)obj12;
		stackLayout7.Children.Add(label9);
		switch7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		stackLayout7.Children.Add(switch7);
		grid.Children.Add(stackLayout7);
		stackLayout8.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout8.SetValue(Grid.RowProperty, 6);
		stackLayout8.SetValue(Grid.ColumnProperty, 0);
		label10.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label10.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label22 = label10;
		BindableProperty fontSizeProperty10 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter10 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider22 = new XamlServiceProvider();
		Type typeFromHandle43 = typeof(IProvideValueTarget);
		object[] array22 = new object[0 + 5];
		array22[0] = label10;
		array22[1] = stackLayout8;
		array22[2] = grid;
		array22[3] = stackLayout11;
		array22[4] = this;
		xamlServiceProvider22.Add(typeFromHandle43, new SimpleValueTargetProvider(array22, Label.FontSizeProperty));
		xamlServiceProvider22.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle44 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver22 = new XmlNamespaceResolver();
		xmlNamespaceResolver22.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver22.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver22.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver22.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider22.Add(typeFromHandle44, new XamlTypeResolver(xmlNamespaceResolver22, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider22.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(66, 89)));
		label22.SetValue(fontSizeProperty10, ((IExtendedTypeConverter)fontSizeConverter10).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider22));
		staticResourceExtension13.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension28 = staticResourceExtension13;
		XamlServiceProvider xamlServiceProvider23 = new XamlServiceProvider();
		Type typeFromHandle45 = typeof(IProvideValueTarget);
		object[] array23 = new object[0 + 5];
		array23[0] = label10;
		array23[1] = stackLayout8;
		array23[2] = grid;
		array23[3] = stackLayout11;
		array23[4] = this;
		xamlServiceProvider23.Add(typeFromHandle45, new SimpleValueTargetProvider(array23, Label.TextColorProperty));
		xamlServiceProvider23.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle46 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver23 = new XmlNamespaceResolver();
		xmlNamespaceResolver23.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver23.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver23.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver23.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider23.Add(typeFromHandle46, new XamlTypeResolver(xmlNamespaceResolver23, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider23.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(66, 103)));
		object obj13 = ((IMarkupExtension)staticResourceExtension28).ProvideValue((IServiceProvider)xamlServiceProvider23);
		label10.TextColor = (Color)obj13;
		stackLayout8.Children.Add(label10);
		switch8.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		stackLayout8.Children.Add(switch8);
		grid.Children.Add(stackLayout8);
		stackLayout9.SetValue(StackLayout.OrientationProperty, StackOrientation.Vertical);
		stackLayout9.SetValue(View.VerticalOptionsProperty, LayoutOptions.CenterAndExpand);
		stackLayout9.SetValue(Grid.RowProperty, 0);
		stackLayout9.SetValue(Grid.ColumnProperty, 1);
		stackLayout9.SetValue(Grid.RowSpanProperty, 5);
		label11.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
		label11.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label23 = label11;
		BindableProperty fontSizeProperty11 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter11 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider24 = new XamlServiceProvider();
		Type typeFromHandle47 = typeof(IProvideValueTarget);
		object[] array24 = new object[0 + 5];
		array24[0] = label11;
		array24[1] = stackLayout9;
		array24[2] = grid;
		array24[3] = stackLayout11;
		array24[4] = this;
		xamlServiceProvider24.Add(typeFromHandle47, new SimpleValueTargetProvider(array24, Label.FontSizeProperty));
		xamlServiceProvider24.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle48 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver24 = new XmlNamespaceResolver();
		xmlNamespaceResolver24.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver24.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver24.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver24.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider24.Add(typeFromHandle48, new XamlTypeResolver(xmlNamespaceResolver24, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider24.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(71, 82)));
		label23.SetValue(fontSizeProperty11, ((IExtendedTypeConverter)fontSizeConverter11).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider24));
		staticResourceExtension14.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension29 = staticResourceExtension14;
		XamlServiceProvider xamlServiceProvider25 = new XamlServiceProvider();
		Type typeFromHandle49 = typeof(IProvideValueTarget);
		object[] array25 = new object[0 + 5];
		array25[0] = label11;
		array25[1] = stackLayout9;
		array25[2] = grid;
		array25[3] = stackLayout11;
		array25[4] = this;
		xamlServiceProvider25.Add(typeFromHandle49, new SimpleValueTargetProvider(array25, Label.TextColorProperty));
		xamlServiceProvider25.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle50 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver25 = new XmlNamespaceResolver();
		xmlNamespaceResolver25.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver25.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver25.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver25.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider25.Add(typeFromHandle50, new XamlTypeResolver(xmlNamespaceResolver25, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider25.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(71, 96)));
		object obj14 = ((IMarkupExtension)staticResourceExtension29).ProvideValue((IServiceProvider)xamlServiceProvider25);
		label11.TextColor = (Color)obj14;
		stackLayout9.Children.Add(label11);
		switch9.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
		stackLayout9.Children.Add(switch9);
		grid.Children.Add(stackLayout9);
		stackLayout10.SetValue(StackLayout.OrientationProperty, StackOrientation.Vertical);
		stackLayout10.SetValue(View.VerticalOptionsProperty, LayoutOptions.CenterAndExpand);
		stackLayout10.SetValue(Grid.RowProperty, 5);
		stackLayout10.SetValue(Grid.ColumnProperty, 1);
		stackLayout10.SetValue(Grid.RowSpanProperty, 2);
		label12.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
		label12.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label24 = label12;
		BindableProperty fontSizeProperty12 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter12 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider26 = new XamlServiceProvider();
		Type typeFromHandle51 = typeof(IProvideValueTarget);
		object[] array26 = new object[0 + 5];
		array26[0] = label12;
		array26[1] = stackLayout10;
		array26[2] = grid;
		array26[3] = stackLayout11;
		array26[4] = this;
		xamlServiceProvider26.Add(typeFromHandle51, new SimpleValueTargetProvider(array26, Label.FontSizeProperty));
		xamlServiceProvider26.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle52 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver26 = new XmlNamespaceResolver();
		xmlNamespaceResolver26.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver26.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver26.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver26.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider26.Add(typeFromHandle52, new XamlTypeResolver(xmlNamespaceResolver26, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider26.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(76, 82)));
		label24.SetValue(fontSizeProperty12, ((IExtendedTypeConverter)fontSizeConverter12).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider26));
		staticResourceExtension15.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension30 = staticResourceExtension15;
		XamlServiceProvider xamlServiceProvider27 = new XamlServiceProvider();
		Type typeFromHandle53 = typeof(IProvideValueTarget);
		object[] array27 = new object[0 + 5];
		array27[0] = label12;
		array27[1] = stackLayout10;
		array27[2] = grid;
		array27[3] = stackLayout11;
		array27[4] = this;
		xamlServiceProvider27.Add(typeFromHandle53, new SimpleValueTargetProvider(array27, Label.TextColorProperty));
		xamlServiceProvider27.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle54 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver27 = new XmlNamespaceResolver();
		xmlNamespaceResolver27.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver27.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver27.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver27.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider27.Add(typeFromHandle54, new XamlTypeResolver(xmlNamespaceResolver27, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider27.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(76, 96)));
		object obj15 = ((IMarkupExtension)staticResourceExtension30).ProvideValue((IServiceProvider)xamlServiceProvider27);
		label12.TextColor = (Color)obj15;
		stackLayout10.Children.Add(label12);
		switch10.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Center);
		stackLayout10.Children.Add(switch10);
		grid.Children.Add(stackLayout10);
		stackLayout11.Children.Add(grid);
		blueButton.SetValue(Button.TextProperty, "Done");
		blueButton.SetValue(View.VerticalOptionsProperty, LayoutOptions.EndAndExpand);
		BlueButton blueButton2 = blueButton;
		BindableProperty fontSizeProperty13 = Button.FontSizeProperty;
		FontSizeConverter fontSizeConverter13 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider28 = new XamlServiceProvider();
		Type typeFromHandle55 = typeof(IProvideValueTarget);
		object[] array28 = new object[0 + 3];
		array28[0] = blueButton;
		array28[1] = stackLayout11;
		array28[2] = this;
		xamlServiceProvider28.Add(typeFromHandle55, new SimpleValueTargetProvider(array28, Button.FontSizeProperty));
		xamlServiceProvider28.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle56 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver28 = new XmlNamespaceResolver();
		xmlNamespaceResolver28.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver28.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver28.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xmlNamespaceResolver28.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xamlServiceProvider28.Add(typeFromHandle56, new XamlTypeResolver(xmlNamespaceResolver28, typeof(BuddyBand2Settings_AlarmView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider28.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(81, 77)));
		blueButton2.SetValue(fontSizeProperty13, ((IExtendedTypeConverter)fontSizeConverter13).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider28));
		stackLayout11.Children.Add(blueButton);
		SetValue(ContentView.ContentProperty, stackLayout11);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BuddyBand2Settings_AlarmView));
		_alarm_title = this.FindByName<Label>("_alarm_title");
		_enabled = this.FindByName<Switch>("_enabled");
		_time = this.FindByName<Activ8TimePicker>("_time");
		_mon_t = this.FindByName<Label>("_mon_t");
		_mon_enabled = this.FindByName<Switch>("_mon_enabled");
		_tue_t = this.FindByName<Label>("_tue_t");
		_tue_enabled = this.FindByName<Switch>("_tue_enabled");
		_wed_t = this.FindByName<Label>("_wed_t");
		_wed_enabled = this.FindByName<Switch>("_wed_enabled");
		_thu_t = this.FindByName<Label>("_thu_t");
		_thu_enabled = this.FindByName<Switch>("_thu_enabled");
		_fri_t = this.FindByName<Label>("_fri_t");
		_fri_enabled = this.FindByName<Switch>("_fri_enabled");
		_sat_t = this.FindByName<Label>("_sat_t");
		_sat_enabled = this.FindByName<Switch>("_sat_enabled");
		_sun_t = this.FindByName<Label>("_sun_t");
		_sun_enabled = this.FindByName<Switch>("_sun_enabled");
		_wday_t = this.FindByName<Label>("_wday_t");
		_wday_enabled = this.FindByName<Switch>("_wday_enabled");
		_wend_t = this.FindByName<Label>("_wend_t");
		_wend_enabled = this.FindByName<Switch>("_wend_enabled");
		_done = this.FindByName<BlueButton>("_done");
	}
}

// Activ8rlives.BuddyBand2Settings_Firmware
using Activ8rlives;
using System;
using System.CodeDom.Compiler;
using System.Reflection;
using Vernacular;
using Vernacular.Xaml;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Modules/BuddyBand2/BuddyBand2Settings_Firmware.xaml")]
public class BuddyBand2Settings_Firmware : ContentView
{
	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _isupgrade;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _isdowngrade;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _version;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _changelog;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _upgrade;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private PinkButton _skip;

	public string Title => Vernacular.Catalog.GetString("Firmware Upgrade");

	public BuddyBand2Settings_Firmware(int current_version, FirmwareVersion new_version, Action skip_action, Action ok_action)
	{
		base.Resources = Theme.GetResourceDictionary();
		InitializeComponent();
		_version.Text = string.Format("Your BuddyBand2 is currently on version {0}.\n\nThe latest version is {1}", new object[2]
		{
			current_version,
			new_version.Code
		});
		_changelog.Text = new_version.Summary;
		_isdowngrade.IsVisible = (new_version.Code < current_version);
		_isupgrade.IsVisible = !_isdowngrade.IsVisible;
		_skip.Clicked += delegate
		{
			skip_action();
		};
		_upgrade.Clicked += delegate
		{
			ok_action();
		};
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly().GetName(), "Modules/BuddyBand2/BuddyBand2Settings_Firmware.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		StaticResourceExtension staticResourceExtension = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension2 = new StaticResourceExtension();
		Label label = new Label();
		StaticResourceExtension staticResourceExtension3 = new StaticResourceExtension();
		Label label2 = new Label();
		StaticResourceExtension staticResourceExtension4 = new StaticResourceExtension();
		Label label3 = new Label();
		StaticResourceExtension staticResourceExtension5 = new StaticResourceExtension();
		Label label4 = new Label();
		StaticResourceExtension staticResourceExtension6 = new StaticResourceExtension();
		Label label5 = new Label();
		StaticResourceExtension staticResourceExtension7 = new StaticResourceExtension();
		Label label6 = new Label();
		StaticResourceExtension staticResourceExtension8 = new StaticResourceExtension();
		Label label7 = new Label();
		StaticResourceExtension staticResourceExtension9 = new StaticResourceExtension();
		Label label8 = new Label();
		BlueButton blueButton = new BlueButton();
		PinkButton pinkButton = new PinkButton();
		StackLayout stackLayout = new StackLayout();
		ScrollView scrollView = new ScrollView();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(scrollView, nameScope);
		NameScope.SetNameScope(stackLayout, nameScope);
		NameScope.SetNameScope(label, nameScope);
		NameScope.SetNameScope(label2, nameScope);
		((INameScope)nameScope).RegisterName("_isupgrade", (object)label2);
		if (label2.StyleId == null)
		{
			label2.StyleId = "_isupgrade";
		}
		NameScope.SetNameScope(label3, nameScope);
		((INameScope)nameScope).RegisterName("_isdowngrade", (object)label3);
		if (label3.StyleId == null)
		{
			label3.StyleId = "_isdowngrade";
		}
		NameScope.SetNameScope(label4, nameScope);
		NameScope.SetNameScope(label5, nameScope);
		NameScope.SetNameScope(label6, nameScope);
		((INameScope)nameScope).RegisterName("_version", (object)label6);
		if (label6.StyleId == null)
		{
			label6.StyleId = "_version";
		}
		NameScope.SetNameScope(label7, nameScope);
		NameScope.SetNameScope(label8, nameScope);
		((INameScope)nameScope).RegisterName("_changelog", (object)label8);
		if (label8.StyleId == null)
		{
			label8.StyleId = "_changelog";
		}
		NameScope.SetNameScope(blueButton, nameScope);
		((INameScope)nameScope).RegisterName("_upgrade", (object)blueButton);
		if (blueButton.StyleId == null)
		{
			blueButton.StyleId = "_upgrade";
		}
		NameScope.SetNameScope(pinkButton, nameScope);
		((INameScope)nameScope).RegisterName("_skip", (object)pinkButton);
		if (pinkButton.StyleId == null)
		{
			pinkButton.StyleId = "_skip";
		}
		_isupgrade = label2;
		_isdowngrade = label3;
		_version = label6;
		_changelog = label8;
		_upgrade = blueButton;
		_skip = pinkButton;
		SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0, 10.0, 10.0, 0.0));
		staticResourceExtension.Key = "PageBGColor";
		StaticResourceExtension staticResourceExtension10 = staticResourceExtension;
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 1];
		array[0] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, VisualElement.BackgroundColorProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(7, 9)));
		object obj = ((IMarkupExtension)staticResourceExtension10).ProvideValue((IServiceProvider)xamlServiceProvider);
		BackgroundColor = (Color)obj;
		label.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "BuddyBand2 Firmware Upgrade");
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label9 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 4];
		array2[0] = label;
		array2[1] = stackLayout;
		array2[2] = scrollView;
		array2[3] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.FontSizeProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(11, 114)));
		label9.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider2));
		staticResourceExtension2.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension11 = staticResourceExtension2;
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 4];
		array3[0] = label;
		array3[1] = stackLayout;
		array3[2] = scrollView;
		array3[3] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, Label.TextColorProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(11, 128)));
		object obj2 = ((IMarkupExtension)staticResourceExtension11).ProvideValue((IServiceProvider)xamlServiceProvider3);
		label.TextColor = (Color)obj2;
		stackLayout.Children.Add(label);
		label2.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "An upgrade is available for the firmware on your BuddyBand2.");
		label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label2.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label10 = label2;
		BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
		Type typeFromHandle7 = typeof(IProvideValueTarget);
		object[] array4 = new object[0 + 4];
		array4[0] = label2;
		array4[1] = stackLayout;
		array4[2] = scrollView;
		array4[3] = this;
		xamlServiceProvider4.Add(typeFromHandle7, new SimpleValueTargetProvider(array4, Label.FontSizeProperty));
		xamlServiceProvider4.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle8 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
		xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver4.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver4.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(12, 168)));
		label10.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider4));
		staticResourceExtension3.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension12 = staticResourceExtension3;
		XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
		Type typeFromHandle9 = typeof(IProvideValueTarget);
		object[] array5 = new object[0 + 4];
		array5[0] = label2;
		array5[1] = stackLayout;
		array5[2] = scrollView;
		array5[3] = this;
		xamlServiceProvider5.Add(typeFromHandle9, new SimpleValueTargetProvider(array5, Label.TextColorProperty));
		xamlServiceProvider5.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle10 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
		xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver5.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver5.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(12, 182)));
		object obj3 = ((IMarkupExtension)staticResourceExtension12).ProvideValue((IServiceProvider)xamlServiceProvider5);
		label2.TextColor = (Color)obj3;
		stackLayout.Children.Add(label2);
		label3.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "You can return your BuddyBand2 to the release firmware.");
		label3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label3.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label11 = label3;
		BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
		Type typeFromHandle11 = typeof(IProvideValueTarget);
		object[] array6 = new object[0 + 4];
		array6[0] = label3;
		array6[1] = stackLayout;
		array6[2] = scrollView;
		array6[3] = this;
		xamlServiceProvider6.Add(typeFromHandle11, new SimpleValueTargetProvider(array6, Label.FontSizeProperty));
		xamlServiceProvider6.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle12 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
		xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver6.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver6.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(13, 164)));
		label11.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider6));
		staticResourceExtension4.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension13 = staticResourceExtension4;
		XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
		Type typeFromHandle13 = typeof(IProvideValueTarget);
		object[] array7 = new object[0 + 4];
		array7[0] = label3;
		array7[1] = stackLayout;
		array7[2] = scrollView;
		array7[3] = this;
		xamlServiceProvider7.Add(typeFromHandle13, new SimpleValueTargetProvider(array7, Label.TextColorProperty));
		xamlServiceProvider7.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle14 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
		xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver7.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver7.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(13, 178)));
		object obj4 = ((IMarkupExtension)staticResourceExtension13).ProvideValue((IServiceProvider)xamlServiceProvider7);
		label3.TextColor = (Color)obj4;
		stackLayout.Children.Add(label3);
		label4.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Please follow the instructions below to complete the installation");
		label4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label4.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label12 = label4;
		BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
		Type typeFromHandle15 = typeof(IProvideValueTarget);
		object[] array8 = new object[0 + 4];
		array8[0] = label4;
		array8[1] = stackLayout;
		array8[2] = scrollView;
		array8[3] = this;
		xamlServiceProvider8.Add(typeFromHandle15, new SimpleValueTargetProvider(array8, Label.FontSizeProperty));
		xamlServiceProvider8.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle16 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
		xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver8.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver8.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(14, 152)));
		label12.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider8));
		staticResourceExtension5.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension14 = staticResourceExtension5;
		XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
		Type typeFromHandle17 = typeof(IProvideValueTarget);
		object[] array9 = new object[0 + 4];
		array9[0] = label4;
		array9[1] = stackLayout;
		array9[2] = scrollView;
		array9[3] = this;
		xamlServiceProvider9.Add(typeFromHandle17, new SimpleValueTargetProvider(array9, Label.TextColorProperty));
		xamlServiceProvider9.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle18 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
		xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver9.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver9.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(14, 166)));
		object obj5 = ((IMarkupExtension)staticResourceExtension14).ProvideValue((IServiceProvider)xamlServiceProvider9);
		label4.TextColor = (Color)obj5;
		stackLayout.Children.Add(label4);
		label5.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Firmware Version");
		label5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label5.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label13 = label5;
		BindableProperty fontSizeProperty5 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
		Type typeFromHandle19 = typeof(IProvideValueTarget);
		object[] array10 = new object[0 + 4];
		array10[0] = label5;
		array10[1] = stackLayout;
		array10[2] = scrollView;
		array10[3] = this;
		xamlServiceProvider10.Add(typeFromHandle19, new SimpleValueTargetProvider(array10, Label.FontSizeProperty));
		xamlServiceProvider10.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle20 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
		xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver10.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver10.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(16, 103)));
		label13.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider10));
		staticResourceExtension6.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension15 = staticResourceExtension6;
		XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
		Type typeFromHandle21 = typeof(IProvideValueTarget);
		object[] array11 = new object[0 + 4];
		array11[0] = label5;
		array11[1] = stackLayout;
		array11[2] = scrollView;
		array11[3] = this;
		xamlServiceProvider11.Add(typeFromHandle21, new SimpleValueTargetProvider(array11, Label.TextColorProperty));
		xamlServiceProvider11.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle22 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
		xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver11.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver11.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(16, 117)));
		object obj6 = ((IMarkupExtension)staticResourceExtension15).ProvideValue((IServiceProvider)xamlServiceProvider11);
		label5.TextColor = (Color)obj6;
		label5.SetValue(View.MarginProperty, new Thickness(0.0, 20.0, 0.0, 0.0));
		stackLayout.Children.Add(label5);
		label6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label6.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label14 = label6;
		BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
		Type typeFromHandle23 = typeof(IProvideValueTarget);
		object[] array12 = new object[0 + 4];
		array12[0] = label6;
		array12[1] = stackLayout;
		array12[2] = scrollView;
		array12[3] = this;
		xamlServiceProvider12.Add(typeFromHandle23, new SimpleValueTargetProvider(array12, Label.FontSizeProperty));
		xamlServiceProvider12.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle24 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
		xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver12.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver12.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(17, 81)));
		label14.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider12));
		staticResourceExtension7.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension16 = staticResourceExtension7;
		XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
		Type typeFromHandle25 = typeof(IProvideValueTarget);
		object[] array13 = new object[0 + 4];
		array13[0] = label6;
		array13[1] = stackLayout;
		array13[2] = scrollView;
		array13[3] = this;
		xamlServiceProvider13.Add(typeFromHandle25, new SimpleValueTargetProvider(array13, Label.TextColorProperty));
		xamlServiceProvider13.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle26 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
		xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver13.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver13.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(17, 95)));
		object obj7 = ((IMarkupExtension)staticResourceExtension16).ProvideValue((IServiceProvider)xamlServiceProvider13);
		label6.TextColor = (Color)obj7;
		stackLayout.Children.Add(label6);
		label7.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Changelog");
		label7.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label7.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label15 = label7;
		BindableProperty fontSizeProperty7 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
		Type typeFromHandle27 = typeof(IProvideValueTarget);
		object[] array14 = new object[0 + 4];
		array14[0] = label7;
		array14[1] = stackLayout;
		array14[2] = scrollView;
		array14[3] = this;
		xamlServiceProvider14.Add(typeFromHandle27, new SimpleValueTargetProvider(array14, Label.FontSizeProperty));
		xamlServiceProvider14.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle28 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
		xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver14.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver14.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(19, 96)));
		label15.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider14));
		staticResourceExtension8.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension17 = staticResourceExtension8;
		XamlServiceProvider xamlServiceProvider15 = new XamlServiceProvider();
		Type typeFromHandle29 = typeof(IProvideValueTarget);
		object[] array15 = new object[0 + 4];
		array15[0] = label7;
		array15[1] = stackLayout;
		array15[2] = scrollView;
		array15[3] = this;
		xamlServiceProvider15.Add(typeFromHandle29, new SimpleValueTargetProvider(array15, Label.TextColorProperty));
		xamlServiceProvider15.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle30 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver15 = new XmlNamespaceResolver();
		xmlNamespaceResolver15.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver15.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver15.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver15.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider15.Add(typeFromHandle30, new XamlTypeResolver(xmlNamespaceResolver15, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider15.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(19, 110)));
		object obj8 = ((IMarkupExtension)staticResourceExtension17).ProvideValue((IServiceProvider)xamlServiceProvider15);
		label7.TextColor = (Color)obj8;
		label7.SetValue(View.MarginProperty, new Thickness(0.0, 20.0, 0.0, 0.0));
		stackLayout.Children.Add(label7);
		label8.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label8.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label16 = label8;
		BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider16 = new XamlServiceProvider();
		Type typeFromHandle31 = typeof(IProvideValueTarget);
		object[] array16 = new object[0 + 4];
		array16[0] = label8;
		array16[1] = stackLayout;
		array16[2] = scrollView;
		array16[3] = this;
		xamlServiceProvider16.Add(typeFromHandle31, new SimpleValueTargetProvider(array16, Label.FontSizeProperty));
		xamlServiceProvider16.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle32 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver16 = new XmlNamespaceResolver();
		xmlNamespaceResolver16.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver16.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver16.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver16.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider16.Add(typeFromHandle32, new XamlTypeResolver(xmlNamespaceResolver16, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider16.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(20, 83)));
		label16.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider16));
		staticResourceExtension9.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension18 = staticResourceExtension9;
		XamlServiceProvider xamlServiceProvider17 = new XamlServiceProvider();
		Type typeFromHandle33 = typeof(IProvideValueTarget);
		object[] array17 = new object[0 + 4];
		array17[0] = label8;
		array17[1] = stackLayout;
		array17[2] = scrollView;
		array17[3] = this;
		xamlServiceProvider17.Add(typeFromHandle33, new SimpleValueTargetProvider(array17, Label.TextColorProperty));
		xamlServiceProvider17.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle34 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver17 = new XmlNamespaceResolver();
		xmlNamespaceResolver17.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver17.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver17.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver17.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider17.Add(typeFromHandle34, new XamlTypeResolver(xmlNamespaceResolver17, typeof(BuddyBand2Settings_Firmware).GetTypeInfo().get_Assembly()));
		xamlServiceProvider17.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(20, 97)));
		object obj9 = ((IMarkupExtension)staticResourceExtension18).ProvideValue((IServiceProvider)xamlServiceProvider17);
		label8.TextColor = (Color)obj9;
		stackLayout.Children.Add(label8);
		blueButton.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Upgrade Now");
		blueButton.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		blueButton.SetValue(View.MarginProperty, new Thickness(0.0, 20.0, 0.0, 0.0));
		stackLayout.Children.Add(blueButton);
		pinkButton.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Do This Later");
		pinkButton.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout.Children.Add(pinkButton);
		scrollView.Content = stackLayout;
		SetValue(ContentView.ContentProperty, scrollView);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BuddyBand2Settings_Firmware));
		_isupgrade = this.FindByName<Label>("_isupgrade");
		_isdowngrade = this.FindByName<Label>("_isdowngrade");
		_version = this.FindByName<Label>("_version");
		_changelog = this.FindByName<Label>("_changelog");
		_upgrade = this.FindByName<BlueButton>("_upgrade");
		_skip = this.FindByName<PinkButton>("_skip");
	}
}

// Activ8rlives.BuddyBand2SettingsView
using Activ8rlives;
using Activ8rlivesBase;
using NGraphics;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Reflection;
using System.Threading.Tasks;
using Vernacular;
using Vernacular.Xaml;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Internals;

[XamlFilePath("Modules/BuddyBand2/BuddyBand2SettingsView.xaml")]
public class BuddyBand2SettingsView : ContentView, IBB2StatusSubscriber, IBB2VersionSubscriber, IParamSubscriber
{
	public static ushort DBLTAP_FAST = 15;

	public static ushort DBLTAP_MED = 25;

	public static ushort DBLTAP_SLOW = 40;

	public static int BB2_MIN_UPGRADE_BATTERY = 3;

	public static int IncomingCallMask = (1 << BuddyBand2Constants.NOTIFICATION_IncomingCall) | (1 << BuddyBand2Constants.NOTIFICATION_MissedCall);

	public static int VoiceMailMask = 1 << BuddyBand2Constants.NOTIFICATION_VoiceMail;

	public static int SocialMask = 1 << BuddyBand2Constants.NOTIFICATION_Social;

	public static int ScheduleMask = 1 << BuddyBand2Constants.NOTIFICATION_Schedule;

	public static int EmailMask = 1 << BuddyBand2Constants.NOTIFICATION_Email;

	public static int OtherMask = ~(IncomingCallMask | VoiceMailMask | SocialMask | ScheduleMask | EmailMask) | (1 << BuddyBand2Constants.NOTIFICATION_Other);

	public BuddyBand2Settings Settings = new BuddyBand2Settings();

	private bool refreshing_;

	private Action done_;

	private List<Tracker> custom_ = new List<Tracker>();

	private IBuddyBand2 buddyband2_;

	private Tuple<FirmwareVersion, bool> version_available_;

	private int version_current_;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private ScrollView _outer;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _bb2_status;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Image _bb2_battery;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _bb2_collecting;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableFrame _raw_box;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _raw_date;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _raw_action;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableFrame _fw_box;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _fw_version;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _fw_summary;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _fw_warning;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _fw_action;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Switch _activity_nudge;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private StackLayout _activity_nudge_inner;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableHelpButton _activity_nudge_help;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableFrame _activity_nudge_help_msg;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8Picker _inactivity_time_picker;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8DividingBar _activity_bottom_bar;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableLabel _alarms;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private StackLayout _alarms_inner;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableHelpButton _alarms_help;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableFrame _alarms_help_msg;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _alarm1_summary;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _alarm1_info;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _alarm1;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _alarm2_summary;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _alarm2_info;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _alarm2;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _alarm3_summary;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Label _alarm3_info;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _alarm3;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8DividingBar _alarms_bottom_bar;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Switch _sleep_schedule;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private StackLayout _sleep_schedule_inner;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableHelpButton _sleep_schedule_help;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableFrame _sleep_schedule_help_msg;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8TimePicker _sleepstart_time;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8TimePicker _sleepend_time;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8DividingBar _sleep_schedule_bottom_bar;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private StackLayout _trackers_outer;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableLabel _trackers;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private StackLayout _trackers_inner;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private StackLayout _trackers_innermost;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8Picker _trackers_picker;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8Picker _dbltap;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableFrame _no_trackers;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableHelpButton _unpair_help;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private Activ8ClickableFrame _unpair_help_msg;

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private BlueButton _unpair;

	public Action AppearAction => delegate
	{
		UpdateFirmware();
	};

	public Action RemoveAction => delegate
	{
		MessageCenterUtils.Unsubscribe(this);
	};

	public string Title => Vernacular.Catalog.GetString("BuddyBand2 Settings");

	public Action HelpAction => delegate
	{
		CommonApp.CurrentCommonApp.PushDirect(WebFactory.MakeWebPage("help/#/device_bb2", Vernacular.Catalog.GetString($"{Title} Help"), null, null), Direction.RightToLeft);
	};

	public BuddyBand2SettingsView()
	{
		base.Resources = Theme.GetResourceDictionary();
		InitializeComponent();
	}

	public BuddyBand2SettingsView(Action done)
	{
		done_ = done;
		base.Resources = Theme.GetResourceDictionary();
		InitializeComponent();
		_activity_nudge.IsToggled = Settings.InactivityEnable;
		_inactivity_time_picker.Items.Add("5 minutes");
		_inactivity_time_picker.Items.Add("10 minutes");
		_inactivity_time_picker.Items.Add("15 minutes");
		_inactivity_time_picker.Items.Add("30 minutes");
		_inactivity_time_picker.Items.Add("45 minutes");
		_inactivity_time_picker.Items.Add("1 hour");
		_inactivity_time_picker.Items.Add("2 hours");
		_inactivity_time_picker.SelectedIndexChanged += _inactivity_Time_Picker_SelectedIndexChanged;
		MessageCenterUtils.ParamsUpdated(this);
		MessageCenterUtils.SubscribeToBB2FirmwareVersion(this);
		MessageCenterUtils.SubscribeToBB2Status(this);
		CommonApp.CurrentCommonApp.getDataModel().GetCustomTrackers(delegate(Tracker tracker)
		{
			if (tracker.Counted)
			{
				custom_.Add(tracker);
			}
		}, -1L);
		_activity_nudge_help.OnClickEvent += delegate
		{
			_activity_nudge_help_msg.IsVisible = !_activity_nudge_help_msg.IsVisible;
		};
		_activity_nudge_help_msg.OnClickEvent += delegate
		{
			_activity_nudge_help_msg.IsVisible = !_activity_nudge_help_msg.IsVisible;
		};
		_sleep_schedule_help.OnClickEvent += delegate
		{
			_sleep_schedule_help_msg.IsVisible = !_sleep_schedule_help_msg.IsVisible;
		};
		_sleep_schedule_help_msg.OnClickEvent += delegate
		{
			_sleep_schedule_help_msg.IsVisible = !_sleep_schedule_help_msg.IsVisible;
		};
		_alarms_help.OnClickEvent += delegate
		{
			_alarms_help_msg.IsVisible = !_alarms_help_msg.IsVisible;
		};
		_alarms_help_msg.OnClickEvent += delegate
		{
			_alarms_help_msg.IsVisible = !_alarms_help_msg.IsVisible;
		};
		_unpair_help.OnClickEvent += delegate
		{
			_unpair_help_msg.IsVisible = !_unpair_help_msg.IsVisible;
		};
		_unpair_help_msg.OnClickEvent += delegate
		{
			_unpair_help_msg.IsVisible = !_unpair_help_msg.IsVisible;
		};
		_alarm1.Clicked += PushAlarm1;
		_alarm2.Clicked += PushAlarm2;
		_alarm3.Clicked += PushAlarm3;
		_activity_nudge.Toggled += delegate
		{
			if (_activity_nudge.IsToggled)
			{
				_activity_nudge_inner.IsVisible = true;
				_activity_bottom_bar.IsVisible = true;
				if (_inactivity_time_picker.SelectedIndex != -1)
				{
					ushort inactivityThreshold;
					switch (_inactivity_time_picker.SelectedIndex)
					{
					case 1:
						inactivityThreshold = 10;
						break;
					case 2:
						inactivityThreshold = 15;
						break;
					case 3:
						inactivityThreshold = 30;
						break;
					case 4:
						inactivityThreshold = 45;
						break;
					case 5:
						inactivityThreshold = 60;
						break;
					case 6:
						inactivityThreshold = 120;
						break;
					default:
						inactivityThreshold = 5;
						break;
					}
					Set_InactivityThreshold(inactivityThreshold);
				}
			}
			else
			{
				_activity_nudge_inner.IsVisible = false;
				_activity_bottom_bar.IsVisible = false;
			}
			Set_InactivityEnable(_activity_nudge.IsToggled);
		};
		_alarms.OnClickEvent += delegate
		{
			Activ8DividingBar alarms_bottom_bar = _alarms_bottom_bar;
			bool isVisible = _alarms_inner.IsVisible = !_alarms_inner.IsVisible;
			alarms_bottom_bar.IsVisible = isVisible;
			_alarms.Text = (_alarms_inner.IsVisible ? "Hide" : "Show");
		};
		_sleep_schedule.Toggled += delegate
		{
			Set_SleepEnable(_sleep_schedule.IsToggled);
			_sleep_schedule_inner.IsVisible = _sleep_schedule.IsToggled;
			_sleep_schedule_bottom_bar.IsVisible = _sleep_schedule.IsToggled;
		};
		_sleepstart_time.PropertyChanged += delegate
		{
			Set_SleepOnTime(_sleepstart_time.Time);
		};
		_sleepend_time.PropertyChanged += delegate
		{
			Set_SleepOffTime(_sleepend_time.Time);
		};
		_trackers.OnClickEvent += delegate
		{
			_trackers_inner.IsVisible = !_trackers_inner.IsVisible;
			_trackers.Text = (_trackers_inner.IsVisible ? "Hide" : "Show");
		};
		if (custom_.Count > 0)
		{
			_trackers.Text = ((Settings.CustomTrackerId > 0) ? "Hide" : "Show");
			_trackers_inner.IsVisible = (Settings.CustomTrackerId > 0);
			_trackers_picker.Items.Add(Vernacular.Catalog.GetString("None"));
			int selectedIndex = 0;
			for (int i = 0; i < custom_.Count; i++)
			{
				_trackers_picker.Items.Add(custom_[i].Description);
				if (custom_[i].Id == Settings.CustomTrackerId)
				{
					selectedIndex = i + 1;
				}
			}
			_trackers_picker.SelectedIndex = selectedIndex;
			_trackers_picker.SelectedIndexChanged += delegate
			{
				if (_trackers_picker.SelectedIndex <= 0)
				{
					Set_Tracker(0);
				}
				else
				{
					Set_Tracker(custom_[_trackers_picker.SelectedIndex - 1].ServerId);
				}
			};
			_dbltap.Items.Add(Vernacular.Catalog.GetString("Slow", "BB2 Double tap speed"));
			_dbltap.Items.Add(Vernacular.Catalog.GetString("Medium", "BB2 Double tap speed"));
			_dbltap.Items.Add(Vernacular.Catalog.GetString("Fast", "BB2 Double tap speed"));
			_dbltap.SelectedIndexChanged += delegate
			{
				if (_dbltap.SelectedIndex == 0)
				{
					Set_DblTapMaxTap1Time(DBLTAP_SLOW);
					Set_DblTapMaxDelayTime(DBLTAP_SLOW);
				}
				else if (_dbltap.SelectedIndex == 1)
				{
					Set_DblTapMaxTap1Time(DBLTAP_MED);
					Set_DblTapMaxDelayTime(DBLTAP_MED);
				}
				else
				{
					Set_DblTapMaxTap1Time(DBLTAP_FAST);
					Set_DblTapMaxDelayTime(DBLTAP_FAST);
				}
			};
			_no_trackers.IsVisible = false;
			_trackers_innermost.IsVisible = true;
		}
		else
		{
			_trackers_inner.IsVisible = false;
			_no_trackers.IsVisible = true;
			_trackers_innermost.IsVisible = false;
		}
		_unpair.Clicked += UnPair;
		_fw_action.Clicked += FirmwareUpgrade;
		UpdateSettings(force: true);
		buddyband2_ = CommonApp.CurrentCommonApp.getBuddyBand2();
		_raw_action.Clicked += delegate
		{
			BuddyBand2Status status = buddyband2_.GetStatus();
			_raw_box.IsVisible = false;
			if (status.RawDataState == BuddyBand2RawCollectionState.COLLECTED)
			{
				CommonApp.CurrentCommonApp.PushDirect(new BuddyBand2RawDataView(buddyband2_, status.RawDataTime), Direction.RightToLeft);
			}
		};
		if (Settings.NotificationEnable)
		{
			Set_NotificationEnable(value: false);
		}
		if (Settings.NotificationMask > 0)
		{
			Set_NotificationMask(0);
		}
	}

	public void ParamsUpdated(ISet<string> names)
	{
		if (names == null || names.Contains("user-bb2-settings"))
		{
			UpdateSettings(force: false);
		}
	}

	private void UpdateFirmware()
	{
		Task.Delay((int)AnimateDelays.TOTALDELAY).ContinueWith(delegate
		{
			BuddyBand2SettingsView buddyBand2SettingsView = this;
			BuddyBand2Status status = buddyband2_.GetStatus();
			Tuple<FirmwareVersion, bool> version_available = CommonApp.CurrentCommonApp.getFirmwareChecker().GetCurrentReleaseVersion(FirmwareDeviceType.BUDDYBAND2);
			bool show_updowngrade = false;
			bool allow_updowngrade = false;
			string battery_imgname = null;
			string status_text = "battery_0";
			version_available_ = null;
			if (status != null)
			{
				if ((status.State == BuddyBand2PublicState.CONFIGURING || status.State == BuddyBand2PublicState.SYNCHRONISING || status.State == BuddyBand2PublicState.TRACKING) && status.Version > 0 && version_available != null)
				{
					if (version_available.Item2 && version_available.Item1.Code != status.Version)
					{
						show_updowngrade = true;
					}
					if (!version_available.Item2 && version_available.Item1.Code > status.Version)
					{
						show_updowngrade = true;
					}
					if (show_updowngrade && status.Battery >= BB2_MIN_UPGRADE_BATTERY && status.State == BuddyBand2PublicState.TRACKING)
					{
						allow_updowngrade = true;
						version_available_ = version_available;
						version_current_ = status.Version;
					}
				}
				if (status.State == BuddyBand2PublicState.TRACKING)
				{
					if (status.Battery == 0)
					{
						battery_imgname = "battery_0";
					}
					else if (status.Battery == 1)
					{
						battery_imgname = "battery_1";
					}
					else if (status.Battery == 2)
					{
						battery_imgname = "battery_2";
					}
					else if (status.Battery == 3)
					{
						battery_imgname = "battery_3";
					}
					else if (status.Battery == 4)
					{
						battery_imgname = "battery_4";
					}
					else if (status.Battery >= 5)
					{
						battery_imgname = "battery_5";
					}
				}
				status_text = BuddyBand2Comms.labelForState(status.State);
			}
			Device.BeginInvokeOnMainThread(delegate
			{
				if (show_updowngrade)
				{
					buddyBand2SettingsView._fw_box.IsVisible = true;
					buddyBand2SettingsView._fw_summary.Text = version_available.Item1.Summary;
					buddyBand2SettingsView._fw_version.Text = string.Format(Vernacular.Catalog.GetString("Version: {0}"), new object[1]
					{
						version_available.Item1.Code.ToString()
					});
					if (allow_updowngrade)
					{
						buddyBand2SettingsView._fw_warning.IsVisible = false;
						buddyBand2SettingsView._fw_action.IsEnabled = true;
						buddyBand2SettingsView._fw_action.IsVisible = true;
					}
					else
					{
						buddyBand2SettingsView._fw_warning.IsVisible = true;
						buddyBand2SettingsView._fw_action.IsEnabled = false;
						buddyBand2SettingsView._fw_action.IsVisible = false;
					}
				}
				else
				{
					buddyBand2SettingsView._fw_box.IsVisible = false;
				}
				buddyBand2SettingsView._bb2_battery.Source = battery_imgname;
				if (status != null)
				{
					buddyBand2SettingsView._bb2_status.Text = status_text;
					buddyBand2SettingsView._bb2_status.TextColor = BuddyBand2Comms.colorForState(status.State).ToForms();
					if (status.RawDataState == BuddyBand2RawCollectionState.COLLECTED)
					{
						DateTime dateTime = status.RawDataTime.ToLocalTime();
						buddyBand2SettingsView._raw_date.Text = string.Format("{0} at {1:T}", new object[2]
						{
							dateTime.InformalDate(),
							dateTime
						});
						buddyBand2SettingsView._raw_box.IsVisible = true;
						buddyBand2SettingsView._bb2_collecting.IsVisible = false;
					}
					else if (status.RawDataState == BuddyBand2RawCollectionState.COLLECTING)
					{
						buddyBand2SettingsView._raw_box.IsVisible = false;
						buddyBand2SettingsView._bb2_collecting.IsVisible = true;
					}
					else
					{
						buddyBand2SettingsView._raw_box.IsVisible = false;
						buddyBand2SettingsView._bb2_collecting.IsVisible = false;
					}
				}
				else
				{
					buddyBand2SettingsView._bb2_status.Text = "";
					buddyBand2SettingsView._bb2_status.TextColor = Activ8rlives.Colors.A8_BLUE_X;
					buddyBand2SettingsView._raw_box.IsVisible = false;
					buddyBand2SettingsView._bb2_collecting.IsVisible = false;
				}
			});
		});
	}

	public void BB2StatusChanged()
	{
		UpdateFirmware();
	}

	public void BB2AvailableVersionChanged()
	{
		UpdateFirmware();
	}

	private void FirmwareUpgrade(object sender, EventArgs args)
	{
		if (version_available_ != null)
		{
			Action ok_action = delegate
			{
				IActiv8rlives currentCommonApp3 = CommonApp.CurrentCommonApp;
				FirmwareVersion item2 = version_available_.Item1;
				IActiv8rlives currentCommonApp4 = CommonApp.CurrentCommonApp;
				currentCommonApp3.Replace(new BuddyBand2FirmwareUpgradeView(item2, currentCommonApp4.PopDirect), Direction.RightToLeft);
			};
			IActiv8rlives currentCommonApp = CommonApp.CurrentCommonApp;
			int current_version = version_current_;
			FirmwareVersion item = version_available_.Item1;
			IActiv8rlives currentCommonApp2 = CommonApp.CurrentCommonApp;
			currentCommonApp.Push(new BuddyBand2Settings_Firmware(current_version, item, currentCommonApp2.PopDirect, ok_action), Direction.RightToLeft);
		}
	}

	~BuddyBand2SettingsView()
	{
	}

	private async void UnPair(object sender, EventArgs args)
	{
		string str = "";
		str += "Are you sure you want to unpair this BuddyBand2?";
		if (await Application.Current.MainPage.DisplayAlert("Unpair this BuddyBand2?", str, "Unpair", "Cancel"))
		{
			CommonApp.CurrentCommonApp.Log("BB2 Disconnecting in UnPair");
			CommonApp.CurrentCommonApp.getDataModel().SetObjectLocalParameter("bb2-device", Guid.Empty, -1L);
			if (done_ != null)
			{
				done_();
			}
		}
	}

	private void PushAlarm1(object sender, EventArgs args)
	{
		CommonApp.CurrentCommonApp.PushDirect(new BuddyBand2Settings_AlarmView(this, 1), Direction.BottomToTop);
	}

	private void PushAlarm2(object sender, EventArgs args)
	{
		CommonApp.CurrentCommonApp.PushDirect(new BuddyBand2Settings_AlarmView(this, 2), Direction.BottomToTop);
	}

	private void PushAlarm3(object sender, EventArgs args)
	{
		CommonApp.CurrentCommonApp.PushDirect(new BuddyBand2Settings_AlarmView(this, 3), Direction.BottomToTop);
	}

	private void UpdateSettings(bool force)
	{
		Task.Delay((int)AnimateDelays.TOTALDELAY).ContinueWith(delegate
		{
			BuddyBand2Settings new_settings = CommonApp.CurrentCommonApp.getDataModel().GetObjectParameter<BuddyBand2Settings>("user-bb2-settings", -1L);
			if (new_settings == null)
			{
				new_settings = new BuddyBand2Settings();
			}
			Device.BeginInvokeOnMainThread(delegate
			{
				refreshing_ = true;
				try
				{
					if ((new_settings.CustomTrackerId != Settings.CustomTrackerId) | force)
					{
						Settings.CustomTrackerId = new_settings.CustomTrackerId;
						Tracker_Updated();
					}
					if ((new_settings.Alarm1Enable != Settings.Alarm1Enable) | force)
					{
						Settings.Alarm1Enable = new_settings.Alarm1Enable;
						Alarm1Enable_Updated();
					}
					if ((new_settings.Alarm2Enable != Settings.Alarm2Enable) | force)
					{
						Settings.Alarm2Enable = new_settings.Alarm2Enable;
						Alarm2Enable_Updated();
					}
					if ((new_settings.Alarm3Enable != Settings.Alarm3Enable) | force)
					{
						Settings.Alarm3Enable = new_settings.Alarm3Enable;
						Alarm3Enable_Updated();
					}
					if ((new_settings.InactivityEnable != Settings.InactivityEnable) | force)
					{
						Settings.InactivityEnable = new_settings.InactivityEnable;
						InactivityEnable_Updated();
					}
					if ((new_settings.Alarm1Mask != Settings.Alarm1Mask) | force)
					{
						Settings.Alarm1Mask = new_settings.Alarm1Mask;
						Alarm1Mask_Updated();
					}
					if ((new_settings.Alarm2Mask != Settings.Alarm2Mask) | force)
					{
						Settings.Alarm2Mask = new_settings.Alarm2Mask;
						Alarm2Mask_Updated();
					}
					if ((new_settings.Alarm3Mask != Settings.Alarm3Mask) | force)
					{
						Settings.Alarm3Mask = new_settings.Alarm3Mask;
						Alarm3Mask_Updated();
					}
					if ((new_settings.InactivityThreshold != Settings.InactivityThreshold) | force)
					{
						Settings.InactivityThreshold = new_settings.InactivityThreshold;
						InactivityThreshold_Updated();
					}
					if ((new_settings.DblTapMaxTap1Time != Settings.DblTapMaxTap1Time) | force)
					{
						Settings.DblTapMaxTap1Time = new_settings.DblTapMaxTap1Time;
						DblTapMaxTap1Time_Updated();
					}
					if ((new_settings.DblTapMaxDelayTime != Settings.DblTapMaxDelayTime) | force)
					{
						Settings.DblTapMaxDelayTime = new_settings.DblTapMaxDelayTime;
						DblTapMaxDelayTime_Updated();
					}
					if ((new_settings.Alarm1Time != Settings.Alarm1Time) | force)
					{
						Settings.Alarm1Time = new_settings.Alarm1Time;
						Alarm1Time_Updated();
					}
					if ((new_settings.Alarm2Time != Settings.Alarm2Time) | force)
					{
						Settings.Alarm2Time = new_settings.Alarm2Time;
						Alarm2Time_Updated();
					}
					if ((new_settings.Alarm3Time != Settings.Alarm3Time) | force)
					{
						Settings.Alarm3Time = new_settings.Alarm3Time;
						Alarm3Time_Updated();
					}
					if ((new_settings.SleepEnable != Settings.SleepEnable) | force)
					{
						Settings.SleepEnable = new_settings.SleepEnable;
						SleepEnable_Updated();
					}
					if ((new_settings.SleepOnTime != Settings.SleepOnTime) | force)
					{
						Settings.SleepOnTime = new_settings.SleepOnTime;
						SleepOnTime_Updated();
					}
					if ((new_settings.SleepOffTime != Settings.SleepOffTime) | force)
					{
						Settings.SleepOffTime = new_settings.SleepOffTime;
						SleepOffTime_Updated();
					}
				}
				finally
				{
					AlarmsShow();
					refreshing_ = false;
				}
			});
		});
	}

	private void Tracker_Updated()
	{
		if (Settings.CustomTrackerId <= 0)
		{
			return;
		}
		for (int i = 0; i < custom_.Count; i++)
		{
			if (custom_[i].ServerId == Settings.CustomTrackerId)
			{
				_trackers_picker.SelectedIndex = i + 1;
				_trackers.Text = "Hide";
				_trackers_inner.IsVisible = true;
				return;
			}
		}
		_trackers_picker.SelectedIndex = 0;
		_trackers_inner.IsVisible = true;
	}

	private void AlarmsShow()
	{
		bool flag = AlarmsEnabled();
		_alarms_inner.IsVisible = flag;
		_alarms_bottom_bar.IsVisible = flag;
		_alarms.Text = (flag ? "Hide" : "Show");
	}

	private void Alarm1Summary_Updated()
	{
		if (!Settings.Alarm1Enable)
		{
			_alarm1_summary.Text = Vernacular.Catalog.GetString("Disabled", "BB2 Alarm status");
			_alarm1_info.Text = "";
			Grid.SetRowSpan(_alarm1_summary, 2);
			return;
		}
		_alarm1_summary.Text = string.Format(Vernacular.Catalog.GetString("{0}:{1}", "BB2 Alarm HH:MM"), new object[2]
		{
			Settings.Alarm1Time.Hours.ToString("00"),
			Settings.Alarm1Time.Minutes.ToString("00")
		});
		Grid.SetRowSpan(_alarm1_summary, 1);
		_alarm1_info.Text = "";
		_alarm1_info.Text += (((Settings.Alarm1Mask & 1) != 0) ? "Mon " : "");
		_alarm1_info.Text += (((Settings.Alarm1Mask & 2) != 0) ? "Tue " : "");
		_alarm1_info.Text += (((Settings.Alarm1Mask & 4) != 0) ? "Wed " : "");
		_alarm1_info.Text += (((Settings.Alarm1Mask & 8) != 0) ? "Thu " : "");
		_alarm1_info.Text += (((Settings.Alarm1Mask & 0x10) != 0) ? "Fri " : "");
		_alarm1_info.Text += (((Settings.Alarm1Mask & 0x20) != 0) ? "Sat " : "");
		_alarm1_info.Text += (((Settings.Alarm1Mask & 0x40) != 0) ? "Sun" : "");
	}

	private void Alarm2Summary_Updated()
	{
		if (!Settings.Alarm2Enable)
		{
			Grid.SetRowSpan(_alarm2_summary, 2);
			_alarm2_info.Text = "";
			_alarm2_summary.Text = Vernacular.Catalog.GetString("Disabled", "BB2 Alarm status");
			return;
		}
		_alarm2_summary.Text = string.Format(Vernacular.Catalog.GetString("{0}:{1}", "BB2 Alarm HH:MM"), new object[2]
		{
			Settings.Alarm2Time.Hours.ToString("00"),
			Settings.Alarm2Time.Minutes.ToString("00")
		});
		Grid.SetRowSpan(_alarm2_summary, 1);
		_alarm2_info.Text = "";
		_alarm2_info.Text += (((Settings.Alarm2Mask & 1) != 0) ? "Mon " : "");
		_alarm2_info.Text += (((Settings.Alarm2Mask & 2) != 0) ? "Tue " : "");
		_alarm2_info.Text += (((Settings.Alarm2Mask & 4) != 0) ? "Wed " : "");
		_alarm2_info.Text += (((Settings.Alarm2Mask & 8) != 0) ? "Thu " : "");
		_alarm2_info.Text += (((Settings.Alarm2Mask & 0x10) != 0) ? "Fri " : "");
		_alarm2_info.Text += (((Settings.Alarm2Mask & 0x20) != 0) ? "Sat " : "");
		_alarm2_info.Text += (((Settings.Alarm2Mask & 0x40) != 0) ? "Sun" : "");
	}

	private void Alarm3Summary_Updated()
	{
		if (!Settings.Alarm3Enable)
		{
			_alarm3_summary.Text = Vernacular.Catalog.GetString("Disabled", "BB2 Alarm status");
			_alarm3_info.Text = "";
			Grid.SetRowSpan(_alarm3_summary, 2);
			return;
		}
		_alarm3_summary.Text = string.Format(Vernacular.Catalog.GetString("Alarm 3 - {0}:{1}", "BB2 Alarm HH:MM"), new object[2]
		{
			Settings.Alarm3Time.Hours.ToString("00"),
			Settings.Alarm3Time.Minutes.ToString("00")
		});
		Grid.SetRowSpan(_alarm3_summary, 1);
		_alarm3_info.Text = "";
		_alarm3_info.Text += (((Settings.Alarm3Mask & 1) != 0) ? Vernacular.Catalog.GetString("Mon ", "Short Day of Week") : "");
		_alarm3_info.Text += (((Settings.Alarm3Mask & 2) != 0) ? Vernacular.Catalog.GetString("Tue ", "Short Day of Week") : "");
		_alarm3_info.Text += (((Settings.Alarm3Mask & 4) != 0) ? Vernacular.Catalog.GetString("Wed ", "Short Day of Week") : "");
		_alarm3_info.Text += (((Settings.Alarm3Mask & 8) != 0) ? Vernacular.Catalog.GetString("Thu ", "Short Day of Week") : "");
		_alarm3_info.Text += (((Settings.Alarm3Mask & 0x10) != 0) ? Vernacular.Catalog.GetString("Fri ", "Short Day of Week") : "");
		_alarm3_info.Text += (((Settings.Alarm3Mask & 0x20) != 0) ? Vernacular.Catalog.GetString("Sat ", "Short Day of Week") : "");
		_alarm3_info.Text += (((Settings.Alarm3Mask & 0x40) != 0) ? Vernacular.Catalog.GetString("Sun", "Short Day of Week") : "");
	}

	private bool AlarmsEnabled()
	{
		if (Settings.Alarm1Enable || Settings.Alarm2Enable || Settings.Alarm3Enable)
		{
			_alarms_inner.IsVisible = true;
			return true;
		}
		_alarms_inner.IsVisible = false;
		return false;
	}

	private void Alarm1Enable_Updated()
	{
		Alarm1Summary_Updated();
	}

	private void Alarm2Enable_Updated()
	{
		Alarm2Summary_Updated();
	}

	private void Alarm3Enable_Updated()
	{
		Alarm3Summary_Updated();
	}

	private void SleepEnable_Updated()
	{
		_sleep_schedule.IsToggled = Settings.SleepEnable;
		_sleep_schedule_inner.IsVisible = Settings.SleepEnable;
	}

	private void Alarm1Mask_Updated()
	{
		Alarm1Summary_Updated();
	}

	private void Alarm2Mask_Updated()
	{
		Alarm2Summary_Updated();
	}

	private void Alarm3Mask_Updated()
	{
		Alarm3Summary_Updated();
	}

	private void Alarm1Time_Updated()
	{
		Alarm1Summary_Updated();
	}

	private void Alarm2Time_Updated()
	{
		Alarm2Summary_Updated();
	}

	private void Alarm3Time_Updated()
	{
		Alarm3Summary_Updated();
	}

	private void SleepOnTime_Updated()
	{
		_sleepstart_time.Time = Settings.SleepOnTime;
	}

	private void SleepOffTime_Updated()
	{
		_sleepend_time.Time = Settings.SleepOffTime;
	}

	private void _inactivity_Time_Picker_SelectedIndexChanged(object sender, EventArgs e)
	{
		if (_inactivity_time_picker.SelectedIndex != -1)
		{
			ushort inactivityThreshold;
			switch (_inactivity_time_picker.SelectedIndex)
			{
			case 0:
				inactivityThreshold = 5;
				break;
			case 1:
				inactivityThreshold = 10;
				break;
			case 2:
				inactivityThreshold = 15;
				break;
			case 3:
				inactivityThreshold = 30;
				break;
			case 4:
				inactivityThreshold = 45;
				break;
			case 5:
				inactivityThreshold = 60;
				break;
			case 6:
				inactivityThreshold = 120;
				break;
			default:
				inactivityThreshold = 60;
				break;
			}
			Set_InactivityThreshold(inactivityThreshold);
		}
	}

	private void InactivityThreshold_Updated()
	{
		if (Settings.InactivityThreshold <= 5)
		{
			_inactivity_time_picker.SelectedIndex = 0;
		}
		else if (Settings.InactivityThreshold > 5 && Settings.InactivityThreshold <= 10)
		{
			_inactivity_time_picker.SelectedIndex = 1;
		}
		else if (Settings.InactivityThreshold > 10 && Settings.InactivityThreshold <= 15)
		{
			_inactivity_time_picker.SelectedIndex = 2;
		}
		else if (Settings.InactivityThreshold > 15 && Settings.InactivityThreshold <= 30)
		{
			_inactivity_time_picker.SelectedIndex = 3;
		}
		else if (Settings.InactivityThreshold > 30 && Settings.InactivityThreshold <= 45)
		{
			_inactivity_time_picker.SelectedIndex = 4;
		}
		else if (Settings.InactivityThreshold > 45 && Settings.InactivityThreshold <= 60)
		{
			_inactivity_time_picker.SelectedIndex = 5;
		}
		else if (Settings.InactivityThreshold > 60)
		{
			_inactivity_time_picker.SelectedIndex = 6;
		}
	}

	private void InactivityEnable_Updated()
	{
		_activity_nudge.IsToggled = Settings.InactivityEnable;
		_activity_nudge_inner.IsVisible = Settings.InactivityEnable;
		_activity_bottom_bar.IsVisible = Settings.InactivityEnable;
	}

	private void DblTapMaxTap1Time_Updated()
	{
		if (Settings.DblTapMaxTap1Time == DBLTAP_SLOW)
		{
			_dbltap.SelectedIndex = 0;
		}
		else if (Settings.DblTapMaxTap1Time == DBLTAP_MED)
		{
			_dbltap.SelectedIndex = 1;
		}
		else
		{
			_dbltap.SelectedIndex = 2;
		}
	}

	private void DblTapMaxDelayTime_Updated()
	{
		if (Settings.DblTapMaxTap1Time == DBLTAP_SLOW)
		{
			_dbltap.SelectedIndex = 0;
		}
		else if (Settings.DblTapMaxTap1Time == DBLTAP_MED)
		{
			_dbltap.SelectedIndex = 1;
		}
		else
		{
			_dbltap.SelectedIndex = 2;
		}
	}

	private void SendChanged()
	{
		CommonApp.CurrentCommonApp.getDataModel().SetObjectParameter("user-bb2-settings", Settings, uploaded: false, -1L);
	}

	public void Set_Tracker(int value)
	{
		if (!refreshing_ && value != Settings.CustomTrackerId)
		{
			Settings.CustomTrackerId = value;
			SendChanged();
		}
		Tracker_Updated();
	}

	public void Set_Alarm1Enable(bool value)
	{
		if (!refreshing_ && value != Settings.Alarm1Enable)
		{
			Settings.Alarm1Enable = value;
			SendChanged();
		}
		Alarm1Summary_Updated();
	}

	public void Set_Alarm2Enable(bool value)
	{
		if (!refreshing_ && value != Settings.Alarm2Enable)
		{
			Settings.Alarm2Enable = value;
			SendChanged();
		}
		Alarm2Summary_Updated();
	}

	public void Set_Alarm3Enable(bool value)
	{
		if (!refreshing_ && value != Settings.Alarm3Enable)
		{
			Settings.Alarm3Enable = value;
			SendChanged();
		}
		Alarm3Summary_Updated();
	}

	public void Set_SleepEnable(bool value)
	{
		if (!refreshing_ && value != Settings.SleepEnable)
		{
			Settings.SleepEnable = value;
			SendChanged();
		}
	}

	public void Set_NotificationEnable(bool value)
	{
		if (!refreshing_ && value != Settings.NotificationEnable)
		{
			Settings.NotificationEnable = value;
			SendChanged();
		}
	}

	public void Set_NotificationMask(ushort value)
	{
		if (!refreshing_ && value != Settings.NotificationMask)
		{
			Settings.NotificationMask = value;
			SendChanged();
		}
	}

	public void Set_Alarm1Mask(ushort value)
	{
		if (!refreshing_ && value != Settings.Alarm1Mask)
		{
			Settings.Alarm1Mask = value;
			SendChanged();
		}
		Alarm1Summary_Updated();
	}

	public void Set_Alarm2Mask(ushort value)
	{
		if (!refreshing_ && value != Settings.Alarm2Mask)
		{
			Settings.Alarm2Mask = value;
			SendChanged();
		}
		Alarm2Summary_Updated();
	}

	public void Set_Alarm3Mask(ushort value)
	{
		if (!refreshing_ && value != Settings.Alarm3Mask)
		{
			Settings.Alarm3Mask = value;
			SendChanged();
		}
		Alarm3Summary_Updated();
	}

	public void Set_Alarm1Time(TimeSpan value)
	{
		if (!refreshing_ && value != Settings.Alarm1Time)
		{
			Settings.Alarm1Time = value;
			SendChanged();
		}
		Alarm1Summary_Updated();
	}

	public void Set_Alarm2Time(TimeSpan value)
	{
		if (!refreshing_ && value != Settings.Alarm2Time)
		{
			Settings.Alarm2Time = value;
			SendChanged();
		}
		Alarm2Summary_Updated();
	}

	public void Set_Alarm3Time(TimeSpan value)
	{
		if (!refreshing_ && value != Settings.Alarm3Time)
		{
			Settings.Alarm3Time = value;
			SendChanged();
		}
		Alarm3Summary_Updated();
	}

	public void Set_SleepOnTime(TimeSpan value)
	{
		if (!refreshing_ && value != Settings.SleepOnTime)
		{
			Settings.SleepOnTime = value;
			SendChanged();
		}
	}

	public void Set_SleepOffTime(TimeSpan value)
	{
		if (!refreshing_ && value != Settings.SleepOffTime)
		{
			Settings.SleepOffTime = value;
			SendChanged();
		}
	}

	public void Set_InactivityThreshold(ushort value)
	{
		if (!refreshing_ && value != Settings.InactivityThreshold)
		{
			Settings.InactivityThreshold = value;
			SendChanged();
		}
	}

	public void Set_InactivityEnable(bool value)
	{
		if (!refreshing_ && value != Settings.InactivityEnable)
		{
			Settings.InactivityEnable = value;
			SendChanged();
		}
	}

	public void Set_DblTapMaxTap1Time(ushort value)
	{
		if (!refreshing_ && value != Settings.DblTapMaxTap1Time)
		{
			Settings.DblTapMaxTap1Time = value;
			SendChanged();
		}
	}

	public void Set_DblTapMaxDelayTime(ushort value)
	{
		if (!refreshing_ && value != Settings.DblTapMaxDelayTime)
		{
			Settings.DblTapMaxDelayTime = value;
			SendChanged();
		}
	}

	[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
	private void InitializeComponent()
	{
		if (ResourceLoader.ResourceProvider != null && ResourceLoader.ResourceProvider(typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly().GetName(), "Modules/BuddyBand2/BuddyBand2SettingsView.xaml") != null)
		{
			__InitComponentRuntime();
			return;
		}
		if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
		{
			__InitComponentRuntime();
			return;
		}
		StaticResourceExtension staticResourceExtension = new StaticResourceExtension();
		Image image = new Image();
		StaticResourceExtension staticResourceExtension2 = new StaticResourceExtension();
		Label label = new Label();
		Image image2 = new Image();
		StackLayout stackLayout = new StackLayout();
		StaticResourceExtension staticResourceExtension3 = new StaticResourceExtension();
		Label label2 = new Label();
		StackLayout stackLayout2 = new StackLayout();
		Activ8ClickableFrame activ8ClickableFrame = new Activ8ClickableFrame();
		StaticResourceExtension staticResourceExtension4 = new StaticResourceExtension();
		Label label3 = new Label();
		StaticResourceExtension staticResourceExtension5 = new StaticResourceExtension();
		Label label4 = new Label();
		BlueButton blueButton = new BlueButton();
		StackLayout stackLayout3 = new StackLayout();
		Activ8ClickableFrame activ8ClickableFrame2 = new Activ8ClickableFrame();
		StaticResourceExtension staticResourceExtension6 = new StaticResourceExtension();
		Label label5 = new Label();
		StaticResourceExtension staticResourceExtension7 = new StaticResourceExtension();
		Label label6 = new Label();
		StaticResourceExtension staticResourceExtension8 = new StaticResourceExtension();
		Label label7 = new Label();
		StaticResourceExtension staticResourceExtension9 = new StaticResourceExtension();
		Label label8 = new Label();
		BlueButton blueButton2 = new BlueButton();
		StackLayout stackLayout4 = new StackLayout();
		Activ8ClickableFrame activ8ClickableFrame3 = new Activ8ClickableFrame();
		Image image3 = new Image();
		StaticResourceExtension staticResourceExtension10 = new StaticResourceExtension();
		Label label9 = new Label();
		Switch @switch = new Switch();
		StackLayout stackLayout5 = new StackLayout();
		StaticResourceExtension staticResourceExtension11 = new StaticResourceExtension();
		Label label10 = new Label();
		Activ8ClickableHelpButton activ8ClickableHelpButton = new Activ8ClickableHelpButton();
		StackLayout stackLayout6 = new StackLayout();
		StaticResourceExtension staticResourceExtension12 = new StaticResourceExtension();
		Label label11 = new Label();
		Activ8ClickableFrame activ8ClickableFrame4 = new Activ8ClickableFrame();
		StaticResourceExtension staticResourceExtension13 = new StaticResourceExtension();
		Label label12 = new Label();
		Activ8Picker activ8Picker = new Activ8Picker();
		StackLayout stackLayout7 = new StackLayout();
		Activ8DividingBar activ8DividingBar = new Activ8DividingBar();
		Image image4 = new Image();
		StaticResourceExtension staticResourceExtension14 = new StaticResourceExtension();
		Label label13 = new Label();
		Activ8ClickableLabel activ8ClickableLabel = new Activ8ClickableLabel();
		StackLayout stackLayout8 = new StackLayout();
		StaticResourceExtension staticResourceExtension15 = new StaticResourceExtension();
		Label label14 = new Label();
		Activ8ClickableHelpButton activ8ClickableHelpButton2 = new Activ8ClickableHelpButton();
		StackLayout stackLayout9 = new StackLayout();
		StaticResourceExtension staticResourceExtension16 = new StaticResourceExtension();
		Label label15 = new Label();
		Activ8ClickableFrame activ8ClickableFrame5 = new Activ8ClickableFrame();
		RowDefinition rowDefinition = new RowDefinition();
		RowDefinition rowDefinition2 = new RowDefinition();
		RowDefinition rowDefinition3 = new RowDefinition();
		RowDefinition rowDefinition4 = new RowDefinition();
		RowDefinition rowDefinition5 = new RowDefinition();
		RowDefinition rowDefinition6 = new RowDefinition();
		ColumnDefinition columnDefinition = new ColumnDefinition();
		ColumnDefinition columnDefinition2 = new ColumnDefinition();
		StaticResourceExtension staticResourceExtension17 = new StaticResourceExtension();
		Label label16 = new Label();
		StaticResourceExtension staticResourceExtension18 = new StaticResourceExtension();
		Label label17 = new Label();
		BlueButton blueButton3 = new BlueButton();
		StaticResourceExtension staticResourceExtension19 = new StaticResourceExtension();
		Label label18 = new Label();
		StaticResourceExtension staticResourceExtension20 = new StaticResourceExtension();
		Label label19 = new Label();
		BlueButton blueButton4 = new BlueButton();
		StaticResourceExtension staticResourceExtension21 = new StaticResourceExtension();
		Label label20 = new Label();
		StaticResourceExtension staticResourceExtension22 = new StaticResourceExtension();
		Label label21 = new Label();
		BlueButton blueButton5 = new BlueButton();
		Grid grid = new Grid();
		StackLayout stackLayout10 = new StackLayout();
		Activ8DividingBar activ8DividingBar2 = new Activ8DividingBar();
		Image image5 = new Image();
		StaticResourceExtension staticResourceExtension23 = new StaticResourceExtension();
		Label label22 = new Label();
		Switch switch2 = new Switch();
		StackLayout stackLayout11 = new StackLayout();
		StaticResourceExtension staticResourceExtension24 = new StaticResourceExtension();
		Label label23 = new Label();
		Activ8ClickableHelpButton activ8ClickableHelpButton3 = new Activ8ClickableHelpButton();
		StackLayout stackLayout12 = new StackLayout();
		StaticResourceExtension staticResourceExtension25 = new StaticResourceExtension();
		Label label24 = new Label();
		Activ8ClickableFrame activ8ClickableFrame6 = new Activ8ClickableFrame();
		StaticResourceExtension staticResourceExtension26 = new StaticResourceExtension();
		Label label25 = new Label();
		StaticResourceExtension staticResourceExtension27 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension28 = new StaticResourceExtension();
		Activ8TimePicker activ8TimePicker = new Activ8TimePicker();
		StaticResourceExtension staticResourceExtension29 = new StaticResourceExtension();
		Label label26 = new Label();
		StaticResourceExtension staticResourceExtension30 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension31 = new StaticResourceExtension();
		Activ8TimePicker activ8TimePicker2 = new Activ8TimePicker();
		StackLayout stackLayout13 = new StackLayout();
		Activ8DividingBar activ8DividingBar3 = new Activ8DividingBar();
		Image image6 = new Image();
		StaticResourceExtension staticResourceExtension32 = new StaticResourceExtension();
		Label label27 = new Label();
		Activ8ClickableLabel activ8ClickableLabel2 = new Activ8ClickableLabel();
		StackLayout stackLayout14 = new StackLayout();
		StaticResourceExtension staticResourceExtension33 = new StaticResourceExtension();
		Label label28 = new Label();
		StaticResourceExtension staticResourceExtension34 = new StaticResourceExtension();
		Label label29 = new Label();
		StaticResourceExtension staticResourceExtension35 = new StaticResourceExtension();
		Label label30 = new Label();
		StaticResourceExtension staticResourceExtension36 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension37 = new StaticResourceExtension();
		Activ8Picker activ8Picker2 = new Activ8Picker();
		StaticResourceExtension staticResourceExtension38 = new StaticResourceExtension();
		Label label31 = new Label();
		StaticResourceExtension staticResourceExtension39 = new StaticResourceExtension();
		StaticResourceExtension staticResourceExtension40 = new StaticResourceExtension();
		Activ8Picker activ8Picker3 = new Activ8Picker();
		StackLayout stackLayout15 = new StackLayout();
		StaticResourceExtension staticResourceExtension41 = new StaticResourceExtension();
		Label label32 = new Label();
		StaticResourceExtension staticResourceExtension42 = new StaticResourceExtension();
		Label label33 = new Label();
		StackLayout stackLayout16 = new StackLayout();
		Activ8ClickableFrame activ8ClickableFrame7 = new Activ8ClickableFrame();
		StackLayout stackLayout17 = new StackLayout();
		StackLayout stackLayout18 = new StackLayout();
		Activ8DividingBar activ8DividingBar4 = new Activ8DividingBar();
		StaticResourceExtension staticResourceExtension43 = new StaticResourceExtension();
		Label label34 = new Label();
		StaticResourceExtension staticResourceExtension44 = new StaticResourceExtension();
		Label label35 = new Label();
		Activ8ClickableHelpButton activ8ClickableHelpButton4 = new Activ8ClickableHelpButton();
		StackLayout stackLayout19 = new StackLayout();
		StaticResourceExtension staticResourceExtension45 = new StaticResourceExtension();
		Label label36 = new Label();
		Activ8ClickableFrame activ8ClickableFrame8 = new Activ8ClickableFrame();
		BlueButton blueButton6 = new BlueButton();
		StackLayout stackLayout20 = new StackLayout();
		StackLayout stackLayout21 = new StackLayout();
		ScrollView scrollView = new ScrollView();
		NameScope nameScope = new NameScope();
		NameScope.SetNameScope(this, nameScope);
		NameScope.SetNameScope(scrollView, nameScope);
		((INameScope)nameScope).RegisterName("_outer", (object)scrollView);
		if (scrollView.StyleId == null)
		{
			scrollView.StyleId = "_outer";
		}
		NameScope.SetNameScope(stackLayout21, nameScope);
		NameScope.SetNameScope(activ8ClickableFrame, nameScope);
		NameScope.SetNameScope(stackLayout2, nameScope);
		NameScope.SetNameScope(stackLayout, nameScope);
		NameScope.SetNameScope(image, nameScope);
		NameScope.SetNameScope(label, nameScope);
		((INameScope)nameScope).RegisterName("_bb2_status", (object)label);
		if (label.StyleId == null)
		{
			label.StyleId = "_bb2_status";
		}
		NameScope.SetNameScope(image2, nameScope);
		((INameScope)nameScope).RegisterName("_bb2_battery", (object)image2);
		if (image2.StyleId == null)
		{
			image2.StyleId = "_bb2_battery";
		}
		NameScope.SetNameScope(label2, nameScope);
		((INameScope)nameScope).RegisterName("_bb2_collecting", (object)label2);
		if (label2.StyleId == null)
		{
			label2.StyleId = "_bb2_collecting";
		}
		NameScope.SetNameScope(activ8ClickableFrame2, nameScope);
		((INameScope)nameScope).RegisterName("_raw_box", (object)activ8ClickableFrame2);
		if (activ8ClickableFrame2.StyleId == null)
		{
			activ8ClickableFrame2.StyleId = "_raw_box";
		}
		NameScope.SetNameScope(stackLayout3, nameScope);
		NameScope.SetNameScope(label3, nameScope);
		NameScope.SetNameScope(label4, nameScope);
		((INameScope)nameScope).RegisterName("_raw_date", (object)label4);
		if (label4.StyleId == null)
		{
			label4.StyleId = "_raw_date";
		}
		NameScope.SetNameScope(blueButton, nameScope);
		((INameScope)nameScope).RegisterName("_raw_action", (object)blueButton);
		if (blueButton.StyleId == null)
		{
			blueButton.StyleId = "_raw_action";
		}
		NameScope.SetNameScope(activ8ClickableFrame3, nameScope);
		((INameScope)nameScope).RegisterName("_fw_box", (object)activ8ClickableFrame3);
		if (activ8ClickableFrame3.StyleId == null)
		{
			activ8ClickableFrame3.StyleId = "_fw_box";
		}
		NameScope.SetNameScope(stackLayout4, nameScope);
		NameScope.SetNameScope(label5, nameScope);
		NameScope.SetNameScope(label6, nameScope);
		((INameScope)nameScope).RegisterName("_fw_version", (object)label6);
		if (label6.StyleId == null)
		{
			label6.StyleId = "_fw_version";
		}
		NameScope.SetNameScope(label7, nameScope);
		((INameScope)nameScope).RegisterName("_fw_summary", (object)label7);
		if (label7.StyleId == null)
		{
			label7.StyleId = "_fw_summary";
		}
		NameScope.SetNameScope(label8, nameScope);
		((INameScope)nameScope).RegisterName("_fw_warning", (object)label8);
		if (label8.StyleId == null)
		{
			label8.StyleId = "_fw_warning";
		}
		NameScope.SetNameScope(blueButton2, nameScope);
		((INameScope)nameScope).RegisterName("_fw_action", (object)blueButton2);
		if (blueButton2.StyleId == null)
		{
			blueButton2.StyleId = "_fw_action";
		}
		NameScope.SetNameScope(stackLayout5, nameScope);
		NameScope.SetNameScope(image3, nameScope);
		NameScope.SetNameScope(label9, nameScope);
		NameScope.SetNameScope(@switch, nameScope);
		((INameScope)nameScope).RegisterName("_activity_nudge", (object)@switch);
		if (@switch.StyleId == null)
		{
			@switch.StyleId = "_activity_nudge";
		}
		NameScope.SetNameScope(stackLayout7, nameScope);
		((INameScope)nameScope).RegisterName("_activity_nudge_inner", (object)stackLayout7);
		if (stackLayout7.StyleId == null)
		{
			stackLayout7.StyleId = "_activity_nudge_inner";
		}
		NameScope.SetNameScope(stackLayout6, nameScope);
		NameScope.SetNameScope(label10, nameScope);
		NameScope.SetNameScope(activ8ClickableHelpButton, nameScope);
		((INameScope)nameScope).RegisterName("_activity_nudge_help", (object)activ8ClickableHelpButton);
		if (activ8ClickableHelpButton.StyleId == null)
		{
			activ8ClickableHelpButton.StyleId = "_activity_nudge_help";
		}
		NameScope.SetNameScope(activ8ClickableFrame4, nameScope);
		((INameScope)nameScope).RegisterName("_activity_nudge_help_msg", (object)activ8ClickableFrame4);
		if (activ8ClickableFrame4.StyleId == null)
		{
			activ8ClickableFrame4.StyleId = "_activity_nudge_help_msg";
		}
		NameScope.SetNameScope(label11, nameScope);
		NameScope.SetNameScope(label12, nameScope);
		NameScope.SetNameScope(activ8Picker, nameScope);
		((INameScope)nameScope).RegisterName("_inactivity_time_picker", (object)activ8Picker);
		if (activ8Picker.StyleId == null)
		{
			activ8Picker.StyleId = "_inactivity_time_picker";
		}
		NameScope.SetNameScope(activ8DividingBar, nameScope);
		((INameScope)nameScope).RegisterName("_activity_bottom_bar", (object)activ8DividingBar);
		if (activ8DividingBar.StyleId == null)
		{
			activ8DividingBar.StyleId = "_activity_bottom_bar";
		}
		NameScope.SetNameScope(stackLayout8, nameScope);
		NameScope.SetNameScope(image4, nameScope);
		NameScope.SetNameScope(label13, nameScope);
		NameScope.SetNameScope(activ8ClickableLabel, nameScope);
		((INameScope)nameScope).RegisterName("_alarms", (object)activ8ClickableLabel);
		if (activ8ClickableLabel.StyleId == null)
		{
			activ8ClickableLabel.StyleId = "_alarms";
		}
		NameScope.SetNameScope(stackLayout10, nameScope);
		((INameScope)nameScope).RegisterName("_alarms_inner", (object)stackLayout10);
		if (stackLayout10.StyleId == null)
		{
			stackLayout10.StyleId = "_alarms_inner";
		}
		NameScope.SetNameScope(stackLayout9, nameScope);
		NameScope.SetNameScope(label14, nameScope);
		NameScope.SetNameScope(activ8ClickableHelpButton2, nameScope);
		((INameScope)nameScope).RegisterName("_alarms_help", (object)activ8ClickableHelpButton2);
		if (activ8ClickableHelpButton2.StyleId == null)
		{
			activ8ClickableHelpButton2.StyleId = "_alarms_help";
		}
		NameScope.SetNameScope(activ8ClickableFrame5, nameScope);
		((INameScope)nameScope).RegisterName("_alarms_help_msg", (object)activ8ClickableFrame5);
		if (activ8ClickableFrame5.StyleId == null)
		{
			activ8ClickableFrame5.StyleId = "_alarms_help_msg";
		}
		NameScope.SetNameScope(label15, nameScope);
		NameScope.SetNameScope(grid, nameScope);
		NameScope.SetNameScope(rowDefinition, nameScope);
		NameScope.SetNameScope(rowDefinition2, nameScope);
		NameScope.SetNameScope(rowDefinition3, nameScope);
		NameScope.SetNameScope(rowDefinition4, nameScope);
		NameScope.SetNameScope(rowDefinition5, nameScope);
		NameScope.SetNameScope(rowDefinition6, nameScope);
		NameScope.SetNameScope(columnDefinition, nameScope);
		NameScope.SetNameScope(columnDefinition2, nameScope);
		NameScope.SetNameScope(label16, nameScope);
		((INameScope)nameScope).RegisterName("_alarm1_summary", (object)label16);
		if (label16.StyleId == null)
		{
			label16.StyleId = "_alarm1_summary";
		}
		NameScope.SetNameScope(label17, nameScope);
		((INameScope)nameScope).RegisterName("_alarm1_info", (object)label17);
		if (label17.StyleId == null)
		{
			label17.StyleId = "_alarm1_info";
		}
		NameScope.SetNameScope(blueButton3, nameScope);
		((INameScope)nameScope).RegisterName("_alarm1", (object)blueButton3);
		if (blueButton3.StyleId == null)
		{
			blueButton3.StyleId = "_alarm1";
		}
		NameScope.SetNameScope(label18, nameScope);
		((INameScope)nameScope).RegisterName("_alarm2_summary", (object)label18);
		if (label18.StyleId == null)
		{
			label18.StyleId = "_alarm2_summary";
		}
		NameScope.SetNameScope(label19, nameScope);
		((INameScope)nameScope).RegisterName("_alarm2_info", (object)label19);
		if (label19.StyleId == null)
		{
			label19.StyleId = "_alarm2_info";
		}
		NameScope.SetNameScope(blueButton4, nameScope);
		((INameScope)nameScope).RegisterName("_alarm2", (object)blueButton4);
		if (blueButton4.StyleId == null)
		{
			blueButton4.StyleId = "_alarm2";
		}
		NameScope.SetNameScope(label20, nameScope);
		((INameScope)nameScope).RegisterName("_alarm3_summary", (object)label20);
		if (label20.StyleId == null)
		{
			label20.StyleId = "_alarm3_summary";
		}
		NameScope.SetNameScope(label21, nameScope);
		((INameScope)nameScope).RegisterName("_alarm3_info", (object)label21);
		if (label21.StyleId == null)
		{
			label21.StyleId = "_alarm3_info";
		}
		NameScope.SetNameScope(blueButton5, nameScope);
		((INameScope)nameScope).RegisterName("_alarm3", (object)blueButton5);
		if (blueButton5.StyleId == null)
		{
			blueButton5.StyleId = "_alarm3";
		}
		NameScope.SetNameScope(activ8DividingBar2, nameScope);
		((INameScope)nameScope).RegisterName("_alarms_bottom_bar", (object)activ8DividingBar2);
		if (activ8DividingBar2.StyleId == null)
		{
			activ8DividingBar2.StyleId = "_alarms_bottom_bar";
		}
		NameScope.SetNameScope(stackLayout11, nameScope);
		NameScope.SetNameScope(image5, nameScope);
		NameScope.SetNameScope(label22, nameScope);
		NameScope.SetNameScope(switch2, nameScope);
		((INameScope)nameScope).RegisterName("_sleep_schedule", (object)switch2);
		if (switch2.StyleId == null)
		{
			switch2.StyleId = "_sleep_schedule";
		}
		NameScope.SetNameScope(stackLayout13, nameScope);
		((INameScope)nameScope).RegisterName("_sleep_schedule_inner", (object)stackLayout13);
		if (stackLayout13.StyleId == null)
		{
			stackLayout13.StyleId = "_sleep_schedule_inner";
		}
		NameScope.SetNameScope(stackLayout12, nameScope);
		NameScope.SetNameScope(label23, nameScope);
		NameScope.SetNameScope(activ8ClickableHelpButton3, nameScope);
		((INameScope)nameScope).RegisterName("_sleep_schedule_help", (object)activ8ClickableHelpButton3);
		if (activ8ClickableHelpButton3.StyleId == null)
		{
			activ8ClickableHelpButton3.StyleId = "_sleep_schedule_help";
		}
		NameScope.SetNameScope(activ8ClickableFrame6, nameScope);
		((INameScope)nameScope).RegisterName("_sleep_schedule_help_msg", (object)activ8ClickableFrame6);
		if (activ8ClickableFrame6.StyleId == null)
		{
			activ8ClickableFrame6.StyleId = "_sleep_schedule_help_msg";
		}
		NameScope.SetNameScope(label24, nameScope);
		NameScope.SetNameScope(label25, nameScope);
		NameScope.SetNameScope(activ8TimePicker, nameScope);
		((INameScope)nameScope).RegisterName("_sleepstart_time", (object)activ8TimePicker);
		if (activ8TimePicker.StyleId == null)
		{
			activ8TimePicker.StyleId = "_sleepstart_time";
		}
		NameScope.SetNameScope(label26, nameScope);
		NameScope.SetNameScope(activ8TimePicker2, nameScope);
		((INameScope)nameScope).RegisterName("_sleepend_time", (object)activ8TimePicker2);
		if (activ8TimePicker2.StyleId == null)
		{
			activ8TimePicker2.StyleId = "_sleepend_time";
		}
		NameScope.SetNameScope(activ8DividingBar3, nameScope);
		((INameScope)nameScope).RegisterName("_sleep_schedule_bottom_bar", (object)activ8DividingBar3);
		if (activ8DividingBar3.StyleId == null)
		{
			activ8DividingBar3.StyleId = "_sleep_schedule_bottom_bar";
		}
		NameScope.SetNameScope(stackLayout18, nameScope);
		((INameScope)nameScope).RegisterName("_trackers_outer", (object)stackLayout18);
		if (stackLayout18.StyleId == null)
		{
			stackLayout18.StyleId = "_trackers_outer";
		}
		NameScope.SetNameScope(stackLayout14, nameScope);
		NameScope.SetNameScope(image6, nameScope);
		NameScope.SetNameScope(label27, nameScope);
		NameScope.SetNameScope(activ8ClickableLabel2, nameScope);
		((INameScope)nameScope).RegisterName("_trackers", (object)activ8ClickableLabel2);
		if (activ8ClickableLabel2.StyleId == null)
		{
			activ8ClickableLabel2.StyleId = "_trackers";
		}
		NameScope.SetNameScope(stackLayout17, nameScope);
		((INameScope)nameScope).RegisterName("_trackers_inner", (object)stackLayout17);
		if (stackLayout17.StyleId == null)
		{
			stackLayout17.StyleId = "_trackers_inner";
		}
		NameScope.SetNameScope(stackLayout15, nameScope);
		((INameScope)nameScope).RegisterName("_trackers_innermost", (object)stackLayout15);
		if (stackLayout15.StyleId == null)
		{
			stackLayout15.StyleId = "_trackers_innermost";
		}
		NameScope.SetNameScope(label28, nameScope);
		NameScope.SetNameScope(label29, nameScope);
		NameScope.SetNameScope(label30, nameScope);
		NameScope.SetNameScope(activ8Picker2, nameScope);
		((INameScope)nameScope).RegisterName("_trackers_picker", (object)activ8Picker2);
		if (activ8Picker2.StyleId == null)
		{
			activ8Picker2.StyleId = "_trackers_picker";
		}
		NameScope.SetNameScope(label31, nameScope);
		NameScope.SetNameScope(activ8Picker3, nameScope);
		((INameScope)nameScope).RegisterName("_dbltap", (object)activ8Picker3);
		if (activ8Picker3.StyleId == null)
		{
			activ8Picker3.StyleId = "_dbltap";
		}
		NameScope.SetNameScope(activ8ClickableFrame7, nameScope);
		((INameScope)nameScope).RegisterName("_no_trackers", (object)activ8ClickableFrame7);
		if (activ8ClickableFrame7.StyleId == null)
		{
			activ8ClickableFrame7.StyleId = "_no_trackers";
		}
		NameScope.SetNameScope(stackLayout16, nameScope);
		NameScope.SetNameScope(label32, nameScope);
		NameScope.SetNameScope(label33, nameScope);
		NameScope.SetNameScope(stackLayout20, nameScope);
		NameScope.SetNameScope(activ8DividingBar4, nameScope);
		NameScope.SetNameScope(label34, nameScope);
		NameScope.SetNameScope(stackLayout19, nameScope);
		NameScope.SetNameScope(label35, nameScope);
		NameScope.SetNameScope(activ8ClickableHelpButton4, nameScope);
		((INameScope)nameScope).RegisterName("_unpair_help", (object)activ8ClickableHelpButton4);
		if (activ8ClickableHelpButton4.StyleId == null)
		{
			activ8ClickableHelpButton4.StyleId = "_unpair_help";
		}
		NameScope.SetNameScope(activ8ClickableFrame8, nameScope);
		((INameScope)nameScope).RegisterName("_unpair_help_msg", (object)activ8ClickableFrame8);
		if (activ8ClickableFrame8.StyleId == null)
		{
			activ8ClickableFrame8.StyleId = "_unpair_help_msg";
		}
		NameScope.SetNameScope(label36, nameScope);
		NameScope.SetNameScope(blueButton6, nameScope);
		((INameScope)nameScope).RegisterName("_unpair", (object)blueButton6);
		if (blueButton6.StyleId == null)
		{
			blueButton6.StyleId = "_unpair";
		}
		_outer = scrollView;
		_bb2_status = label;
		_bb2_battery = image2;
		_bb2_collecting = label2;
		_raw_box = activ8ClickableFrame2;
		_raw_date = label4;
		_raw_action = blueButton;
		_fw_box = activ8ClickableFrame3;
		_fw_version = label6;
		_fw_summary = label7;
		_fw_warning = label8;
		_fw_action = blueButton2;
		_activity_nudge = @switch;
		_activity_nudge_inner = stackLayout7;
		_activity_nudge_help = activ8ClickableHelpButton;
		_activity_nudge_help_msg = activ8ClickableFrame4;
		_inactivity_time_picker = activ8Picker;
		_activity_bottom_bar = activ8DividingBar;
		_alarms = activ8ClickableLabel;
		_alarms_inner = stackLayout10;
		_alarms_help = activ8ClickableHelpButton2;
		_alarms_help_msg = activ8ClickableFrame5;
		_alarm1_summary = label16;
		_alarm1_info = label17;
		_alarm1 = blueButton3;
		_alarm2_summary = label18;
		_alarm2_info = label19;
		_alarm2 = blueButton4;
		_alarm3_summary = label20;
		_alarm3_info = label21;
		_alarm3 = blueButton5;
		_alarms_bottom_bar = activ8DividingBar2;
		_sleep_schedule = switch2;
		_sleep_schedule_inner = stackLayout13;
		_sleep_schedule_help = activ8ClickableHelpButton3;
		_sleep_schedule_help_msg = activ8ClickableFrame6;
		_sleepstart_time = activ8TimePicker;
		_sleepend_time = activ8TimePicker2;
		_sleep_schedule_bottom_bar = activ8DividingBar3;
		_trackers_outer = stackLayout18;
		_trackers = activ8ClickableLabel2;
		_trackers_inner = stackLayout17;
		_trackers_innermost = stackLayout15;
		_trackers_picker = activ8Picker2;
		_dbltap = activ8Picker3;
		_no_trackers = activ8ClickableFrame7;
		_unpair_help = activ8ClickableHelpButton4;
		_unpair_help_msg = activ8ClickableFrame8;
		_unpair = blueButton6;
		staticResourceExtension.Key = "PageBGColor";
		StaticResourceExtension staticResourceExtension46 = staticResourceExtension;
		XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
		Type typeFromHandle = typeof(IProvideValueTarget);
		object[] array = new object[0 + 1];
		array[0] = this;
		xamlServiceProvider.Add(typeFromHandle, new SimpleValueTargetProvider(array, VisualElement.BackgroundColorProperty));
		xamlServiceProvider.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle2 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
		xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(7, 9)));
		object obj = ((IMarkupExtension)staticResourceExtension46).ProvideValue((IServiceProvider)xamlServiceProvider);
		BackgroundColor = (Xamarin.Forms.Color)obj;
		stackLayout21.SetValue(StackLayout.SpacingProperty, 10.0);
		stackLayout21.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		activ8ClickableFrame.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		activ8ClickableFrame.SetValue(View.MarginProperty, new Thickness(0.0));
		activ8ClickableFrame.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(20.0));
		stackLayout2.SetValue(StackLayout.OrientationProperty, StackOrientation.Vertical);
		stackLayout2.SetValue(StackLayout.SpacingProperty, 10.0);
		stackLayout.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		image.SetValue(VisualElement.WidthRequestProperty, 60.0);
		image.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("device_icon_bb2.png"));
		image.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		stackLayout.Children.Add(image);
		label.SetValue(Label.TextProperty, "Unknown");
		Label label37 = label;
		BindableProperty fontSizeProperty = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
		Type typeFromHandle3 = typeof(IProvideValueTarget);
		object[] array2 = new object[0 + 7];
		array2[0] = label;
		array2[1] = stackLayout;
		array2[2] = stackLayout2;
		array2[3] = activ8ClickableFrame;
		array2[4] = stackLayout21;
		array2[5] = scrollView;
		array2[6] = this;
		xamlServiceProvider2.Add(typeFromHandle3, new SimpleValueTargetProvider(array2, Label.FontSizeProperty));
		xamlServiceProvider2.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle4 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
		xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver2.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver2.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(16, 72)));
		label37.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider2));
		staticResourceExtension2.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension47 = staticResourceExtension2;
		XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
		Type typeFromHandle5 = typeof(IProvideValueTarget);
		object[] array3 = new object[0 + 7];
		array3[0] = label;
		array3[1] = stackLayout;
		array3[2] = stackLayout2;
		array3[3] = activ8ClickableFrame;
		array3[4] = stackLayout21;
		array3[5] = scrollView;
		array3[6] = this;
		xamlServiceProvider3.Add(typeFromHandle5, new SimpleValueTargetProvider(array3, Label.TextColorProperty));
		xamlServiceProvider3.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle6 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
		xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver3.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver3.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(16, 86)));
		object obj2 = ((IMarkupExtension)staticResourceExtension47).ProvideValue((IServiceProvider)xamlServiceProvider3);
		label.TextColor = (Xamarin.Forms.Color)obj2;
		label.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		stackLayout.Children.Add(label);
		image2.SetValue(VisualElement.HeightRequestProperty, 18.0);
		image2.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("battery_5"));
		image2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		image2.SetValue(VisualElement.RotationProperty, 270.0);
		stackLayout.Children.Add(image2);
		stackLayout2.Children.Add(stackLayout);
		label2.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("false"));
		label2.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Collecting Raw Data");
		Label label38 = label2;
		BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
		Type typeFromHandle7 = typeof(IProvideValueTarget);
		object[] array4 = new object[0 + 6];
		array4[0] = label2;
		array4[1] = stackLayout2;
		array4[2] = activ8ClickableFrame;
		array4[3] = stackLayout21;
		array4[4] = scrollView;
		array4[5] = this;
		xamlServiceProvider4.Add(typeFromHandle7, new SimpleValueTargetProvider(array4, Label.FontSizeProperty));
		xamlServiceProvider4.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle8 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
		xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver4.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver4.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(19, 118)));
		label38.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("10", (IServiceProvider)xamlServiceProvider4));
		staticResourceExtension3.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension48 = staticResourceExtension3;
		XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
		Type typeFromHandle9 = typeof(IProvideValueTarget);
		object[] array5 = new object[0 + 6];
		array5[0] = label2;
		array5[1] = stackLayout2;
		array5[2] = activ8ClickableFrame;
		array5[3] = stackLayout21;
		array5[4] = scrollView;
		array5[5] = this;
		xamlServiceProvider5.Add(typeFromHandle9, new SimpleValueTargetProvider(array5, Label.TextColorProperty));
		xamlServiceProvider5.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle10 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
		xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver5.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver5.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(19, 132)));
		object obj3 = ((IMarkupExtension)staticResourceExtension48).ProvideValue((IServiceProvider)xamlServiceProvider5);
		label2.TextColor = (Xamarin.Forms.Color)obj3;
		label2.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label2.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label2.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		stackLayout2.Children.Add(label2);
		activ8ClickableFrame.SetValue(ContentView.ContentProperty, stackLayout2);
		stackLayout21.Children.Add(activ8ClickableFrame);
		activ8ClickableFrame2.SetValue(View.MarginProperty, new Thickness(0.0, 10.0, 0.0, 10.0));
		activ8ClickableFrame2.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		activ8ClickableFrame2.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("false"));
		stackLayout3.SetValue(StackLayout.OrientationProperty, StackOrientation.Vertical);
		stackLayout3.SetValue(StackLayout.SpacingProperty, 10.0);
		label3.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "A raw data set is ready to file.  It was collected");
		label3.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label39 = label3;
		BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
		Type typeFromHandle11 = typeof(IProvideValueTarget);
		object[] array6 = new object[0 + 6];
		array6[0] = label3;
		array6[1] = stackLayout3;
		array6[2] = activ8ClickableFrame2;
		array6[3] = stackLayout21;
		array6[4] = scrollView;
		array6[5] = this;
		xamlServiceProvider6.Add(typeFromHandle11, new SimpleValueTargetProvider(array6, Label.FontSizeProperty));
		xamlServiceProvider6.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle12 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
		xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver6.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver6.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(26, 139)));
		label39.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("20", (IServiceProvider)xamlServiceProvider6));
		label3.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension4.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension49 = staticResourceExtension4;
		XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
		Type typeFromHandle13 = typeof(IProvideValueTarget);
		object[] array7 = new object[0 + 6];
		array7[0] = label3;
		array7[1] = stackLayout3;
		array7[2] = activ8ClickableFrame2;
		array7[3] = stackLayout21;
		array7[4] = scrollView;
		array7[5] = this;
		xamlServiceProvider7.Add(typeFromHandle13, new SimpleValueTargetProvider(array7, Label.TextColorProperty));
		xamlServiceProvider7.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle14 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
		xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver7.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver7.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(26, 175)));
		object obj4 = ((IMarkupExtension)staticResourceExtension49).ProvideValue((IServiceProvider)xamlServiceProvider7);
		label3.TextColor = (Xamarin.Forms.Color)obj4;
		stackLayout3.Children.Add(label3);
		label4.SetValue(Label.TextProperty, "");
		label4.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label40 = label4;
		BindableProperty fontSizeProperty4 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter4 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
		Type typeFromHandle15 = typeof(IProvideValueTarget);
		object[] array8 = new object[0 + 6];
		array8[0] = label4;
		array8[1] = stackLayout3;
		array8[2] = activ8ClickableFrame2;
		array8[3] = stackLayout21;
		array8[4] = scrollView;
		array8[5] = this;
		xamlServiceProvider8.Add(typeFromHandle15, new SimpleValueTargetProvider(array8, Label.FontSizeProperty));
		xamlServiceProvider8.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle16 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
		xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver8.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver8.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(27, 92)));
		label40.SetValue(fontSizeProperty4, ((IExtendedTypeConverter)fontSizeConverter4).ConvertFromInvariantString("20", (IServiceProvider)xamlServiceProvider8));
		label4.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension5.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension50 = staticResourceExtension5;
		XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
		Type typeFromHandle17 = typeof(IProvideValueTarget);
		object[] array9 = new object[0 + 6];
		array9[0] = label4;
		array9[1] = stackLayout3;
		array9[2] = activ8ClickableFrame2;
		array9[3] = stackLayout21;
		array9[4] = scrollView;
		array9[5] = this;
		xamlServiceProvider9.Add(typeFromHandle17, new SimpleValueTargetProvider(array9, Label.TextColorProperty));
		xamlServiceProvider9.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle18 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
		xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver9.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver9.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(27, 128)));
		object obj5 = ((IMarkupExtension)staticResourceExtension50).ProvideValue((IServiceProvider)xamlServiceProvider9);
		label4.TextColor = (Xamarin.Forms.Color)obj5;
		stackLayout3.Children.Add(label4);
		blueButton.SetValue(View.MarginProperty, new Thickness(0.0, 10.0, 0.0, 0.0));
		blueButton.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "File now");
		blueButton.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		BlueButton blueButton7 = blueButton;
		BindableProperty fontSizeProperty5 = Button.FontSizeProperty;
		FontSizeConverter fontSizeConverter5 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
		Type typeFromHandle19 = typeof(IProvideValueTarget);
		object[] array10 = new object[0 + 6];
		array10[0] = blueButton;
		array10[1] = stackLayout3;
		array10[2] = activ8ClickableFrame2;
		array10[3] = stackLayout21;
		array10[4] = scrollView;
		array10[5] = this;
		xamlServiceProvider10.Add(typeFromHandle19, new SimpleValueTargetProvider(array10, Button.FontSizeProperty));
		xamlServiceProvider10.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle20 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
		xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver10.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver10.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(29, 145)));
		blueButton7.SetValue(fontSizeProperty5, ((IExtendedTypeConverter)fontSizeConverter5).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider10));
		blueButton.SetValue(Button.FontAttributesProperty, FontAttributes.Bold);
		stackLayout3.Children.Add(blueButton);
		activ8ClickableFrame2.SetValue(ContentView.ContentProperty, stackLayout3);
		stackLayout21.Children.Add(activ8ClickableFrame2);
		activ8ClickableFrame3.SetValue(View.MarginProperty, new Thickness(0.0, 10.0, 0.0, 10.0));
		activ8ClickableFrame3.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(10.0));
		activ8ClickableFrame3.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("false"));
		stackLayout4.SetValue(StackLayout.OrientationProperty, StackOrientation.Vertical);
		stackLayout4.SetValue(StackLayout.SpacingProperty, 10.0);
		label5.SetValue(Grid.RowProperty, 0);
		label5.SetValue(Grid.ColumnProperty, 0);
		label5.SetValue(Grid.ColumnSpanProperty, 2);
		label5.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "An upgrade is available for your BuddyBand2");
		label5.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label41 = label5;
		BindableProperty fontSizeProperty6 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter6 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
		Type typeFromHandle21 = typeof(IProvideValueTarget);
		object[] array11 = new object[0 + 6];
		array11[0] = label5;
		array11[1] = stackLayout4;
		array11[2] = activ8ClickableFrame3;
		array11[3] = stackLayout21;
		array11[4] = scrollView;
		array11[5] = this;
		xamlServiceProvider11.Add(typeFromHandle21, new SimpleValueTargetProvider(array11, Label.FontSizeProperty));
		xamlServiceProvider11.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle22 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
		xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver11.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver11.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(36, 181)));
		label41.SetValue(fontSizeProperty6, ((IExtendedTypeConverter)fontSizeConverter6).ConvertFromInvariantString("20", (IServiceProvider)xamlServiceProvider11));
		label5.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		staticResourceExtension6.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension51 = staticResourceExtension6;
		XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
		Type typeFromHandle23 = typeof(IProvideValueTarget);
		object[] array12 = new object[0 + 6];
		array12[0] = label5;
		array12[1] = stackLayout4;
		array12[2] = activ8ClickableFrame3;
		array12[3] = stackLayout21;
		array12[4] = scrollView;
		array12[5] = this;
		xamlServiceProvider12.Add(typeFromHandle23, new SimpleValueTargetProvider(array12, Label.TextColorProperty));
		xamlServiceProvider12.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle24 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
		xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver12.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver12.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(36, 217)));
		object obj6 = ((IMarkupExtension)staticResourceExtension51).ProvideValue((IServiceProvider)xamlServiceProvider12);
		label5.TextColor = (Xamarin.Forms.Color)obj6;
		stackLayout4.Children.Add(label5);
		label6.SetValue(Label.TextProperty, "31");
		Label label42 = label6;
		BindableProperty fontSizeProperty7 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter7 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
		Type typeFromHandle25 = typeof(IProvideValueTarget);
		object[] array13 = new object[0 + 6];
		array13[0] = label6;
		array13[1] = stackLayout4;
		array13[2] = activ8ClickableFrame3;
		array13[3] = stackLayout21;
		array13[4] = scrollView;
		array13[5] = this;
		xamlServiceProvider13.Add(typeFromHandle25, new SimpleValueTargetProvider(array13, Label.FontSizeProperty));
		xamlServiceProvider13.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle26 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
		xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver13.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver13.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(38, 63)));
		label42.SetValue(fontSizeProperty7, ((IExtendedTypeConverter)fontSizeConverter7).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider13));
		staticResourceExtension7.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension52 = staticResourceExtension7;
		XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
		Type typeFromHandle27 = typeof(IProvideValueTarget);
		object[] array14 = new object[0 + 6];
		array14[0] = label6;
		array14[1] = stackLayout4;
		array14[2] = activ8ClickableFrame3;
		array14[3] = stackLayout21;
		array14[4] = scrollView;
		array14[5] = this;
		xamlServiceProvider14.Add(typeFromHandle27, new SimpleValueTargetProvider(array14, Label.TextColorProperty));
		xamlServiceProvider14.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle28 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
		xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver14.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver14.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(38, 77)));
		object obj7 = ((IMarkupExtension)staticResourceExtension52).ProvideValue((IServiceProvider)xamlServiceProvider14);
		label6.TextColor = (Xamarin.Forms.Color)obj7;
		label6.SetValue(View.MarginProperty, new Thickness(0.0, 5.0, 0.0, 0.0));
		stackLayout4.Children.Add(label6);
		label7.SetValue(Label.TextProperty, "Bigger, Better, Improved");
		Label label43 = label7;
		BindableProperty fontSizeProperty8 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter8 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider15 = new XamlServiceProvider();
		Type typeFromHandle29 = typeof(IProvideValueTarget);
		object[] array15 = new object[0 + 6];
		array15[0] = label7;
		array15[1] = stackLayout4;
		array15[2] = activ8ClickableFrame3;
		array15[3] = stackLayout21;
		array15[4] = scrollView;
		array15[5] = this;
		xamlServiceProvider15.Add(typeFromHandle29, new SimpleValueTargetProvider(array15, Label.FontSizeProperty));
		xamlServiceProvider15.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle30 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver15 = new XmlNamespaceResolver();
		xmlNamespaceResolver15.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver15.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver15.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver15.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider15.Add(typeFromHandle30, new XamlTypeResolver(xmlNamespaceResolver15, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider15.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(39, 85)));
		label43.SetValue(fontSizeProperty8, ((IExtendedTypeConverter)fontSizeConverter8).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider15));
		staticResourceExtension8.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension53 = staticResourceExtension8;
		XamlServiceProvider xamlServiceProvider16 = new XamlServiceProvider();
		Type typeFromHandle31 = typeof(IProvideValueTarget);
		object[] array16 = new object[0 + 6];
		array16[0] = label7;
		array16[1] = stackLayout4;
		array16[2] = activ8ClickableFrame3;
		array16[3] = stackLayout21;
		array16[4] = scrollView;
		array16[5] = this;
		xamlServiceProvider16.Add(typeFromHandle31, new SimpleValueTargetProvider(array16, Label.TextColorProperty));
		xamlServiceProvider16.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle32 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver16 = new XmlNamespaceResolver();
		xmlNamespaceResolver16.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver16.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver16.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver16.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider16.Add(typeFromHandle32, new XamlTypeResolver(xmlNamespaceResolver16, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider16.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(39, 99)));
		object obj8 = ((IMarkupExtension)staticResourceExtension53).ProvideValue((IServiceProvider)xamlServiceProvider16);
		label7.TextColor = (Xamarin.Forms.Color)obj8;
		stackLayout4.Children.Add(label7);
		label8.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Before you can upgrade, you need to fully charge and synchronise your BuddyBand2");
		label8.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		Label label44 = label8;
		BindableProperty fontSizeProperty9 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter9 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider17 = new XamlServiceProvider();
		Type typeFromHandle33 = typeof(IProvideValueTarget);
		object[] array17 = new object[0 + 6];
		array17[0] = label8;
		array17[1] = stackLayout4;
		array17[2] = activ8ClickableFrame3;
		array17[3] = stackLayout21;
		array17[4] = scrollView;
		array17[5] = this;
		xamlServiceProvider17.Add(typeFromHandle33, new SimpleValueTargetProvider(array17, Label.FontSizeProperty));
		xamlServiceProvider17.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle34 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver17 = new XmlNamespaceResolver();
		xmlNamespaceResolver17.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver17.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver17.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver17.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider17.Add(typeFromHandle34, new XamlTypeResolver(xmlNamespaceResolver17, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider17.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(40, 179)));
		label44.SetValue(fontSizeProperty9, ((IExtendedTypeConverter)fontSizeConverter9).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider17));
		staticResourceExtension9.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension54 = staticResourceExtension9;
		XamlServiceProvider xamlServiceProvider18 = new XamlServiceProvider();
		Type typeFromHandle35 = typeof(IProvideValueTarget);
		object[] array18 = new object[0 + 6];
		array18[0] = label8;
		array18[1] = stackLayout4;
		array18[2] = activ8ClickableFrame3;
		array18[3] = stackLayout21;
		array18[4] = scrollView;
		array18[5] = this;
		xamlServiceProvider18.Add(typeFromHandle35, new SimpleValueTargetProvider(array18, Label.TextColorProperty));
		xamlServiceProvider18.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle36 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver18 = new XmlNamespaceResolver();
		xmlNamespaceResolver18.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver18.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver18.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver18.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider18.Add(typeFromHandle36, new XamlTypeResolver(xmlNamespaceResolver18, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider18.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(40, 193)));
		object obj9 = ((IMarkupExtension)staticResourceExtension54).ProvideValue((IServiceProvider)xamlServiceProvider18);
		label8.TextColor = (Xamarin.Forms.Color)obj9;
		stackLayout4.Children.Add(label8);
		blueButton2.SetValue(View.MarginProperty, new Thickness(0.0, 10.0, 0.0, 0.0));
		blueButton2.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Upgrade now");
		blueButton2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		BlueButton blueButton8 = blueButton2;
		BindableProperty fontSizeProperty10 = Button.FontSizeProperty;
		FontSizeConverter fontSizeConverter10 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider19 = new XamlServiceProvider();
		Type typeFromHandle37 = typeof(IProvideValueTarget);
		object[] array19 = new object[0 + 6];
		array19[0] = blueButton2;
		array19[1] = stackLayout4;
		array19[2] = activ8ClickableFrame3;
		array19[3] = stackLayout21;
		array19[4] = scrollView;
		array19[5] = this;
		xamlServiceProvider19.Add(typeFromHandle37, new SimpleValueTargetProvider(array19, Button.FontSizeProperty));
		xamlServiceProvider19.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle38 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver19 = new XmlNamespaceResolver();
		xmlNamespaceResolver19.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver19.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver19.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver19.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider19.Add(typeFromHandle38, new XamlTypeResolver(xmlNamespaceResolver19, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider19.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(42, 147)));
		blueButton8.SetValue(fontSizeProperty10, ((IExtendedTypeConverter)fontSizeConverter10).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider19));
		blueButton2.SetValue(Button.FontAttributesProperty, FontAttributes.Bold);
		stackLayout4.Children.Add(blueButton2);
		activ8ClickableFrame3.SetValue(ContentView.ContentProperty, stackLayout4);
		stackLayout21.Children.Add(activ8ClickableFrame3);
		stackLayout5.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout5.SetValue(View.MarginProperty, new Thickness(0.0, 5.0, 0.0, 5.0));
		image3.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("bb2_activity_nudge"));
		image3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		image3.SetValue(VisualElement.HeightRequestProperty, 28.0);
		image3.SetValue(View.MarginProperty, new Thickness(0.0, 0.0, 10.0, 0.0));
		stackLayout5.Children.Add(image3);
		label9.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Activity Nudge");
		label9.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label9.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label45 = label9;
		BindableProperty fontSizeProperty11 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter11 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider20 = new XamlServiceProvider();
		Type typeFromHandle39 = typeof(IProvideValueTarget);
		object[] array20 = new object[0 + 5];
		array20[0] = label9;
		array20[1] = stackLayout5;
		array20[2] = stackLayout21;
		array20[3] = scrollView;
		array20[4] = this;
		xamlServiceProvider20.Add(typeFromHandle39, new SimpleValueTargetProvider(array20, Label.FontSizeProperty));
		xamlServiceProvider20.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle40 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver20 = new XmlNamespaceResolver();
		xmlNamespaceResolver20.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver20.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver20.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver20.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider20.Add(typeFromHandle40, new XamlTypeResolver(xmlNamespaceResolver20, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider20.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(48, 102)));
		label45.SetValue(fontSizeProperty11, ((IExtendedTypeConverter)fontSizeConverter11).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider20));
		staticResourceExtension10.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension55 = staticResourceExtension10;
		XamlServiceProvider xamlServiceProvider21 = new XamlServiceProvider();
		Type typeFromHandle41 = typeof(IProvideValueTarget);
		object[] array21 = new object[0 + 5];
		array21[0] = label9;
		array21[1] = stackLayout5;
		array21[2] = stackLayout21;
		array21[3] = scrollView;
		array21[4] = this;
		xamlServiceProvider21.Add(typeFromHandle41, new SimpleValueTargetProvider(array21, Label.TextColorProperty));
		xamlServiceProvider21.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle42 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver21 = new XmlNamespaceResolver();
		xmlNamespaceResolver21.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver21.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver21.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver21.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider21.Add(typeFromHandle42, new XamlTypeResolver(xmlNamespaceResolver21, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider21.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(48, 116)));
		object obj10 = ((IMarkupExtension)staticResourceExtension55).ProvideValue((IServiceProvider)xamlServiceProvider21);
		label9.TextColor = (Xamarin.Forms.Color)obj10;
		label9.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		stackLayout5.Children.Add(label9);
		@switch.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		stackLayout5.Children.Add(@switch);
		stackLayout21.Children.Add(stackLayout5);
		stackLayout7.SetValue(StackLayout.OrientationProperty, StackOrientation.Vertical);
		stackLayout7.SetValue(StackLayout.SpacingProperty, 10.0);
		stackLayout6.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		label10.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Set your BuddyBand2 to remind you to get moving after a period of inactivity");
		label10.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label10.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label46 = label10;
		BindableProperty fontSizeProperty12 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter12 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider22 = new XamlServiceProvider();
		Type typeFromHandle43 = typeof(IProvideValueTarget);
		object[] array22 = new object[0 + 6];
		array22[0] = label10;
		array22[1] = stackLayout6;
		array22[2] = stackLayout7;
		array22[3] = stackLayout21;
		array22[4] = scrollView;
		array22[5] = this;
		xamlServiceProvider22.Add(typeFromHandle43, new SimpleValueTargetProvider(array22, Label.FontSizeProperty));
		xamlServiceProvider22.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle44 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver22 = new XmlNamespaceResolver();
		xmlNamespaceResolver22.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver22.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver22.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver22.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider22.Add(typeFromHandle44, new XamlTypeResolver(xmlNamespaceResolver22, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider22.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(54, 183)));
		label46.SetValue(fontSizeProperty12, ((IExtendedTypeConverter)fontSizeConverter12).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider22));
		staticResourceExtension11.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension56 = staticResourceExtension11;
		XamlServiceProvider xamlServiceProvider23 = new XamlServiceProvider();
		Type typeFromHandle45 = typeof(IProvideValueTarget);
		object[] array23 = new object[0 + 6];
		array23[0] = label10;
		array23[1] = stackLayout6;
		array23[2] = stackLayout7;
		array23[3] = stackLayout21;
		array23[4] = scrollView;
		array23[5] = this;
		xamlServiceProvider23.Add(typeFromHandle45, new SimpleValueTargetProvider(array23, Label.TextColorProperty));
		xamlServiceProvider23.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle46 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver23 = new XmlNamespaceResolver();
		xmlNamespaceResolver23.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver23.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver23.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver23.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider23.Add(typeFromHandle46, new XamlTypeResolver(xmlNamespaceResolver23, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider23.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(54, 197)));
		object obj11 = ((IMarkupExtension)staticResourceExtension56).ProvideValue((IServiceProvider)xamlServiceProvider23);
		label10.TextColor = (Xamarin.Forms.Color)obj11;
		stackLayout6.Children.Add(label10);
		stackLayout6.Children.Add(activ8ClickableHelpButton);
		stackLayout7.Children.Add(stackLayout6);
		activ8ClickableFrame4.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(15.0));
		activ8ClickableFrame4.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("false"));
		label11.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "This feature is automatically disabled when Sleep Mode is active");
		label11.SetValue(View.HorizontalOptionsProperty, LayoutOptions.CenterAndExpand);
		label11.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		label11.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label47 = label11;
		BindableProperty fontSizeProperty13 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter13 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider24 = new XamlServiceProvider();
		Type typeFromHandle47 = typeof(IProvideValueTarget);
		object[] array24 = new object[0 + 6];
		array24[0] = label11;
		array24[1] = activ8ClickableFrame4;
		array24[2] = stackLayout7;
		array24[3] = stackLayout21;
		array24[4] = scrollView;
		array24[5] = this;
		xamlServiceProvider24.Add(typeFromHandle47, new SimpleValueTargetProvider(array24, Label.FontSizeProperty));
		xamlServiceProvider24.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle48 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver24 = new XmlNamespaceResolver();
		xmlNamespaceResolver24.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver24.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver24.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver24.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider24.Add(typeFromHandle48, new XamlTypeResolver(xmlNamespaceResolver24, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider24.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(59, 214)));
		label47.SetValue(fontSizeProperty13, ((IExtendedTypeConverter)fontSizeConverter13).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider24));
		staticResourceExtension12.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension57 = staticResourceExtension12;
		XamlServiceProvider xamlServiceProvider25 = new XamlServiceProvider();
		Type typeFromHandle49 = typeof(IProvideValueTarget);
		object[] array25 = new object[0 + 6];
		array25[0] = label11;
		array25[1] = activ8ClickableFrame4;
		array25[2] = stackLayout7;
		array25[3] = stackLayout21;
		array25[4] = scrollView;
		array25[5] = this;
		xamlServiceProvider25.Add(typeFromHandle49, new SimpleValueTargetProvider(array25, Label.TextColorProperty));
		xamlServiceProvider25.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle50 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver25 = new XmlNamespaceResolver();
		xmlNamespaceResolver25.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver25.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver25.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver25.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider25.Add(typeFromHandle50, new XamlTypeResolver(xmlNamespaceResolver25, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider25.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(59, 228)));
		object obj12 = ((IMarkupExtension)staticResourceExtension57).ProvideValue((IServiceProvider)xamlServiceProvider25);
		label11.TextColor = (Xamarin.Forms.Color)obj12;
		activ8ClickableFrame4.SetValue(ContentView.ContentProperty, label11);
		stackLayout7.Children.Add(activ8ClickableFrame4);
		label12.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Inactivity Time");
		label12.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label12.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label48 = label12;
		BindableProperty fontSizeProperty14 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter14 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider26 = new XamlServiceProvider();
		Type typeFromHandle51 = typeof(IProvideValueTarget);
		object[] array26 = new object[0 + 5];
		array26[0] = label12;
		array26[1] = stackLayout7;
		array26[2] = stackLayout21;
		array26[3] = scrollView;
		array26[4] = this;
		xamlServiceProvider26.Add(typeFromHandle51, new SimpleValueTargetProvider(array26, Label.FontSizeProperty));
		xamlServiceProvider26.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle52 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver26 = new XmlNamespaceResolver();
		xmlNamespaceResolver26.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver26.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver26.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver26.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider26.Add(typeFromHandle52, new XamlTypeResolver(xmlNamespaceResolver26, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider26.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(62, 118)));
		label48.SetValue(fontSizeProperty14, ((IExtendedTypeConverter)fontSizeConverter14).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider26));
		staticResourceExtension13.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension58 = staticResourceExtension13;
		XamlServiceProvider xamlServiceProvider27 = new XamlServiceProvider();
		Type typeFromHandle53 = typeof(IProvideValueTarget);
		object[] array27 = new object[0 + 5];
		array27[0] = label12;
		array27[1] = stackLayout7;
		array27[2] = stackLayout21;
		array27[3] = scrollView;
		array27[4] = this;
		xamlServiceProvider27.Add(typeFromHandle53, new SimpleValueTargetProvider(array27, Label.TextColorProperty));
		xamlServiceProvider27.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle54 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver27 = new XmlNamespaceResolver();
		xmlNamespaceResolver27.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver27.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver27.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver27.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider27.Add(typeFromHandle54, new XamlTypeResolver(xmlNamespaceResolver27, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider27.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(62, 132)));
		object obj13 = ((IMarkupExtension)staticResourceExtension58).ProvideValue((IServiceProvider)xamlServiceProvider27);
		label12.TextColor = (Xamarin.Forms.Color)obj13;
		label12.SetValue(View.MarginProperty, new Thickness(0.0, 5.0, 0.0, 0.0));
		stackLayout7.Children.Add(label12);
		activ8Picker.SetValue(Picker.TitleProperty, "Select period of inactivity");
		stackLayout7.Children.Add(activ8Picker);
		stackLayout21.Children.Add(stackLayout7);
		activ8DividingBar.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("false"));
		stackLayout21.Children.Add(activ8DividingBar);
		stackLayout8.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout8.SetValue(View.MarginProperty, new Thickness(0.0, 5.0, 0.0, 5.0));
		image4.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("bb2_alarms"));
		image4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		image4.SetValue(VisualElement.HeightRequestProperty, 28.0);
		image4.SetValue(View.MarginProperty, new Thickness(0.0, 0.0, 10.0, 0.0));
		stackLayout8.Children.Add(image4);
		label13.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Alarms");
		label13.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label13.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label49 = label13;
		BindableProperty fontSizeProperty15 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter15 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider28 = new XamlServiceProvider();
		Type typeFromHandle55 = typeof(IProvideValueTarget);
		object[] array28 = new object[0 + 5];
		array28[0] = label13;
		array28[1] = stackLayout8;
		array28[2] = stackLayout21;
		array28[3] = scrollView;
		array28[4] = this;
		xamlServiceProvider28.Add(typeFromHandle55, new SimpleValueTargetProvider(array28, Label.FontSizeProperty));
		xamlServiceProvider28.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle56 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver28 = new XmlNamespaceResolver();
		xmlNamespaceResolver28.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver28.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver28.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver28.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider28.Add(typeFromHandle56, new XamlTypeResolver(xmlNamespaceResolver28, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider28.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(71, 94)));
		label49.SetValue(fontSizeProperty15, ((IExtendedTypeConverter)fontSizeConverter15).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider28));
		staticResourceExtension14.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension59 = staticResourceExtension14;
		XamlServiceProvider xamlServiceProvider29 = new XamlServiceProvider();
		Type typeFromHandle57 = typeof(IProvideValueTarget);
		object[] array29 = new object[0 + 5];
		array29[0] = label13;
		array29[1] = stackLayout8;
		array29[2] = stackLayout21;
		array29[3] = scrollView;
		array29[4] = this;
		xamlServiceProvider29.Add(typeFromHandle57, new SimpleValueTargetProvider(array29, Label.TextColorProperty));
		xamlServiceProvider29.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle58 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver29 = new XmlNamespaceResolver();
		xmlNamespaceResolver29.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver29.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver29.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver29.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider29.Add(typeFromHandle58, new XamlTypeResolver(xmlNamespaceResolver29, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider29.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(71, 108)));
		object obj14 = ((IMarkupExtension)staticResourceExtension59).ProvideValue((IServiceProvider)xamlServiceProvider29);
		label13.TextColor = (Xamarin.Forms.Color)obj14;
		label13.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		stackLayout8.Children.Add(label13);
		activ8ClickableLabel.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		Activ8ClickableLabel activ8ClickableLabel3 = activ8ClickableLabel;
		BindableProperty fontSizeProperty16 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter16 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider30 = new XamlServiceProvider();
		Type typeFromHandle59 = typeof(IProvideValueTarget);
		object[] array30 = new object[0 + 5];
		array30[0] = activ8ClickableLabel;
		array30[1] = stackLayout8;
		array30[2] = stackLayout21;
		array30[3] = scrollView;
		array30[4] = this;
		xamlServiceProvider30.Add(typeFromHandle59, new SimpleValueTargetProvider(array30, Label.FontSizeProperty));
		xamlServiceProvider30.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle60 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver30 = new XmlNamespaceResolver();
		xmlNamespaceResolver30.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver30.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver30.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver30.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider30.Add(typeFromHandle60, new XamlTypeResolver(xmlNamespaceResolver30, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider30.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(72, 96)));
		activ8ClickableLabel3.SetValue(fontSizeProperty16, ((IExtendedTypeConverter)fontSizeConverter16).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider30));
		stackLayout8.Children.Add(activ8ClickableLabel);
		stackLayout21.Children.Add(stackLayout8);
		stackLayout10.SetValue(StackLayout.OrientationProperty, StackOrientation.Vertical);
		stackLayout10.SetValue(StackLayout.SpacingProperty, 10.0);
		stackLayout9.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		label14.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Set alarms to your BuddyBand2");
		label14.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label14.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label50 = label14;
		BindableProperty fontSizeProperty17 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter17 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider31 = new XamlServiceProvider();
		Type typeFromHandle61 = typeof(IProvideValueTarget);
		object[] array31 = new object[0 + 6];
		array31[0] = label14;
		array31[1] = stackLayout9;
		array31[2] = stackLayout10;
		array31[3] = stackLayout21;
		array31[4] = scrollView;
		array31[5] = this;
		xamlServiceProvider31.Add(typeFromHandle61, new SimpleValueTargetProvider(array31, Label.FontSizeProperty));
		xamlServiceProvider31.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle62 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver31 = new XmlNamespaceResolver();
		xmlNamespaceResolver31.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver31.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver31.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver31.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider31.Add(typeFromHandle62, new XamlTypeResolver(xmlNamespaceResolver31, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider31.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(77, 145)));
		label50.SetValue(fontSizeProperty17, ((IExtendedTypeConverter)fontSizeConverter17).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider31));
		staticResourceExtension15.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension60 = staticResourceExtension15;
		XamlServiceProvider xamlServiceProvider32 = new XamlServiceProvider();
		Type typeFromHandle63 = typeof(IProvideValueTarget);
		object[] array32 = new object[0 + 6];
		array32[0] = label14;
		array32[1] = stackLayout9;
		array32[2] = stackLayout10;
		array32[3] = stackLayout21;
		array32[4] = scrollView;
		array32[5] = this;
		xamlServiceProvider32.Add(typeFromHandle63, new SimpleValueTargetProvider(array32, Label.TextColorProperty));
		xamlServiceProvider32.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle64 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver32 = new XmlNamespaceResolver();
		xmlNamespaceResolver32.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver32.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver32.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver32.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider32.Add(typeFromHandle64, new XamlTypeResolver(xmlNamespaceResolver32, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider32.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(77, 159)));
		object obj15 = ((IMarkupExtension)staticResourceExtension60).ProvideValue((IServiceProvider)xamlServiceProvider32);
		label14.TextColor = (Xamarin.Forms.Color)obj15;
		stackLayout9.Children.Add(label14);
		stackLayout9.Children.Add(activ8ClickableHelpButton2);
		stackLayout10.Children.Add(stackLayout9);
		activ8ClickableFrame5.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(15.0));
		activ8ClickableFrame5.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("false"));
		label15.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Once set, it is not necessary for the BuddyBand2 to maintain a connection to the app for the alarms to work");
		label15.SetValue(View.HorizontalOptionsProperty, LayoutOptions.CenterAndExpand);
		label15.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		staticResourceExtension16.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension61 = staticResourceExtension16;
		XamlServiceProvider xamlServiceProvider33 = new XamlServiceProvider();
		Type typeFromHandle65 = typeof(IProvideValueTarget);
		object[] array33 = new object[0 + 6];
		array33[0] = label15;
		array33[1] = activ8ClickableFrame5;
		array33[2] = stackLayout10;
		array33[3] = stackLayout21;
		array33[4] = scrollView;
		array33[5] = this;
		xamlServiceProvider33.Add(typeFromHandle65, new SimpleValueTargetProvider(array33, Label.TextColorProperty));
		xamlServiceProvider33.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle66 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver33 = new XmlNamespaceResolver();
		xmlNamespaceResolver33.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver33.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver33.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver33.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider33.Add(typeFromHandle66, new XamlTypeResolver(xmlNamespaceResolver33, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider33.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(82, 232)));
		object obj16 = ((IMarkupExtension)staticResourceExtension61).ProvideValue((IServiceProvider)xamlServiceProvider33);
		label15.TextColor = (Xamarin.Forms.Color)obj16;
		Label label51 = label15;
		BindableProperty fontSizeProperty18 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter18 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider34 = new XamlServiceProvider();
		Type typeFromHandle67 = typeof(IProvideValueTarget);
		object[] array34 = new object[0 + 6];
		array34[0] = label15;
		array34[1] = activ8ClickableFrame5;
		array34[2] = stackLayout10;
		array34[3] = stackLayout21;
		array34[4] = scrollView;
		array34[5] = this;
		xamlServiceProvider34.Add(typeFromHandle67, new SimpleValueTargetProvider(array34, Label.FontSizeProperty));
		xamlServiceProvider34.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle68 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver34 = new XmlNamespaceResolver();
		xmlNamespaceResolver34.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver34.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver34.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver34.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider34.Add(typeFromHandle68, new XamlTypeResolver(xmlNamespaceResolver34, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider34.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(82, 275)));
		label51.SetValue(fontSizeProperty18, ((IExtendedTypeConverter)fontSizeConverter18).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider34));
		activ8ClickableFrame5.SetValue(ContentView.ContentProperty, label15);
		stackLayout10.Children.Add(activ8ClickableFrame5);
		grid.SetValue(Grid.RowSpacingProperty, 5.0);
		grid.SetValue(View.MarginProperty, new Thickness(0.0, 5.0, 0.0, 0.0));
		rowDefinition.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition);
		rowDefinition2.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition2);
		rowDefinition3.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition3);
		rowDefinition4.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition4);
		rowDefinition5.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition5);
		rowDefinition6.SetValue(RowDefinition.HeightProperty, new GridLengthTypeConverter().ConvertFromInvariantString("Auto"));
		((DefinitionCollection<RowDefinition>)grid.GetValue(Grid.RowDefinitionsProperty)).Add(rowDefinition6);
		columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
		((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
		columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
		((DefinitionCollection<ColumnDefinition>)grid.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
		label16.SetValue(Grid.RowProperty, 0);
		label16.SetValue(Grid.ColumnProperty, 0);
		label16.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label16.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
		label16.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label52 = label16;
		BindableProperty fontSizeProperty19 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter19 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider35 = new XamlServiceProvider();
		Type typeFromHandle69 = typeof(IProvideValueTarget);
		object[] array35 = new object[0 + 6];
		array35[0] = label16;
		array35[1] = grid;
		array35[2] = stackLayout10;
		array35[3] = stackLayout21;
		array35[4] = scrollView;
		array35[5] = this;
		xamlServiceProvider35.Add(typeFromHandle69, new SimpleValueTargetProvider(array35, Label.FontSizeProperty));
		xamlServiceProvider35.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle70 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver35 = new XmlNamespaceResolver();
		xmlNamespaceResolver35.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver35.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver35.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver35.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider35.Add(typeFromHandle70, new XamlTypeResolver(xmlNamespaceResolver35, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider35.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(99, 183)));
		label52.SetValue(fontSizeProperty19, ((IExtendedTypeConverter)fontSizeConverter19).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider35));
		staticResourceExtension17.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension62 = staticResourceExtension17;
		XamlServiceProvider xamlServiceProvider36 = new XamlServiceProvider();
		Type typeFromHandle71 = typeof(IProvideValueTarget);
		object[] array36 = new object[0 + 6];
		array36[0] = label16;
		array36[1] = grid;
		array36[2] = stackLayout10;
		array36[3] = stackLayout21;
		array36[4] = scrollView;
		array36[5] = this;
		xamlServiceProvider36.Add(typeFromHandle71, new SimpleValueTargetProvider(array36, Label.TextColorProperty));
		xamlServiceProvider36.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle72 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver36 = new XmlNamespaceResolver();
		xmlNamespaceResolver36.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver36.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver36.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver36.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider36.Add(typeFromHandle72, new XamlTypeResolver(xmlNamespaceResolver36, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider36.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(99, 197)));
		object obj17 = ((IMarkupExtension)staticResourceExtension62).ProvideValue((IServiceProvider)xamlServiceProvider36);
		label16.TextColor = (Xamarin.Forms.Color)obj17;
		label16.SetValue(View.MarginProperty, new Thickness(0.0));
		grid.Children.Add(label16);
		label17.SetValue(Grid.RowProperty, 1);
		label17.SetValue(Grid.ColumnProperty, 0);
		label17.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label17.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
		label17.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label53 = label17;
		BindableProperty fontSizeProperty20 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter20 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider37 = new XamlServiceProvider();
		Type typeFromHandle73 = typeof(IProvideValueTarget);
		object[] array37 = new object[0 + 6];
		array37[0] = label17;
		array37[1] = grid;
		array37[2] = stackLayout10;
		array37[3] = stackLayout21;
		array37[4] = scrollView;
		array37[5] = this;
		xamlServiceProvider37.Add(typeFromHandle73, new SimpleValueTargetProvider(array37, Label.FontSizeProperty));
		xamlServiceProvider37.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle74 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver37 = new XmlNamespaceResolver();
		xmlNamespaceResolver37.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver37.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver37.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver37.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider37.Add(typeFromHandle74, new XamlTypeResolver(xmlNamespaceResolver37, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider37.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(100, 172)));
		label53.SetValue(fontSizeProperty20, ((IExtendedTypeConverter)fontSizeConverter20).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider37));
		staticResourceExtension18.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension63 = staticResourceExtension18;
		XamlServiceProvider xamlServiceProvider38 = new XamlServiceProvider();
		Type typeFromHandle75 = typeof(IProvideValueTarget);
		object[] array38 = new object[0 + 6];
		array38[0] = label17;
		array38[1] = grid;
		array38[2] = stackLayout10;
		array38[3] = stackLayout21;
		array38[4] = scrollView;
		array38[5] = this;
		xamlServiceProvider38.Add(typeFromHandle75, new SimpleValueTargetProvider(array38, Label.TextColorProperty));
		xamlServiceProvider38.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle76 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver38 = new XmlNamespaceResolver();
		xmlNamespaceResolver38.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver38.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver38.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver38.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider38.Add(typeFromHandle76, new XamlTypeResolver(xmlNamespaceResolver38, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider38.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(100, 186)));
		object obj18 = ((IMarkupExtension)staticResourceExtension63).ProvideValue((IServiceProvider)xamlServiceProvider38);
		label17.TextColor = (Xamarin.Forms.Color)obj18;
		label17.SetValue(View.MarginProperty, new Thickness(0.0));
		grid.Children.Add(label17);
		blueButton3.SetValue(Grid.RowProperty, 0);
		blueButton3.SetValue(Grid.ColumnProperty, 1);
		blueButton3.SetValue(Grid.RowSpanProperty, 2);
		blueButton3.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Edit Alarm");
		blueButton3.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		grid.Children.Add(blueButton3);
		label18.SetValue(Grid.RowProperty, 2);
		label18.SetValue(Grid.ColumnProperty, 0);
		label18.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label18.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
		label18.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label54 = label18;
		BindableProperty fontSizeProperty21 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter21 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider39 = new XamlServiceProvider();
		Type typeFromHandle77 = typeof(IProvideValueTarget);
		object[] array39 = new object[0 + 6];
		array39[0] = label18;
		array39[1] = grid;
		array39[2] = stackLayout10;
		array39[3] = stackLayout21;
		array39[4] = scrollView;
		array39[5] = this;
		xamlServiceProvider39.Add(typeFromHandle77, new SimpleValueTargetProvider(array39, Label.FontSizeProperty));
		xamlServiceProvider39.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle78 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver39 = new XmlNamespaceResolver();
		xmlNamespaceResolver39.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver39.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver39.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver39.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider39.Add(typeFromHandle78, new XamlTypeResolver(xmlNamespaceResolver39, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider39.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(103, 183)));
		label54.SetValue(fontSizeProperty21, ((IExtendedTypeConverter)fontSizeConverter21).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider39));
		staticResourceExtension19.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension64 = staticResourceExtension19;
		XamlServiceProvider xamlServiceProvider40 = new XamlServiceProvider();
		Type typeFromHandle79 = typeof(IProvideValueTarget);
		object[] array40 = new object[0 + 6];
		array40[0] = label18;
		array40[1] = grid;
		array40[2] = stackLayout10;
		array40[3] = stackLayout21;
		array40[4] = scrollView;
		array40[5] = this;
		xamlServiceProvider40.Add(typeFromHandle79, new SimpleValueTargetProvider(array40, Label.TextColorProperty));
		xamlServiceProvider40.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle80 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver40 = new XmlNamespaceResolver();
		xmlNamespaceResolver40.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver40.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver40.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver40.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider40.Add(typeFromHandle80, new XamlTypeResolver(xmlNamespaceResolver40, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider40.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(103, 197)));
		object obj19 = ((IMarkupExtension)staticResourceExtension64).ProvideValue((IServiceProvider)xamlServiceProvider40);
		label18.TextColor = (Xamarin.Forms.Color)obj19;
		label18.SetValue(View.MarginProperty, new Thickness(0.0));
		grid.Children.Add(label18);
		label19.SetValue(Grid.RowProperty, 3);
		label19.SetValue(Grid.ColumnProperty, 0);
		label19.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label19.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
		label19.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label55 = label19;
		BindableProperty fontSizeProperty22 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter22 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider41 = new XamlServiceProvider();
		Type typeFromHandle81 = typeof(IProvideValueTarget);
		object[] array41 = new object[0 + 6];
		array41[0] = label19;
		array41[1] = grid;
		array41[2] = stackLayout10;
		array41[3] = stackLayout21;
		array41[4] = scrollView;
		array41[5] = this;
		xamlServiceProvider41.Add(typeFromHandle81, new SimpleValueTargetProvider(array41, Label.FontSizeProperty));
		xamlServiceProvider41.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle82 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver41 = new XmlNamespaceResolver();
		xmlNamespaceResolver41.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver41.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver41.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver41.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider41.Add(typeFromHandle82, new XamlTypeResolver(xmlNamespaceResolver41, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider41.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(104, 172)));
		label55.SetValue(fontSizeProperty22, ((IExtendedTypeConverter)fontSizeConverter22).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider41));
		staticResourceExtension20.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension65 = staticResourceExtension20;
		XamlServiceProvider xamlServiceProvider42 = new XamlServiceProvider();
		Type typeFromHandle83 = typeof(IProvideValueTarget);
		object[] array42 = new object[0 + 6];
		array42[0] = label19;
		array42[1] = grid;
		array42[2] = stackLayout10;
		array42[3] = stackLayout21;
		array42[4] = scrollView;
		array42[5] = this;
		xamlServiceProvider42.Add(typeFromHandle83, new SimpleValueTargetProvider(array42, Label.TextColorProperty));
		xamlServiceProvider42.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle84 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver42 = new XmlNamespaceResolver();
		xmlNamespaceResolver42.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver42.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver42.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver42.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider42.Add(typeFromHandle84, new XamlTypeResolver(xmlNamespaceResolver42, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider42.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(104, 186)));
		object obj20 = ((IMarkupExtension)staticResourceExtension65).ProvideValue((IServiceProvider)xamlServiceProvider42);
		label19.TextColor = (Xamarin.Forms.Color)obj20;
		label19.SetValue(View.MarginProperty, new Thickness(0.0));
		grid.Children.Add(label19);
		blueButton4.SetValue(Grid.RowProperty, 2);
		blueButton4.SetValue(Grid.ColumnProperty, 1);
		blueButton4.SetValue(Grid.RowSpanProperty, 2);
		blueButton4.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Edit Alarm");
		blueButton4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		grid.Children.Add(blueButton4);
		label20.SetValue(Grid.RowProperty, 4);
		label20.SetValue(Grid.ColumnProperty, 0);
		label20.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		label20.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
		label20.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label56 = label20;
		BindableProperty fontSizeProperty23 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter23 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider43 = new XamlServiceProvider();
		Type typeFromHandle85 = typeof(IProvideValueTarget);
		object[] array43 = new object[0 + 6];
		array43[0] = label20;
		array43[1] = grid;
		array43[2] = stackLayout10;
		array43[3] = stackLayout21;
		array43[4] = scrollView;
		array43[5] = this;
		xamlServiceProvider43.Add(typeFromHandle85, new SimpleValueTargetProvider(array43, Label.FontSizeProperty));
		xamlServiceProvider43.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle86 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver43 = new XmlNamespaceResolver();
		xmlNamespaceResolver43.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver43.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver43.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver43.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider43.Add(typeFromHandle86, new XamlTypeResolver(xmlNamespaceResolver43, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider43.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(107, 183)));
		label56.SetValue(fontSizeProperty23, ((IExtendedTypeConverter)fontSizeConverter23).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider43));
		staticResourceExtension21.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension66 = staticResourceExtension21;
		XamlServiceProvider xamlServiceProvider44 = new XamlServiceProvider();
		Type typeFromHandle87 = typeof(IProvideValueTarget);
		object[] array44 = new object[0 + 6];
		array44[0] = label20;
		array44[1] = grid;
		array44[2] = stackLayout10;
		array44[3] = stackLayout21;
		array44[4] = scrollView;
		array44[5] = this;
		xamlServiceProvider44.Add(typeFromHandle87, new SimpleValueTargetProvider(array44, Label.TextColorProperty));
		xamlServiceProvider44.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle88 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver44 = new XmlNamespaceResolver();
		xmlNamespaceResolver44.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver44.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver44.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver44.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider44.Add(typeFromHandle88, new XamlTypeResolver(xmlNamespaceResolver44, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider44.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(107, 197)));
		object obj21 = ((IMarkupExtension)staticResourceExtension66).ProvideValue((IServiceProvider)xamlServiceProvider44);
		label20.TextColor = (Xamarin.Forms.Color)obj21;
		label20.SetValue(View.MarginProperty, new Thickness(0.0));
		grid.Children.Add(label20);
		label21.SetValue(Grid.RowProperty, 5);
		label21.SetValue(Grid.ColumnProperty, 0);
		label21.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label21.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
		label21.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label57 = label21;
		BindableProperty fontSizeProperty24 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter24 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider45 = new XamlServiceProvider();
		Type typeFromHandle89 = typeof(IProvideValueTarget);
		object[] array45 = new object[0 + 6];
		array45[0] = label21;
		array45[1] = grid;
		array45[2] = stackLayout10;
		array45[3] = stackLayout21;
		array45[4] = scrollView;
		array45[5] = this;
		xamlServiceProvider45.Add(typeFromHandle89, new SimpleValueTargetProvider(array45, Label.FontSizeProperty));
		xamlServiceProvider45.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle90 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver45 = new XmlNamespaceResolver();
		xmlNamespaceResolver45.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver45.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver45.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver45.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider45.Add(typeFromHandle90, new XamlTypeResolver(xmlNamespaceResolver45, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider45.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(108, 172)));
		label57.SetValue(fontSizeProperty24, ((IExtendedTypeConverter)fontSizeConverter24).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider45));
		staticResourceExtension22.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension67 = staticResourceExtension22;
		XamlServiceProvider xamlServiceProvider46 = new XamlServiceProvider();
		Type typeFromHandle91 = typeof(IProvideValueTarget);
		object[] array46 = new object[0 + 6];
		array46[0] = label21;
		array46[1] = grid;
		array46[2] = stackLayout10;
		array46[3] = stackLayout21;
		array46[4] = scrollView;
		array46[5] = this;
		xamlServiceProvider46.Add(typeFromHandle91, new SimpleValueTargetProvider(array46, Label.TextColorProperty));
		xamlServiceProvider46.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle92 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver46 = new XmlNamespaceResolver();
		xmlNamespaceResolver46.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver46.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver46.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver46.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider46.Add(typeFromHandle92, new XamlTypeResolver(xmlNamespaceResolver46, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider46.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(108, 186)));
		object obj22 = ((IMarkupExtension)staticResourceExtension67).ProvideValue((IServiceProvider)xamlServiceProvider46);
		label21.TextColor = (Xamarin.Forms.Color)obj22;
		label21.SetValue(View.MarginProperty, new Thickness(0.0));
		grid.Children.Add(label21);
		blueButton5.SetValue(Grid.RowProperty, 4);
		blueButton5.SetValue(Grid.ColumnProperty, 1);
		blueButton5.SetValue(Grid.RowSpanProperty, 2);
		blueButton5.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Edit Alarm");
		blueButton5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		grid.Children.Add(blueButton5);
		stackLayout10.Children.Add(grid);
		stackLayout21.Children.Add(stackLayout10);
		activ8DividingBar2.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("false"));
		stackLayout21.Children.Add(activ8DividingBar2);
		stackLayout11.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		stackLayout11.SetValue(View.MarginProperty, new Thickness(0.0, 5.0, 0.0, 5.0));
		image5.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("bb2_sleep_mode"));
		image5.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		image5.SetValue(VisualElement.HeightRequestProperty, 28.0);
		image5.SetValue(View.MarginProperty, new Thickness(0.0, 0.0, 10.0, 0.0));
		stackLayout11.Children.Add(image5);
		label22.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Sleep Mode Schedule");
		label22.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label22.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label58 = label22;
		BindableProperty fontSizeProperty25 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter25 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider47 = new XamlServiceProvider();
		Type typeFromHandle93 = typeof(IProvideValueTarget);
		object[] array47 = new object[0 + 5];
		array47[0] = label22;
		array47[1] = stackLayout11;
		array47[2] = stackLayout21;
		array47[3] = scrollView;
		array47[4] = this;
		xamlServiceProvider47.Add(typeFromHandle93, new SimpleValueTargetProvider(array47, Label.FontSizeProperty));
		xamlServiceProvider47.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle94 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver47 = new XmlNamespaceResolver();
		xmlNamespaceResolver47.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver47.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver47.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver47.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider47.Add(typeFromHandle94, new XamlTypeResolver(xmlNamespaceResolver47, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider47.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(117, 107)));
		label58.SetValue(fontSizeProperty25, ((IExtendedTypeConverter)fontSizeConverter25).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider47));
		staticResourceExtension23.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension68 = staticResourceExtension23;
		XamlServiceProvider xamlServiceProvider48 = new XamlServiceProvider();
		Type typeFromHandle95 = typeof(IProvideValueTarget);
		object[] array48 = new object[0 + 5];
		array48[0] = label22;
		array48[1] = stackLayout11;
		array48[2] = stackLayout21;
		array48[3] = scrollView;
		array48[4] = this;
		xamlServiceProvider48.Add(typeFromHandle95, new SimpleValueTargetProvider(array48, Label.TextColorProperty));
		xamlServiceProvider48.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle96 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver48 = new XmlNamespaceResolver();
		xmlNamespaceResolver48.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver48.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver48.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver48.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider48.Add(typeFromHandle96, new XamlTypeResolver(xmlNamespaceResolver48, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider48.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(117, 121)));
		object obj23 = ((IMarkupExtension)staticResourceExtension68).ProvideValue((IServiceProvider)xamlServiceProvider48);
		label22.TextColor = (Xamarin.Forms.Color)obj23;
		label22.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		stackLayout11.Children.Add(label22);
		switch2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		stackLayout11.Children.Add(switch2);
		stackLayout21.Children.Add(stackLayout11);
		stackLayout13.SetValue(StackLayout.OrientationProperty, StackOrientation.Vertical);
		stackLayout13.SetValue(StackLayout.SpacingProperty, 10.0);
		stackLayout12.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		label23.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Set your BuddyBand2 to automatically enter and leave Sleep Mode at set times each day");
		label23.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label23.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label59 = label23;
		BindableProperty fontSizeProperty26 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter26 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider49 = new XamlServiceProvider();
		Type typeFromHandle97 = typeof(IProvideValueTarget);
		object[] array49 = new object[0 + 6];
		array49[0] = label23;
		array49[1] = stackLayout12;
		array49[2] = stackLayout13;
		array49[3] = stackLayout21;
		array49[4] = scrollView;
		array49[5] = this;
		xamlServiceProvider49.Add(typeFromHandle97, new SimpleValueTargetProvider(array49, Label.FontSizeProperty));
		xamlServiceProvider49.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle98 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver49 = new XmlNamespaceResolver();
		xmlNamespaceResolver49.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver49.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver49.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver49.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider49.Add(typeFromHandle98, new XamlTypeResolver(xmlNamespaceResolver49, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider49.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(123, 201)));
		label59.SetValue(fontSizeProperty26, ((IExtendedTypeConverter)fontSizeConverter26).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider49));
		staticResourceExtension24.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension69 = staticResourceExtension24;
		XamlServiceProvider xamlServiceProvider50 = new XamlServiceProvider();
		Type typeFromHandle99 = typeof(IProvideValueTarget);
		object[] array50 = new object[0 + 6];
		array50[0] = label23;
		array50[1] = stackLayout12;
		array50[2] = stackLayout13;
		array50[3] = stackLayout21;
		array50[4] = scrollView;
		array50[5] = this;
		xamlServiceProvider50.Add(typeFromHandle99, new SimpleValueTargetProvider(array50, Label.TextColorProperty));
		xamlServiceProvider50.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle100 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver50 = new XmlNamespaceResolver();
		xmlNamespaceResolver50.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver50.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver50.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver50.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider50.Add(typeFromHandle100, new XamlTypeResolver(xmlNamespaceResolver50, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider50.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(123, 215)));
		object obj24 = ((IMarkupExtension)staticResourceExtension69).ProvideValue((IServiceProvider)xamlServiceProvider50);
		label23.TextColor = (Xamarin.Forms.Color)obj24;
		stackLayout12.Children.Add(label23);
		stackLayout12.Children.Add(activ8ClickableHelpButton3);
		stackLayout13.Children.Add(stackLayout12);
		activ8ClickableFrame6.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(15.0));
		activ8ClickableFrame6.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("false"));
		label24.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "This can be manually overridden on your BuddyBand2 if you have a late night or early morning");
		label24.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		label24.SetValue(View.HorizontalOptionsProperty, LayoutOptions.CenterAndExpand);
		label24.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label60 = label24;
		BindableProperty fontSizeProperty27 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter27 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider51 = new XamlServiceProvider();
		Type typeFromHandle101 = typeof(IProvideValueTarget);
		object[] array51 = new object[0 + 6];
		array51[0] = label24;
		array51[1] = activ8ClickableFrame6;
		array51[2] = stackLayout13;
		array51[3] = stackLayout21;
		array51[4] = scrollView;
		array51[5] = this;
		xamlServiceProvider51.Add(typeFromHandle101, new SimpleValueTargetProvider(array51, Label.FontSizeProperty));
		xamlServiceProvider51.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle102 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver51 = new XmlNamespaceResolver();
		xmlNamespaceResolver51.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver51.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver51.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver51.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider51.Add(typeFromHandle102, new XamlTypeResolver(xmlNamespaceResolver51, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider51.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(128, 242)));
		label60.SetValue(fontSizeProperty27, ((IExtendedTypeConverter)fontSizeConverter27).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider51));
		staticResourceExtension25.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension70 = staticResourceExtension25;
		XamlServiceProvider xamlServiceProvider52 = new XamlServiceProvider();
		Type typeFromHandle103 = typeof(IProvideValueTarget);
		object[] array52 = new object[0 + 6];
		array52[0] = label24;
		array52[1] = activ8ClickableFrame6;
		array52[2] = stackLayout13;
		array52[3] = stackLayout21;
		array52[4] = scrollView;
		array52[5] = this;
		xamlServiceProvider52.Add(typeFromHandle103, new SimpleValueTargetProvider(array52, Label.TextColorProperty));
		xamlServiceProvider52.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle104 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver52 = new XmlNamespaceResolver();
		xmlNamespaceResolver52.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver52.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver52.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver52.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider52.Add(typeFromHandle104, new XamlTypeResolver(xmlNamespaceResolver52, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider52.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(128, 256)));
		object obj25 = ((IMarkupExtension)staticResourceExtension70).ProvideValue((IServiceProvider)xamlServiceProvider52);
		label24.TextColor = (Xamarin.Forms.Color)obj25;
		activ8ClickableFrame6.SetValue(ContentView.ContentProperty, label24);
		stackLayout13.Children.Add(activ8ClickableFrame6);
		label25.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Sleep Mode Start Time");
		label25.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label25.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label61 = label25;
		BindableProperty fontSizeProperty28 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter28 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider53 = new XamlServiceProvider();
		Type typeFromHandle105 = typeof(IProvideValueTarget);
		object[] array53 = new object[0 + 5];
		array53[0] = label25;
		array53[1] = stackLayout13;
		array53[2] = stackLayout21;
		array53[3] = scrollView;
		array53[4] = this;
		xamlServiceProvider53.Add(typeFromHandle105, new SimpleValueTargetProvider(array53, Label.FontSizeProperty));
		xamlServiceProvider53.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle106 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver53 = new XmlNamespaceResolver();
		xmlNamespaceResolver53.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver53.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver53.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver53.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider53.Add(typeFromHandle106, new XamlTypeResolver(xmlNamespaceResolver53, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider53.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(131, 124)));
		label61.SetValue(fontSizeProperty28, ((IExtendedTypeConverter)fontSizeConverter28).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider53));
		staticResourceExtension26.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension71 = staticResourceExtension26;
		XamlServiceProvider xamlServiceProvider54 = new XamlServiceProvider();
		Type typeFromHandle107 = typeof(IProvideValueTarget);
		object[] array54 = new object[0 + 5];
		array54[0] = label25;
		array54[1] = stackLayout13;
		array54[2] = stackLayout21;
		array54[3] = scrollView;
		array54[4] = this;
		xamlServiceProvider54.Add(typeFromHandle107, new SimpleValueTargetProvider(array54, Label.TextColorProperty));
		xamlServiceProvider54.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle108 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver54 = new XmlNamespaceResolver();
		xmlNamespaceResolver54.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver54.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver54.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver54.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider54.Add(typeFromHandle108, new XamlTypeResolver(xmlNamespaceResolver54, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider54.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(131, 138)));
		object obj26 = ((IMarkupExtension)staticResourceExtension71).ProvideValue((IServiceProvider)xamlServiceProvider54);
		label25.TextColor = (Xamarin.Forms.Color)obj26;
		label25.SetValue(View.MarginProperty, new Thickness(0.0, 5.0, 0.0, 0.0));
		stackLayout13.Children.Add(label25);
		activ8TimePicker.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension27.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension72 = staticResourceExtension27;
		XamlServiceProvider xamlServiceProvider55 = new XamlServiceProvider();
		Type typeFromHandle109 = typeof(IProvideValueTarget);
		object[] array55 = new object[0 + 5];
		array55[0] = activ8TimePicker;
		array55[1] = stackLayout13;
		array55[2] = stackLayout21;
		array55[3] = scrollView;
		array55[4] = this;
		xamlServiceProvider55.Add(typeFromHandle109, new SimpleValueTargetProvider(array55, TimePicker.TextColorProperty));
		xamlServiceProvider55.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle110 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver55 = new XmlNamespaceResolver();
		xmlNamespaceResolver55.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver55.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver55.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver55.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider55.Add(typeFromHandle110, new XamlTypeResolver(xmlNamespaceResolver55, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider55.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(132, 102)));
		object obj27 = ((IMarkupExtension)staticResourceExtension72).ProvideValue((IServiceProvider)xamlServiceProvider55);
		activ8TimePicker.TextColor = (Xamarin.Forms.Color)obj27;
		staticResourceExtension28.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension73 = staticResourceExtension28;
		XamlServiceProvider xamlServiceProvider56 = new XamlServiceProvider();
		Type typeFromHandle111 = typeof(IProvideValueTarget);
		object[] array56 = new object[0 + 5];
		array56[0] = activ8TimePicker;
		array56[1] = stackLayout13;
		array56[2] = stackLayout21;
		array56[3] = scrollView;
		array56[4] = this;
		xamlServiceProvider56.Add(typeFromHandle111, new SimpleValueTargetProvider(array56, VisualElement.BackgroundColorProperty));
		xamlServiceProvider56.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle112 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver56 = new XmlNamespaceResolver();
		xmlNamespaceResolver56.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver56.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver56.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver56.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider56.Add(typeFromHandle112, new XamlTypeResolver(xmlNamespaceResolver56, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider56.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(132, 149)));
		object obj28 = ((IMarkupExtension)staticResourceExtension73).ProvideValue((IServiceProvider)xamlServiceProvider56);
		activ8TimePicker.BackgroundColor = (Xamarin.Forms.Color)obj28;
		stackLayout13.Children.Add(activ8TimePicker);
		label26.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Sleep Mode End Time");
		label26.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label26.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label62 = label26;
		BindableProperty fontSizeProperty29 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter29 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider57 = new XamlServiceProvider();
		Type typeFromHandle113 = typeof(IProvideValueTarget);
		object[] array57 = new object[0 + 5];
		array57[0] = label26;
		array57[1] = stackLayout13;
		array57[2] = stackLayout21;
		array57[3] = scrollView;
		array57[4] = this;
		xamlServiceProvider57.Add(typeFromHandle113, new SimpleValueTargetProvider(array57, Label.FontSizeProperty));
		xamlServiceProvider57.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle114 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver57 = new XmlNamespaceResolver();
		xmlNamespaceResolver57.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver57.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver57.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver57.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider57.Add(typeFromHandle114, new XamlTypeResolver(xmlNamespaceResolver57, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider57.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(134, 122)));
		label62.SetValue(fontSizeProperty29, ((IExtendedTypeConverter)fontSizeConverter29).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider57));
		staticResourceExtension29.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension74 = staticResourceExtension29;
		XamlServiceProvider xamlServiceProvider58 = new XamlServiceProvider();
		Type typeFromHandle115 = typeof(IProvideValueTarget);
		object[] array58 = new object[0 + 5];
		array58[0] = label26;
		array58[1] = stackLayout13;
		array58[2] = stackLayout21;
		array58[3] = scrollView;
		array58[4] = this;
		xamlServiceProvider58.Add(typeFromHandle115, new SimpleValueTargetProvider(array58, Label.TextColorProperty));
		xamlServiceProvider58.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle116 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver58 = new XmlNamespaceResolver();
		xmlNamespaceResolver58.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver58.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver58.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver58.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider58.Add(typeFromHandle116, new XamlTypeResolver(xmlNamespaceResolver58, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider58.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(134, 136)));
		object obj29 = ((IMarkupExtension)staticResourceExtension74).ProvideValue((IServiceProvider)xamlServiceProvider58);
		label26.TextColor = (Xamarin.Forms.Color)obj29;
		label26.SetValue(View.MarginProperty, new Thickness(0.0, 5.0, 0.0, 0.0));
		stackLayout13.Children.Add(label26);
		activ8TimePicker2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		staticResourceExtension30.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension75 = staticResourceExtension30;
		XamlServiceProvider xamlServiceProvider59 = new XamlServiceProvider();
		Type typeFromHandle117 = typeof(IProvideValueTarget);
		object[] array59 = new object[0 + 5];
		array59[0] = activ8TimePicker2;
		array59[1] = stackLayout13;
		array59[2] = stackLayout21;
		array59[3] = scrollView;
		array59[4] = this;
		xamlServiceProvider59.Add(typeFromHandle117, new SimpleValueTargetProvider(array59, TimePicker.TextColorProperty));
		xamlServiceProvider59.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle118 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver59 = new XmlNamespaceResolver();
		xmlNamespaceResolver59.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver59.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver59.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver59.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider59.Add(typeFromHandle118, new XamlTypeResolver(xmlNamespaceResolver59, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider59.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(135, 100)));
		object obj30 = ((IMarkupExtension)staticResourceExtension75).ProvideValue((IServiceProvider)xamlServiceProvider59);
		activ8TimePicker2.TextColor = (Xamarin.Forms.Color)obj30;
		staticResourceExtension31.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension76 = staticResourceExtension31;
		XamlServiceProvider xamlServiceProvider60 = new XamlServiceProvider();
		Type typeFromHandle119 = typeof(IProvideValueTarget);
		object[] array60 = new object[0 + 5];
		array60[0] = activ8TimePicker2;
		array60[1] = stackLayout13;
		array60[2] = stackLayout21;
		array60[3] = scrollView;
		array60[4] = this;
		xamlServiceProvider60.Add(typeFromHandle119, new SimpleValueTargetProvider(array60, VisualElement.BackgroundColorProperty));
		xamlServiceProvider60.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle120 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver60 = new XmlNamespaceResolver();
		xmlNamespaceResolver60.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver60.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver60.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver60.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider60.Add(typeFromHandle120, new XamlTypeResolver(xmlNamespaceResolver60, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider60.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(135, 147)));
		object obj31 = ((IMarkupExtension)staticResourceExtension76).ProvideValue((IServiceProvider)xamlServiceProvider60);
		activ8TimePicker2.BackgroundColor = (Xamarin.Forms.Color)obj31;
		stackLayout13.Children.Add(activ8TimePicker2);
		stackLayout21.Children.Add(stackLayout13);
		activ8DividingBar3.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("false"));
		stackLayout21.Children.Add(activ8DividingBar3);
		stackLayout18.SetValue(StackLayout.OrientationProperty, StackOrientation.Vertical);
		stackLayout18.SetValue(View.MarginProperty, new Thickness(0.0, 5.0, 0.0, 5.0));
		stackLayout18.SetValue(StackLayout.SpacingProperty, 10.0);
		stackLayout14.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		image6.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("bb2_custom_tracker"));
		image6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		image6.SetValue(VisualElement.HeightRequestProperty, 28.0);
		image6.SetValue(View.MarginProperty, new Thickness(0.0, 0.0, 10.0, 0.0));
		stackLayout14.Children.Add(image6);
		label27.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Custom Trackers");
		label27.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label27.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label63 = label27;
		BindableProperty fontSizeProperty30 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter30 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider61 = new XamlServiceProvider();
		Type typeFromHandle121 = typeof(IProvideValueTarget);
		object[] array61 = new object[0 + 6];
		array61[0] = label27;
		array61[1] = stackLayout14;
		array61[2] = stackLayout18;
		array61[3] = stackLayout21;
		array61[4] = scrollView;
		array61[5] = this;
		xamlServiceProvider61.Add(typeFromHandle121, new SimpleValueTargetProvider(array61, Label.FontSizeProperty));
		xamlServiceProvider61.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle122 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver61 = new XmlNamespaceResolver();
		xmlNamespaceResolver61.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver61.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver61.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver61.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider61.Add(typeFromHandle122, new XamlTypeResolver(xmlNamespaceResolver61, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider61.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(143, 122)));
		label63.SetValue(fontSizeProperty30, ((IExtendedTypeConverter)fontSizeConverter30).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider61));
		staticResourceExtension32.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension77 = staticResourceExtension32;
		XamlServiceProvider xamlServiceProvider62 = new XamlServiceProvider();
		Type typeFromHandle123 = typeof(IProvideValueTarget);
		object[] array62 = new object[0 + 6];
		array62[0] = label27;
		array62[1] = stackLayout14;
		array62[2] = stackLayout18;
		array62[3] = stackLayout21;
		array62[4] = scrollView;
		array62[5] = this;
		xamlServiceProvider62.Add(typeFromHandle123, new SimpleValueTargetProvider(array62, Label.TextColorProperty));
		xamlServiceProvider62.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle124 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver62 = new XmlNamespaceResolver();
		xmlNamespaceResolver62.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver62.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver62.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver62.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider62.Add(typeFromHandle124, new XamlTypeResolver(xmlNamespaceResolver62, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider62.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(143, 136)));
		object obj32 = ((IMarkupExtension)staticResourceExtension77).ProvideValue((IServiceProvider)xamlServiceProvider62);
		label27.TextColor = (Xamarin.Forms.Color)obj32;
		label27.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		stackLayout14.Children.Add(label27);
		activ8ClickableLabel2.SetValue(Label.TextProperty, "Show");
		activ8ClickableLabel2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.EndAndExpand);
		Activ8ClickableLabel activ8ClickableLabel4 = activ8ClickableLabel2;
		BindableProperty fontSizeProperty31 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter31 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider63 = new XamlServiceProvider();
		Type typeFromHandle125 = typeof(IProvideValueTarget);
		object[] array63 = new object[0 + 6];
		array63[0] = activ8ClickableLabel2;
		array63[1] = stackLayout14;
		array63[2] = stackLayout18;
		array63[3] = stackLayout21;
		array63[4] = scrollView;
		array63[5] = this;
		xamlServiceProvider63.Add(typeFromHandle125, new SimpleValueTargetProvider(array63, Label.FontSizeProperty));
		xamlServiceProvider63.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle126 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver63 = new XmlNamespaceResolver();
		xmlNamespaceResolver63.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver63.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver63.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver63.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider63.Add(typeFromHandle126, new XamlTypeResolver(xmlNamespaceResolver63, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider63.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(144, 114)));
		activ8ClickableLabel4.SetValue(fontSizeProperty31, ((IExtendedTypeConverter)fontSizeConverter31).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider63));
		stackLayout14.Children.Add(activ8ClickableLabel2);
		stackLayout18.Children.Add(stackLayout14);
		stackLayout15.SetValue(StackLayout.SpacingProperty, 10.0);
		label28.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Choose which of your Custom Trackers you would like to link to your BuddyBand2");
		label28.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label28.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label64 = label28;
		BindableProperty fontSizeProperty32 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter32 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider64 = new XamlServiceProvider();
		Type typeFromHandle127 = typeof(IProvideValueTarget);
		object[] array64 = new object[0 + 7];
		array64[0] = label28;
		array64[1] = stackLayout15;
		array64[2] = stackLayout17;
		array64[3] = stackLayout18;
		array64[4] = stackLayout21;
		array64[5] = scrollView;
		array64[6] = this;
		xamlServiceProvider64.Add(typeFromHandle127, new SimpleValueTargetProvider(array64, Label.FontSizeProperty));
		xamlServiceProvider64.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle128 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver64 = new XmlNamespaceResolver();
		xmlNamespaceResolver64.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver64.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver64.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver64.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider64.Add(typeFromHandle128, new XamlTypeResolver(xmlNamespaceResolver64, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider64.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(150, 189)));
		label64.SetValue(fontSizeProperty32, ((IExtendedTypeConverter)fontSizeConverter32).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider64));
		staticResourceExtension33.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension78 = staticResourceExtension33;
		XamlServiceProvider xamlServiceProvider65 = new XamlServiceProvider();
		Type typeFromHandle129 = typeof(IProvideValueTarget);
		object[] array65 = new object[0 + 7];
		array65[0] = label28;
		array65[1] = stackLayout15;
		array65[2] = stackLayout17;
		array65[3] = stackLayout18;
		array65[4] = stackLayout21;
		array65[5] = scrollView;
		array65[6] = this;
		xamlServiceProvider65.Add(typeFromHandle129, new SimpleValueTargetProvider(array65, Label.TextColorProperty));
		xamlServiceProvider65.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle130 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver65 = new XmlNamespaceResolver();
		xmlNamespaceResolver65.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver65.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver65.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver65.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider65.Add(typeFromHandle130, new XamlTypeResolver(xmlNamespaceResolver65, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider65.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(150, 203)));
		object obj33 = ((IMarkupExtension)staticResourceExtension78).ProvideValue((IServiceProvider)xamlServiceProvider65);
		label28.TextColor = (Xamarin.Forms.Color)obj33;
		stackLayout15.Children.Add(label28);
		label29.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Once set, double tap the button on your BuddyBand2 to add a value for that day for your chosen Custom Tracker");
		label29.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label29.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label65 = label29;
		BindableProperty fontSizeProperty33 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter33 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider66 = new XamlServiceProvider();
		Type typeFromHandle131 = typeof(IProvideValueTarget);
		object[] array66 = new object[0 + 7];
		array66[0] = label29;
		array66[1] = stackLayout15;
		array66[2] = stackLayout17;
		array66[3] = stackLayout18;
		array66[4] = stackLayout21;
		array66[5] = scrollView;
		array66[6] = this;
		xamlServiceProvider66.Add(typeFromHandle131, new SimpleValueTargetProvider(array66, Label.FontSizeProperty));
		xamlServiceProvider66.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle132 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver66 = new XmlNamespaceResolver();
		xmlNamespaceResolver66.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver66.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver66.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver66.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider66.Add(typeFromHandle132, new XamlTypeResolver(xmlNamespaceResolver66, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider66.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(151, 220)));
		label65.SetValue(fontSizeProperty33, ((IExtendedTypeConverter)fontSizeConverter33).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider66));
		staticResourceExtension34.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension79 = staticResourceExtension34;
		XamlServiceProvider xamlServiceProvider67 = new XamlServiceProvider();
		Type typeFromHandle133 = typeof(IProvideValueTarget);
		object[] array67 = new object[0 + 7];
		array67[0] = label29;
		array67[1] = stackLayout15;
		array67[2] = stackLayout17;
		array67[3] = stackLayout18;
		array67[4] = stackLayout21;
		array67[5] = scrollView;
		array67[6] = this;
		xamlServiceProvider67.Add(typeFromHandle133, new SimpleValueTargetProvider(array67, Label.TextColorProperty));
		xamlServiceProvider67.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle134 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver67 = new XmlNamespaceResolver();
		xmlNamespaceResolver67.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver67.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver67.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver67.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider67.Add(typeFromHandle134, new XamlTypeResolver(xmlNamespaceResolver67, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider67.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(151, 234)));
		object obj34 = ((IMarkupExtension)staticResourceExtension79).ProvideValue((IServiceProvider)xamlServiceProvider67);
		label29.TextColor = (Xamarin.Forms.Color)obj34;
		stackLayout15.Children.Add(label29);
		label30.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Chosen Tracker");
		label30.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label30.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label66 = label30;
		BindableProperty fontSizeProperty34 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter34 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider68 = new XamlServiceProvider();
		Type typeFromHandle135 = typeof(IProvideValueTarget);
		object[] array68 = new object[0 + 7];
		array68[0] = label30;
		array68[1] = stackLayout15;
		array68[2] = stackLayout17;
		array68[3] = stackLayout18;
		array68[4] = stackLayout21;
		array68[5] = scrollView;
		array68[6] = this;
		xamlServiceProvider68.Add(typeFromHandle135, new SimpleValueTargetProvider(array68, Label.FontSizeProperty));
		xamlServiceProvider68.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle136 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver68 = new XmlNamespaceResolver();
		xmlNamespaceResolver68.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver68.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver68.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver68.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider68.Add(typeFromHandle136, new XamlTypeResolver(xmlNamespaceResolver68, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider68.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(153, 125)));
		label66.SetValue(fontSizeProperty34, ((IExtendedTypeConverter)fontSizeConverter34).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider68));
		staticResourceExtension35.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension80 = staticResourceExtension35;
		XamlServiceProvider xamlServiceProvider69 = new XamlServiceProvider();
		Type typeFromHandle137 = typeof(IProvideValueTarget);
		object[] array69 = new object[0 + 7];
		array69[0] = label30;
		array69[1] = stackLayout15;
		array69[2] = stackLayout17;
		array69[3] = stackLayout18;
		array69[4] = stackLayout21;
		array69[5] = scrollView;
		array69[6] = this;
		xamlServiceProvider69.Add(typeFromHandle137, new SimpleValueTargetProvider(array69, Label.TextColorProperty));
		xamlServiceProvider69.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle138 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver69 = new XmlNamespaceResolver();
		xmlNamespaceResolver69.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver69.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver69.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver69.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider69.Add(typeFromHandle138, new XamlTypeResolver(xmlNamespaceResolver69, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider69.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(153, 139)));
		object obj35 = ((IMarkupExtension)staticResourceExtension80).ProvideValue((IServiceProvider)xamlServiceProvider69);
		label30.TextColor = (Xamarin.Forms.Color)obj35;
		label30.SetValue(View.MarginProperty, new Thickness(0.0, 5.0, 0.0, 0.0));
		stackLayout15.Children.Add(label30);
		staticResourceExtension36.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension81 = staticResourceExtension36;
		XamlServiceProvider xamlServiceProvider70 = new XamlServiceProvider();
		Type typeFromHandle139 = typeof(IProvideValueTarget);
		object[] array70 = new object[0 + 7];
		array70[0] = activ8Picker2;
		array70[1] = stackLayout15;
		array70[2] = stackLayout17;
		array70[3] = stackLayout18;
		array70[4] = stackLayout21;
		array70[5] = scrollView;
		array70[6] = this;
		xamlServiceProvider70.Add(typeFromHandle139, new SimpleValueTargetProvider(array70, Picker.TextColorProperty));
		xamlServiceProvider70.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle140 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver70 = new XmlNamespaceResolver();
		xmlNamespaceResolver70.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver70.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver70.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver70.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider70.Add(typeFromHandle140, new XamlTypeResolver(xmlNamespaceResolver70, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider70.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(154, 72)));
		object obj36 = ((IMarkupExtension)staticResourceExtension81).ProvideValue((IServiceProvider)xamlServiceProvider70);
		activ8Picker2.TextColor = (Xamarin.Forms.Color)obj36;
		staticResourceExtension37.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension82 = staticResourceExtension37;
		XamlServiceProvider xamlServiceProvider71 = new XamlServiceProvider();
		Type typeFromHandle141 = typeof(IProvideValueTarget);
		object[] array71 = new object[0 + 7];
		array71[0] = activ8Picker2;
		array71[1] = stackLayout15;
		array71[2] = stackLayout17;
		array71[3] = stackLayout18;
		array71[4] = stackLayout21;
		array71[5] = scrollView;
		array71[6] = this;
		xamlServiceProvider71.Add(typeFromHandle141, new SimpleValueTargetProvider(array71, VisualElement.BackgroundColorProperty));
		xamlServiceProvider71.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle142 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver71 = new XmlNamespaceResolver();
		xmlNamespaceResolver71.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver71.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver71.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver71.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider71.Add(typeFromHandle142, new XamlTypeResolver(xmlNamespaceResolver71, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider71.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(154, 119)));
		object obj37 = ((IMarkupExtension)staticResourceExtension82).ProvideValue((IServiceProvider)xamlServiceProvider71);
		activ8Picker2.BackgroundColor = (Xamarin.Forms.Color)obj37;
		activ8Picker2.SetValue(Picker.TitleProperty, "Select Tracker");
		stackLayout15.Children.Add(activ8Picker2);
		label31.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Double Tap Speed");
		label31.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label31.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label67 = label31;
		BindableProperty fontSizeProperty35 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter35 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider72 = new XamlServiceProvider();
		Type typeFromHandle143 = typeof(IProvideValueTarget);
		object[] array72 = new object[0 + 7];
		array72[0] = label31;
		array72[1] = stackLayout15;
		array72[2] = stackLayout17;
		array72[3] = stackLayout18;
		array72[4] = stackLayout21;
		array72[5] = scrollView;
		array72[6] = this;
		xamlServiceProvider72.Add(typeFromHandle143, new SimpleValueTargetProvider(array72, Label.FontSizeProperty));
		xamlServiceProvider72.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle144 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver72 = new XmlNamespaceResolver();
		xmlNamespaceResolver72.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver72.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver72.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver72.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider72.Add(typeFromHandle144, new XamlTypeResolver(xmlNamespaceResolver72, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider72.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(156, 127)));
		label67.SetValue(fontSizeProperty35, ((IExtendedTypeConverter)fontSizeConverter35).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider72));
		staticResourceExtension38.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension83 = staticResourceExtension38;
		XamlServiceProvider xamlServiceProvider73 = new XamlServiceProvider();
		Type typeFromHandle145 = typeof(IProvideValueTarget);
		object[] array73 = new object[0 + 7];
		array73[0] = label31;
		array73[1] = stackLayout15;
		array73[2] = stackLayout17;
		array73[3] = stackLayout18;
		array73[4] = stackLayout21;
		array73[5] = scrollView;
		array73[6] = this;
		xamlServiceProvider73.Add(typeFromHandle145, new SimpleValueTargetProvider(array73, Label.TextColorProperty));
		xamlServiceProvider73.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle146 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver73 = new XmlNamespaceResolver();
		xmlNamespaceResolver73.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver73.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver73.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver73.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider73.Add(typeFromHandle146, new XamlTypeResolver(xmlNamespaceResolver73, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider73.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(156, 141)));
		object obj38 = ((IMarkupExtension)staticResourceExtension83).ProvideValue((IServiceProvider)xamlServiceProvider73);
		label31.TextColor = (Xamarin.Forms.Color)obj38;
		label31.SetValue(View.MarginProperty, new Thickness(0.0, 5.0, 0.0, 0.0));
		stackLayout15.Children.Add(label31);
		staticResourceExtension39.Key = "InputBoxTextColor";
		StaticResourceExtension staticResourceExtension84 = staticResourceExtension39;
		XamlServiceProvider xamlServiceProvider74 = new XamlServiceProvider();
		Type typeFromHandle147 = typeof(IProvideValueTarget);
		object[] array74 = new object[0 + 7];
		array74[0] = activ8Picker3;
		array74[1] = stackLayout15;
		array74[2] = stackLayout17;
		array74[3] = stackLayout18;
		array74[4] = stackLayout21;
		array74[5] = scrollView;
		array74[6] = this;
		xamlServiceProvider74.Add(typeFromHandle147, new SimpleValueTargetProvider(array74, Picker.TextColorProperty));
		xamlServiceProvider74.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle148 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver74 = new XmlNamespaceResolver();
		xmlNamespaceResolver74.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver74.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver74.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver74.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider74.Add(typeFromHandle148, new XamlTypeResolver(xmlNamespaceResolver74, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider74.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(157, 63)));
		object obj39 = ((IMarkupExtension)staticResourceExtension84).ProvideValue((IServiceProvider)xamlServiceProvider74);
		activ8Picker3.TextColor = (Xamarin.Forms.Color)obj39;
		staticResourceExtension40.Key = "InputBoxBGColor";
		StaticResourceExtension staticResourceExtension85 = staticResourceExtension40;
		XamlServiceProvider xamlServiceProvider75 = new XamlServiceProvider();
		Type typeFromHandle149 = typeof(IProvideValueTarget);
		object[] array75 = new object[0 + 7];
		array75[0] = activ8Picker3;
		array75[1] = stackLayout15;
		array75[2] = stackLayout17;
		array75[3] = stackLayout18;
		array75[4] = stackLayout21;
		array75[5] = scrollView;
		array75[6] = this;
		xamlServiceProvider75.Add(typeFromHandle149, new SimpleValueTargetProvider(array75, VisualElement.BackgroundColorProperty));
		xamlServiceProvider75.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle150 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver75 = new XmlNamespaceResolver();
		xmlNamespaceResolver75.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver75.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver75.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver75.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider75.Add(typeFromHandle150, new XamlTypeResolver(xmlNamespaceResolver75, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider75.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(157, 110)));
		object obj40 = ((IMarkupExtension)staticResourceExtension85).ProvideValue((IServiceProvider)xamlServiceProvider75);
		activ8Picker3.BackgroundColor = (Xamarin.Forms.Color)obj40;
		stackLayout15.Children.Add(activ8Picker3);
		stackLayout17.Children.Add(stackLayout15);
		activ8ClickableFrame7.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(15.0));
		activ8ClickableFrame7.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("false"));
		stackLayout16.SetValue(StackLayout.SpacingProperty, 10.0);
		label32.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "You have not yet created any valid Custom Trackers");
		label32.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label32.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		label32.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label68 = label32;
		BindableProperty fontSizeProperty36 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter36 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider76 = new XamlServiceProvider();
		Type typeFromHandle151 = typeof(IProvideValueTarget);
		object[] array76 = new object[0 + 8];
		array76[0] = label32;
		array76[1] = stackLayout16;
		array76[2] = activ8ClickableFrame7;
		array76[3] = stackLayout17;
		array76[4] = stackLayout18;
		array76[5] = stackLayout21;
		array76[6] = scrollView;
		array76[7] = this;
		xamlServiceProvider76.Add(typeFromHandle151, new SimpleValueTargetProvider(array76, Label.FontSizeProperty));
		xamlServiceProvider76.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle152 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver76 = new XmlNamespaceResolver();
		xmlNamespaceResolver76.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver76.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver76.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver76.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider76.Add(typeFromHandle152, new XamlTypeResolver(xmlNamespaceResolver76, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider76.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(162, 198)));
		label68.SetValue(fontSizeProperty36, ((IExtendedTypeConverter)fontSizeConverter36).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider76));
		staticResourceExtension41.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension86 = staticResourceExtension41;
		XamlServiceProvider xamlServiceProvider77 = new XamlServiceProvider();
		Type typeFromHandle153 = typeof(IProvideValueTarget);
		object[] array77 = new object[0 + 8];
		array77[0] = label32;
		array77[1] = stackLayout16;
		array77[2] = activ8ClickableFrame7;
		array77[3] = stackLayout17;
		array77[4] = stackLayout18;
		array77[5] = stackLayout21;
		array77[6] = scrollView;
		array77[7] = this;
		xamlServiceProvider77.Add(typeFromHandle153, new SimpleValueTargetProvider(array77, Label.TextColorProperty));
		xamlServiceProvider77.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle154 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver77 = new XmlNamespaceResolver();
		xmlNamespaceResolver77.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver77.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver77.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver77.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider77.Add(typeFromHandle154, new XamlTypeResolver(xmlNamespaceResolver77, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider77.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(162, 212)));
		object obj41 = ((IMarkupExtension)staticResourceExtension86).ProvideValue((IServiceProvider)xamlServiceProvider77);
		label32.TextColor = (Xamarin.Forms.Color)obj41;
		stackLayout16.Children.Add(label32);
		label33.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Only Custom Trackers with a Tracker Type of Counted can be used with the BuddyBand2");
		label33.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label33.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		label33.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label69 = label33;
		BindableProperty fontSizeProperty37 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter37 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider78 = new XamlServiceProvider();
		Type typeFromHandle155 = typeof(IProvideValueTarget);
		object[] array78 = new object[0 + 8];
		array78[0] = label33;
		array78[1] = stackLayout16;
		array78[2] = activ8ClickableFrame7;
		array78[3] = stackLayout17;
		array78[4] = stackLayout18;
		array78[5] = stackLayout21;
		array78[6] = scrollView;
		array78[7] = this;
		xamlServiceProvider78.Add(typeFromHandle155, new SimpleValueTargetProvider(array78, Label.FontSizeProperty));
		xamlServiceProvider78.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle156 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver78 = new XmlNamespaceResolver();
		xmlNamespaceResolver78.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver78.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver78.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver78.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider78.Add(typeFromHandle156, new XamlTypeResolver(xmlNamespaceResolver78, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider78.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(163, 231)));
		label69.SetValue(fontSizeProperty37, ((IExtendedTypeConverter)fontSizeConverter37).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider78));
		staticResourceExtension42.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension87 = staticResourceExtension42;
		XamlServiceProvider xamlServiceProvider79 = new XamlServiceProvider();
		Type typeFromHandle157 = typeof(IProvideValueTarget);
		object[] array79 = new object[0 + 8];
		array79[0] = label33;
		array79[1] = stackLayout16;
		array79[2] = activ8ClickableFrame7;
		array79[3] = stackLayout17;
		array79[4] = stackLayout18;
		array79[5] = stackLayout21;
		array79[6] = scrollView;
		array79[7] = this;
		xamlServiceProvider79.Add(typeFromHandle157, new SimpleValueTargetProvider(array79, Label.TextColorProperty));
		xamlServiceProvider79.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle158 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver79 = new XmlNamespaceResolver();
		xmlNamespaceResolver79.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver79.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver79.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver79.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider79.Add(typeFromHandle158, new XamlTypeResolver(xmlNamespaceResolver79, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider79.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(163, 245)));
		object obj42 = ((IMarkupExtension)staticResourceExtension87).ProvideValue((IServiceProvider)xamlServiceProvider79);
		label33.TextColor = (Xamarin.Forms.Color)obj42;
		stackLayout16.Children.Add(label33);
		activ8ClickableFrame7.SetValue(ContentView.ContentProperty, stackLayout16);
		stackLayout17.Children.Add(activ8ClickableFrame7);
		stackLayout18.Children.Add(stackLayout17);
		stackLayout21.Children.Add(stackLayout18);
		stackLayout20.SetValue(StackLayout.OrientationProperty, StackOrientation.Vertical);
		stackLayout20.SetValue(View.VerticalOptionsProperty, LayoutOptions.EndAndExpand);
		stackLayout20.SetValue(StackLayout.SpacingProperty, 10.0);
		activ8DividingBar4.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		stackLayout20.Children.Add(activ8DividingBar4);
		label34.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Unpair BuddyBand2");
		label34.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label34.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label70 = label34;
		BindableProperty fontSizeProperty38 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter38 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider80 = new XamlServiceProvider();
		Type typeFromHandle159 = typeof(IProvideValueTarget);
		object[] array80 = new object[0 + 5];
		array80[0] = label34;
		array80[1] = stackLayout20;
		array80[2] = stackLayout21;
		array80[3] = scrollView;
		array80[4] = this;
		xamlServiceProvider80.Add(typeFromHandle159, new SimpleValueTargetProvider(array80, Label.FontSizeProperty));
		xamlServiceProvider80.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle160 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver80 = new XmlNamespaceResolver();
		xmlNamespaceResolver80.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver80.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver80.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver80.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider80.Add(typeFromHandle160, new XamlTypeResolver(xmlNamespaceResolver80, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider80.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(173, 120)));
		label70.SetValue(fontSizeProperty38, ((IExtendedTypeConverter)fontSizeConverter38).ConvertFromInvariantString("18", (IServiceProvider)xamlServiceProvider80));
		staticResourceExtension43.Key = "PageHeaderTextColor";
		StaticResourceExtension staticResourceExtension88 = staticResourceExtension43;
		XamlServiceProvider xamlServiceProvider81 = new XamlServiceProvider();
		Type typeFromHandle161 = typeof(IProvideValueTarget);
		object[] array81 = new object[0 + 5];
		array81[0] = label34;
		array81[1] = stackLayout20;
		array81[2] = stackLayout21;
		array81[3] = scrollView;
		array81[4] = this;
		xamlServiceProvider81.Add(typeFromHandle161, new SimpleValueTargetProvider(array81, Label.TextColorProperty));
		xamlServiceProvider81.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle162 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver81 = new XmlNamespaceResolver();
		xmlNamespaceResolver81.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver81.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver81.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver81.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider81.Add(typeFromHandle162, new XamlTypeResolver(xmlNamespaceResolver81, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider81.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(173, 134)));
		object obj43 = ((IMarkupExtension)staticResourceExtension88).ProvideValue((IServiceProvider)xamlServiceProvider81);
		label34.TextColor = (Xamarin.Forms.Color)obj43;
		label34.SetValue(Label.FontAttributesProperty, FontAttributes.Bold);
		stackLayout20.Children.Add(label34);
		stackLayout19.SetValue(StackLayout.OrientationProperty, StackOrientation.Horizontal);
		label35.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Use this control to unpair your BuddyBand2 from this device");
		label35.SetValue(View.HorizontalOptionsProperty, LayoutOptions.StartAndExpand);
		label35.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		Label label71 = label35;
		BindableProperty fontSizeProperty39 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter39 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider82 = new XamlServiceProvider();
		Type typeFromHandle163 = typeof(IProvideValueTarget);
		object[] array82 = new object[0 + 6];
		array82[0] = label35;
		array82[1] = stackLayout19;
		array82[2] = stackLayout20;
		array82[3] = stackLayout21;
		array82[4] = scrollView;
		array82[5] = this;
		xamlServiceProvider82.Add(typeFromHandle163, new SimpleValueTargetProvider(array82, Label.FontSizeProperty));
		xamlServiceProvider82.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle164 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver82 = new XmlNamespaceResolver();
		xmlNamespaceResolver82.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver82.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver82.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver82.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider82.Add(typeFromHandle164, new XamlTypeResolver(xmlNamespaceResolver82, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider82.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(175, 175)));
		label71.SetValue(fontSizeProperty39, ((IExtendedTypeConverter)fontSizeConverter39).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider82));
		staticResourceExtension44.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension89 = staticResourceExtension44;
		XamlServiceProvider xamlServiceProvider83 = new XamlServiceProvider();
		Type typeFromHandle165 = typeof(IProvideValueTarget);
		object[] array83 = new object[0 + 6];
		array83[0] = label35;
		array83[1] = stackLayout19;
		array83[2] = stackLayout20;
		array83[3] = stackLayout21;
		array83[4] = scrollView;
		array83[5] = this;
		xamlServiceProvider83.Add(typeFromHandle165, new SimpleValueTargetProvider(array83, Label.TextColorProperty));
		xamlServiceProvider83.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle166 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver83 = new XmlNamespaceResolver();
		xmlNamespaceResolver83.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver83.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver83.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver83.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider83.Add(typeFromHandle166, new XamlTypeResolver(xmlNamespaceResolver83, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider83.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(175, 189)));
		object obj44 = ((IMarkupExtension)staticResourceExtension89).ProvideValue((IServiceProvider)xamlServiceProvider83);
		label35.TextColor = (Xamarin.Forms.Color)obj44;
		stackLayout19.Children.Add(label35);
		stackLayout19.Children.Add(activ8ClickableHelpButton4);
		stackLayout20.Children.Add(stackLayout19);
		activ8ClickableFrame8.SetValue(Xamarin.Forms.Layout.PaddingProperty, new Thickness(15.0));
		activ8ClickableFrame8.SetValue(VisualElement.IsVisibleProperty, new VisibilityConverter().ConvertFromInvariantString("false"));
		label36.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "If you do this, you will have to re-pair your BuddyBand2 back if you wish to synchronise steps from this device");
		label36.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
		label36.SetValue(View.VerticalOptionsProperty, LayoutOptions.Center);
		label36.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
		Label label72 = label36;
		BindableProperty fontSizeProperty40 = Label.FontSizeProperty;
		FontSizeConverter fontSizeConverter40 = new FontSizeConverter();
		XamlServiceProvider xamlServiceProvider84 = new XamlServiceProvider();
		Type typeFromHandle167 = typeof(IProvideValueTarget);
		object[] array84 = new object[0 + 6];
		array84[0] = label36;
		array84[1] = activ8ClickableFrame8;
		array84[2] = stackLayout20;
		array84[3] = stackLayout21;
		array84[4] = scrollView;
		array84[5] = this;
		xamlServiceProvider84.Add(typeFromHandle167, new SimpleValueTargetProvider(array84, Label.FontSizeProperty));
		xamlServiceProvider84.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle168 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver84 = new XmlNamespaceResolver();
		xmlNamespaceResolver84.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver84.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver84.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver84.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider84.Add(typeFromHandle168, new XamlTypeResolver(xmlNamespaceResolver84, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider84.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(180, 251)));
		label72.SetValue(fontSizeProperty40, ((IExtendedTypeConverter)fontSizeConverter40).ConvertFromInvariantString("16", (IServiceProvider)xamlServiceProvider84));
		staticResourceExtension45.Key = "PageTextColor";
		StaticResourceExtension staticResourceExtension90 = staticResourceExtension45;
		XamlServiceProvider xamlServiceProvider85 = new XamlServiceProvider();
		Type typeFromHandle169 = typeof(IProvideValueTarget);
		object[] array85 = new object[0 + 6];
		array85[0] = label36;
		array85[1] = activ8ClickableFrame8;
		array85[2] = stackLayout20;
		array85[3] = stackLayout21;
		array85[4] = scrollView;
		array85[5] = this;
		xamlServiceProvider85.Add(typeFromHandle169, new SimpleValueTargetProvider(array85, Label.TextColorProperty));
		xamlServiceProvider85.Add(typeof(Xamarin.Forms.Xaml.Internals.INameScopeProvider), new NameScopeProvider
		{
			NameScope = nameScope
		});
		Type typeFromHandle170 = typeof(IXamlTypeResolver);
		XmlNamespaceResolver xmlNamespaceResolver85 = new XmlNamespaceResolver();
		xmlNamespaceResolver85.Add("", "http://xamarin.com/schemas/2014/forms");
		xmlNamespaceResolver85.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
		xmlNamespaceResolver85.Add("a8", "clr-namespace:Activ8rlives;assembly=Activ8rlives");
		xmlNamespaceResolver85.Add("i18n", "clr-namespace:Vernacular.Xaml;assembly=Activ8rlives");
		xamlServiceProvider85.Add(typeFromHandle170, new XamlTypeResolver(xmlNamespaceResolver85, typeof(BuddyBand2SettingsView).GetTypeInfo().get_Assembly()));
		xamlServiceProvider85.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(180, 265)));
		object obj45 = ((IMarkupExtension)staticResourceExtension90).ProvideValue((IServiceProvider)xamlServiceProvider85);
		label36.TextColor = (Xamarin.Forms.Color)obj45;
		activ8ClickableFrame8.SetValue(ContentView.ContentProperty, label36);
		stackLayout20.Children.Add(activ8ClickableFrame8);
		blueButton6.SetValue(Vernacular.Xaml.Catalog.MessageProperty, "Unpair");
		blueButton6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
		blueButton6.SetValue(View.MarginProperty, new Thickness(0.0, 10.0, 0.0, 0.0));
		stackLayout20.Children.Add(blueButton6);
		stackLayout21.Children.Add(stackLayout20);
		scrollView.Content = stackLayout21;
		SetValue(ContentView.ContentProperty, scrollView);
	}

	private void __InitComponentRuntime()
	{
		Extensions.LoadFromXaml(this, typeof(BuddyBand2SettingsView));
		_outer = this.FindByName<ScrollView>("_outer");
		_bb2_status = this.FindByName<Label>("_bb2_status");
		_bb2_battery = this.FindByName<Image>("_bb2_battery");
		_bb2_collecting = this.FindByName<Label>("_bb2_collecting");
		_raw_box = this.FindByName<Activ8ClickableFrame>("_raw_box");
		_raw_date = this.FindByName<Label>("_raw_date");
		_raw_action = this.FindByName<BlueButton>("_raw_action");
		_fw_box = this.FindByName<Activ8ClickableFrame>("_fw_box");
		_fw_version = this.FindByName<Label>("_fw_version");
		_fw_summary = this.FindByName<Label>("_fw_summary");
		_fw_warning = this.FindByName<Label>("_fw_warning");
		_fw_action = this.FindByName<BlueButton>("_fw_action");
		_activity_nudge = this.FindByName<Switch>("_activity_nudge");
		_activity_nudge_inner = this.FindByName<StackLayout>("_activity_nudge_inner");
		_activity_nudge_help = this.FindByName<Activ8ClickableHelpButton>("_activity_nudge_help");
		_activity_nudge_help_msg = this.FindByName<Activ8ClickableFrame>("_activity_nudge_help_msg");
		_inactivity_time_picker = this.FindByName<Activ8Picker>("_inactivity_time_picker");
		_activity_bottom_bar = this.FindByName<Activ8DividingBar>("_activity_bottom_bar");
		_alarms = this.FindByName<Activ8ClickableLabel>("_alarms");
		_alarms_inner = this.FindByName<StackLayout>("_alarms_inner");
		_alarms_help = this.FindByName<Activ8ClickableHelpButton>("_alarms_help");
		_alarms_help_msg = this.FindByName<Activ8ClickableFrame>("_alarms_help_msg");
		_alarm1_summary = this.FindByName<Label>("_alarm1_summary");
		_alarm1_info = this.FindByName<Label>("_alarm1_info");
		_alarm1 = this.FindByName<BlueButton>("_alarm1");
		_alarm2_summary = this.FindByName<Label>("_alarm2_summary");
		_alarm2_info = this.FindByName<Label>("_alarm2_info");
		_alarm2 = this.FindByName<BlueButton>("_alarm2");
		_alarm3_summary = this.FindByName<Label>("_alarm3_summary");
		_alarm3_info = this.FindByName<Label>("_alarm3_info");
		_alarm3 = this.FindByName<BlueButton>("_alarm3");
		_alarms_bottom_bar = this.FindByName<Activ8DividingBar>("_alarms_bottom_bar");
		_sleep_schedule = this.FindByName<Switch>("_sleep_schedule");
		_sleep_schedule_inner = this.FindByName<StackLayout>("_sleep_schedule_inner");
		_sleep_schedule_help = this.FindByName<Activ8ClickableHelpButton>("_sleep_schedule_help");
		_sleep_schedule_help_msg = this.FindByName<Activ8ClickableFrame>("_sleep_schedule_help_msg");
		_sleepstart_time = this.FindByName<Activ8TimePicker>("_sleepstart_time");
		_sleepend_time = this.FindByName<Activ8TimePicker>("_sleepend_time");
		_sleep_schedule_bottom_bar = this.FindByName<Activ8DividingBar>("_sleep_schedule_bottom_bar");
		_trackers_outer = this.FindByName<StackLayout>("_trackers_outer");
		_trackers = this.FindByName<Activ8ClickableLabel>("_trackers");
		_trackers_inner = this.FindByName<StackLayout>("_trackers_inner");
		_trackers_innermost = this.FindByName<StackLayout>("_trackers_innermost");
		_trackers_picker = this.FindByName<Activ8Picker>("_trackers_picker");
		_dbltap = this.FindByName<Activ8Picker>("_dbltap");
		_no_trackers = this.FindByName<Activ8ClickableFrame>("_no_trackers");
		_unpair_help = this.FindByName<Activ8ClickableHelpButton>("_unpair_help");
		_unpair_help_msg = this.FindByName<Activ8ClickableFrame>("_unpair_help_msg");
		_unpair = this.FindByName<BlueButton>("_unpair");
	}
}

// Activ8rlives.BuddyBand2UI
using Activ8rlives;
using Activ8rlivesBase;
using System;
using Xamarin.Forms;

public class BuddyBand2UI : BluetoothStateMachine
{
	public BuddyBand2UIState_ConnectInstructions State_ConnectInstructions;

	public BuddyBand2UIState_NotConnected State_NotConnected;

	public BuddyBand2UIState_Pair1 State_Pair1;

	public BuddyBand2UIState_Error State_Error;

	public BuddyBand2UIState_Upgrade State_Upgrade;

	public BuddyBand2UIState_BluetoothCheck State_BluetoothCheck;

	public BuddyBand2UIState_Check State_Check;

	public BuddyBand2UIState_FirmwarePrep State_FirmwarePrep;

	public BuddyBand2HardwareSettings CurrentDevice
	{
		get;
		set;
	}

	public DataModel DataModel
	{
		get;
		private set;
	}

	public IBuddyBand2UIDelegate UIDelegate
	{
		get;
		private set;
	}

	public BuddyBand2UI(IBuddyBand2UIDelegate d)
		: base(CommonApp.CurrentCommonApp.getThreadService(), CommonApp.CurrentCommonApp.getLogger(), CommonApp.CurrentCommonApp.getBluetoothManager(), "BuddyBand2UI", d, lockout: false)
	{
		UIDelegate = d;
		DataModel = CommonApp.CurrentCommonApp.getDataModel();
		State_ConnectInstructions = new BuddyBand2UIState_ConnectInstructions(this);
		State_NotConnected = new BuddyBand2UIState_NotConnected(this);
		State_Pair1 = new BuddyBand2UIState_Pair1(this);
		State_Error = new BuddyBand2UIState_Error(this);
		State_Upgrade = new BuddyBand2UIState_Upgrade(this);
		State_BluetoothCheck = new BuddyBand2UIState_BluetoothCheck(this);
		State_Check = new BuddyBand2UIState_Check(this);
		State_FirmwarePrep = new BuddyBand2UIState_FirmwarePrep(this);
	}

	public override void Done()
	{
		base.Done();
	}

	public override void RunInForeground(Action a)
	{
		Device.BeginInvokeOnMainThread(a);
	}

	public static int GetCRC(byte[] p_data)
	{
		int num = 65535;
		for (int i = 0; i < p_data.Length; i++)
		{
			num = (((num >> 8) & 0xFF) | (num << 8));
			num ^= p_data[i];
			num ^= (num & 0xFF) >> 4;
			num ^= num << 8 << 4;
			num ^= (num & 0xFF) << 4 << 1;
		}
		return num & 0xFFFF;
	}
}

// Activ8rlives.BuddyBand2UIState_BluetoothCheck
using Activ8rlives;

public class BuddyBand2UIState_BluetoothCheck : BluetoothCheckStatusState<BuddyBand2UI>
{
	public BuddyBand2UIState_BluetoothCheck(BuddyBand2UI model)
		: base(model, (string)null)
	{
	}

	public override void OnBluetoothRunning()
	{
		if (base.StateMachine.UIDelegate.RunStateCheck())
		{
			base.State = base.StateMachine.State_Check;
		}
		else
		{
			base.State = base.StateMachine.State_ConnectInstructions;
		}
	}
}

// Activ8rlives.BuddyBand2UIState_Check
using Activ8rlives;
using Activ8rlivesBase;
using Xamarin.Forms;

public class BuddyBand2UIState_Check : DeviceState<BuddyBand2UI>, IBuddyBand2CheckState, IUIState
{
	private View slide_;

	public BuddyBand2UIState_Check(BuddyBand2UI model)
		: base(model, (string)null)
	{
	}

	public View GetSlide()
	{
		if (slide_ == null)
		{
			slide_ = new BuddyBand2CheckPage(this);
		}
		return slide_;
	}

	public void OnNextButton()
	{
		base.State = base.StateMachine.State_ConnectInstructions;
	}
}

// Activ8rlives.BuddyBand2UIState_ConnectInstructions
using Activ8rlives;
using Activ8rlivesBase;
using Xamarin.Forms;

public class BuddyBand2UIState_ConnectInstructions : DeviceState<BuddyBand2UI>, IUIState
{
	public BuddyBand2UIState_ConnectInstructions(BuddyBand2UI model)
		: base(model, (string)null)
	{
	}

	public void OnComplete()
	{
		base.State = base.StateMachine.State_NotConnected;
	}

	public View GetSlide()
	{
		return base.StateMachine.UIDelegate.GetInstructionView(OnComplete);
	}

	public override void StateStarted()
	{
		base.StateStarted();
	}
}

// Activ8rlives.BuddyBand2UIState_Error
using Activ8rlives;
using Vernacular;

public class BuddyBand2UIState_Error : GenericBluetoothState<BuddyBand2UI>
{
	public BuddyBand2UIState_Error(BuddyBand2UI model)
		: base(model, (string)null)
	{
		base.TopText = Catalog.Format(Catalog.GetString("Can't connect to the {0}."), base.StateMachine.UIDelegate.DeviceName());
		base.BottomText = Catalog.Format(Catalog.GetString("Please make sure the batteries are charged and the {0} isn't being used by any other device."), base.StateMachine.UIDelegate.DeviceName());
		base.Button1Label = Catalog.GetString("Try Again");
		base.Button2Label = Catalog.Format(Catalog.GetString("Try Another {0}"), base.StateMachine.UIDelegate.DeviceName());
	}

	public override void OnButton1()
	{
		base.State = base.StateMachine.State_ConnectInstructions;
	}

	public override void OnButton2()
	{
		base.State = base.StateMachine.State_ConnectInstructions;
	}
}

// Activ8rlives.BuddyBand2UIState_FirmwarePrep
using Activ8rlives;
using Activ8rlivesBase;
using System;
using Vernacular;

public class BuddyBand2UIState_FirmwarePrep : GenericBluetoothState<BuddyBand2UI>
{
	public enum PrepState
	{
		WAIT_FOR_VERSION,
		WAIT_FOR_DISCONNECT,
		RECONNECTING,
		WAIT_FOR_CONNECT,
		WAIT_FOR_APP_DISCONNECT
	}

	private BuddyBand2HardwareSettings device_;

	private PrepState prep_state_;

	private FirmwareVersion required_firmware_;

	public BuddyBand2UIState_FirmwarePrep(BuddyBand2UI model)
		: base(model, (string)null)
	{
	}

	public void Setup(FirmwareVersion fw)
	{
		required_firmware_ = fw;
	}

	private void SetStatus(string text)
	{
		base.BottomText = text;
		Log("Bootloader: {0}", text);
	}

	public override void StateStarted()
	{
		base.TopText = Catalog.Format(Catalog.GetString("Upgrading your {0}"), base.StateMachine.UIDelegate.DeviceName());
		base.Image = base.StateMachine.UIDelegate.ConnectingImage();
		SetStatus(Catalog.GetString("Changing to upgrade mode"));
		device_ = base.StateMachine.UIDelegate.GetActiveDevice();
		base.StateMachine.UIDelegate.Reboot();
		prep_state_ = PrepState.WAIT_FOR_APP_DISCONNECT;
		StartTimer(2);
	}

	public override void OnTimer()
	{
		if (prep_state_ == PrepState.WAIT_FOR_APP_DISCONNECT)
		{
			SetStatus(Catalog.GetString("Reconnecting to device"));
			base.StateMachine.Bluetooth.connectDevice(device_.BluetoothID, BuddyBand2Constants.svc1, null, null);
			prep_state_ = PrepState.WAIT_FOR_CONNECT;
		}
		else if (prep_state_ == PrepState.WAIT_FOR_VERSION)
		{
			RequestVersion();
		}
	}

	public override void OnBluetoothDataReceived(Guid characteristic, byte[] data)
	{
		if (prep_state_ == PrepState.WAIT_FOR_VERSION && data.Length == 4 && data[0] == 64)
		{
			int num = data[3];
			int num2 = data[2];
			Log("Received version {0} code {1}", num, num2);
			if (num == 0)
			{
				base.StateMachine.State_Upgrade.Setup(required_firmware_, device_);
				base.State = base.StateMachine.State_Upgrade;
				return;
			}
			SendReboot();
			base.StateMachine.UIDelegate.ClearActiveDevice();
			prep_state_ = PrepState.WAIT_FOR_APP_DISCONNECT;
			StartTimer(2);
		}
	}

	public override void OnBluetoothDeviceConnected()
	{
		base.StateMachine.Bluetooth.startNotifying(BuddyBand2Constants.read_char);
		if (prep_state_ == PrepState.WAIT_FOR_CONNECT)
		{
			RequestVersion();
			prep_state_ = PrepState.WAIT_FOR_VERSION;
		}
	}

	public override void OnBluetoothDeviceNotConnected()
	{
		base.StateMachine.Bluetooth.connectDevice(device_.BluetoothID, BuddyBand2Constants.svc1, null, null);
	}

	private void RequestVersion()
	{
		byte[] data = new byte[1]
		{
			64
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, data);
		SetStatus(Catalog.GetString("Requesting Version"));
	}

	private void SendReboot()
	{
		byte[] data = new byte[1]
		{
			132
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, data);
		Log("Sent reboot");
	}
}

// Activ8rlives.BuddyBand2UIState_NotConnected
using Activ8rlives;
using Activ8rlivesBase;
using System;
using Vernacular;

public class BuddyBand2UIState_NotConnected : GenericBluetoothState<BuddyBand2UI>
{
	private DiscoveredBuddyBand2 discovered_device_;

	public BuddyBand2UIState_NotConnected(BuddyBand2UI model)
		: base(model, (string)null)
	{
		base.TitleText = Catalog.Format(Catalog.GetString("Looking for your {0}"), base.StateMachine.UIDelegate.DeviceName());
		base.TopText = Catalog.Format(Catalog.GetString("Your {0} will appear here when it has been found."), base.StateMachine.UIDelegate.DeviceName());
		base.BottomText = Catalog.Format(Catalog.GetString("If your {0} doesn't appear, then press its silver button to wake it up."), base.StateMachine.UIDelegate.DeviceName());
		base.Image = base.StateMachine.UIDelegate.IdentifyImage();
		base.Button1Label = Catalog.Format(Catalog.GetString("My {0} isn't appearing"), base.StateMachine.UIDelegate.DeviceName());
		base.Content = new BuddyBand2DiscoverySlide(DeviceSelected);
	}

	public override void OnButton1()
	{
		base.State = base.StateMachine.State_ConnectInstructions;
	}

	public override void StateStarted()
	{
		base.StateStarted();
		discovered_device_ = null;
		base.StateMachine.Bluetooth.startScanning();
		base.StateMachine.UIDelegate.ClearActiveDevice();
		(base.Content as BuddyBand2DiscoverySlide).Clear();
	}

	public void DeviceSelected(DiscoveredBuddyBand2 band)
	{
		discovered_device_ = band;
		base.StateMachine.Bluetooth.connectDevice(discovered_device_.BluetoothID, BuddyBand2Constants.svc1, null, null);
		base.TitleText = Catalog.Format(Catalog.GetString("Connecting to your {0}"), base.StateMachine.UIDelegate.DeviceName());
		base.TopText = "";
		base.Button1Label = null;
		base.BottomText = "";
		base.Image = base.StateMachine.UIDelegate.ConnectingImage();
	}

	public override void OnBluetoothDeviceConnected()
	{
		base.OnBluetoothDeviceConnected();
		BuddyBand2HardwareSettings buddyBand2HardwareSettings = new BuddyBand2HardwareSettings
		{
			DeviceType = discovered_device_.DeviceType,
			BluetoothID = discovered_device_.BluetoothID,
			HardwareID = discovered_device_.HardwareID
		};
		base.StateMachine.Bluetooth.startNotifying(BuddyBand2Constants.read_char);
		base.StateMachine.CurrentDevice = buddyBand2HardwareSettings;
		if ((discovered_device_.Mode & 0x80) != 0)
		{
			Tuple<FirmwareVersion, bool> currentReleaseVersion = CommonApp.CurrentCommonApp.getFirmwareChecker().GetCurrentReleaseVersion(discovered_device_.DeviceType);
			base.StateMachine.State_Upgrade.Setup(currentReleaseVersion.Item1, buddyBand2HardwareSettings);
			base.State = base.StateMachine.State_Upgrade;
		}
		else
		{
			base.State = base.StateMachine.State_Pair1;
		}
	}

	public override void OnBluetoothDeviceNotConnected()
	{
		base.StateMachine.Bluetooth.connectDevice(discovered_device_.BluetoothID, BuddyBand2Constants.svc1, null, null);
	}

	public override void OnBluetoothDiscovered(Guid uuid, string name, Guid[] services, byte[] manufacturer, int rssi)
	{
		DiscoveredBuddyBand2 discoveredBuddyBand = base.StateMachine.UIDelegate.CheckDevice(manufacturer);
		if (discoveredBuddyBand == null)
		{
			Log(Catalog.Format(Catalog.GetString("Not a {0}"), base.StateMachine.UIDelegate.DeviceName()));
			return;
		}
		discoveredBuddyBand.Rssi = rssi;
		discoveredBuddyBand.Identifier = (manufacturer[3] & 0x7F).ToString();
		discoveredBuddyBand.BluetoothID = uuid;
		discoveredBuddyBand.Mode = manufacturer[3];
		discoveredBuddyBand.Icon = BuddyBand2Comms.deviceIcon(discoveredBuddyBand.DeviceType);
		discoveredBuddyBand.DeviceName = BuddyBand2Comms.deviceName(discoveredBuddyBand.DeviceType);
		base.Image = null;
		base.TitleText = Catalog.Format(Catalog.GetString("Select your {0}"), base.StateMachine.UIDelegate.DeviceName());
		base.TopText = Catalog.GetString("The list below shows all the devices that are in range.");
		base.BottomText = Catalog.Format(Catalog.GetString("Select the entry in the list with the same 2-digit number as your {0}"), base.StateMachine.UIDelegate.DeviceName());
		base.Button1Label = null;
		(base.Content as BuddyBand2DiscoverySlide).AddBuddyBand(discoveredBuddyBand);
	}
}

// Activ8rlives.BuddyBand2UIState_Pair1
using Activ8rlives;
using Activ8rlivesBase;
using System;
using System.Text;
using Vernacular;

public class BuddyBand2UIState_Pair1 : GenericBluetoothState<BuddyBand2UI>
{
	public BuddyBand2UIState_Pair1(BuddyBand2UI model)
		: base(model, (string)null)
	{
		base.TitleText = Catalog.Format(Catalog.GetString("Pairing with your {0}", "Buddyband2, Puffclicker, etc"), base.StateMachine.UIDelegate.DeviceName());
		base.TopText = Catalog.Format(Catalog.GetString("Connecting to the {0} that you have selected"), base.StateMachine.UIDelegate.DeviceName());
		base.Image = base.StateMachine.UIDelegate.IdentifyImage();
		base.Button1Label = null;
		base.Button2Label = null;
		base.Content = new PinSlide();
	}

	private void InitiateBond()
	{
		byte[] array = new byte[6];
		uint num = (uint)base.StateMachine.DataModel.GetUserId(-1L);
		array[0] = 128;
		array[1] = (byte)(base.StateMachine.UIDelegate.UseBonding() ? 1 : 0);
		array[2] = (byte)(num & 0xFF);
		array[3] = (byte)((num >> 8) & 0xFF);
		array[4] = (byte)((num >> 16) & 0xFF);
		array[5] = (byte)((num >> 24) & 0xFF);
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, array);
		Log("Initiated bond for user {0}", num);
	}

	public override void StateStarted()
	{
		base.StateStarted();
		base.BottomText = Catalog.GetString("Requesting version");
		RequestVersion();
	}

	public override void OnButton2()
	{
		if (base.StateMachine.Bluetooth != null && base.Content != null)
		{
			base.Image = base.StateMachine.UIDelegate.IdentifyImage();
			if (base.StateMachine.UIDelegate.UseBonding())
			{
				base.TopText = Catalog.Format(Catalog.GetString("Bonding with your {0}. If you get a popup asking you if you wish to pair, please say Yes"), base.StateMachine.UIDelegate.DeviceName());
			}
			else
			{
				base.TopText = Catalog.Format(Catalog.GetString("Bonding with your {0}"), base.StateMachine.UIDelegate.DeviceName());
			}
			base.Content = null;
			base.Button1Label = null;
			base.Button2Label = null;
			base.BottomText = "";
			InitiateBond();
			StartTimer(3);
		}
	}

	public override void OnTimer()
	{
		Log("Reinitialising");
		base.StateMachine.Bluetooth.reInitialise();
		StartTimer(3);
	}

	private void RequestVersion()
	{
		byte[] data = new byte[1]
		{
			64
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, data);
		Log("Requested Version");
	}

	public override void OnButton1()
	{
		base.State = base.StateMachine.State_ConnectInstructions;
	}

	private void SendPincode()
	{
		uint num = (uint)new Random().Next();
		num %= 1000000u;
		base.BottomText = null;
		base.Image = null;
		(base.Content as PinSlide).SetPin(num.ToString("000000"));
		base.TopText = Catalog.Format(Catalog.GetString("Is your {0} displaying the following number?"), base.StateMachine.UIDelegate.DeviceName());
		base.Button1Label = Catalog.GetString("No");
		base.Button2Label = Catalog.GetString("Yes");
		byte[] data = new byte[5]
		{
			133,
			(byte)(num & 0xFF),
			(byte)((num >> 8) & 0xFF),
			(byte)((num >> 16) & 0xFF),
			(byte)((num >> 24) & 0xFF)
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, data);
	}

	public override void OnBluetoothDeviceConnected()
	{
		RequestVersion();
	}

	public override void OnBluetoothDataReceived(Guid characteristic, byte[] data)
	{
		base.OnBluetoothDataReceived(characteristic, data);
		if (data.Length >= 2 && data[0] == 66)
		{
			string @string = Encoding.UTF8.GetString(data, 2, data.Length - 3);
			Log("DEBUG {0} {1}", data[1], @string);
			return;
		}
		string text = "";
		for (int i = 0; i < data.Length; i++)
		{
			text = string.Format("{0} {1:X2}", new object[2]
			{
				text,
				(int)data[i]
			});
		}
		Log("Received data len={0} data={1}", data.Length, text);
		if (data.Length == 2 && data[0] == 128 && data[1] == 1)
		{
			BondMade();
		}
		else if (data.Length == 2 && data[0] == 128 && data[1] != 1)
		{
			base.State = base.StateMachine.State_ConnectInstructions;
		}
		else if (data.Length == 4 && data[0] == 64)
		{
			Log("Version is {0} bond code {1}", data[3], data[2]);
			if (data[2] == 0)
			{
				Log("Version indicates bond");
				BondMade();
			}
			else if (base.Content != null)
			{
				Log("Sending Pin Code");
				SendPincode();
			}
		}
	}

	private void BondMade()
	{
		base.StateMachine.UIDelegate.SetActiveDevice(base.StateMachine.CurrentDevice);
		Done();
	}

	public override void OnBluetoothDeviceDisconnected()
	{
		base.OnBluetoothDeviceDisconnected();
		base.State = base.StateMachine.State_ConnectInstructions;
	}
}

// Activ8rlives.BuddyBand2UIState_Upgrade
using Activ8rlives;
using Activ8rlivesBase;
using System;
using System.Linq;
using System.Threading.Tasks;
using Vernacular;
using Xamarin.Forms;

public class BuddyBand2UIState_Upgrade : GenericBluetoothState<BuddyBand2UI>
{
	public enum UpgradeState
	{
		UPLOADING,
		WAIT_FOR_BOOT_DISCONNECT,
		WAIT_FOR_BOOT_RECONNECT,
		WAIT_FOR_VERSION,
		WAIT_FOR_FIRMWARE,
		FIRMWARE_FAIL
	}

	private BuddyBand2HardwareSettings device_;

	private byte[] firmware_;

	private UpgradeState upgrade_state_;

	private int offset_;

	private int percent_;

	private FirmwareVersion required_firmware_;

	private const int BATCH_SIZE = 10;

	public BuddyBand2UIState_Upgrade(BuddyBand2UI model)
		: base(model, (string)null)
	{
	}

	private void SetStatus(string text)
	{
		base.BottomText = text;
		Log("Bootloader: {0}", text);
	}

	public void Setup(FirmwareVersion fw, BuddyBand2HardwareSettings device)
	{
		device_ = device;
		required_firmware_ = fw;
	}

	public override void StateStarted()
	{
		base.TopText = Catalog.Format(Catalog.GetString("Upgrading your {0}"), base.StateMachine.UIDelegate.DeviceName());
		base.Image = base.StateMachine.UIDelegate.ConnectingImage();
		SetStatus(Catalog.GetString("Fetching Firmware"));
		upgrade_state_ = UpgradeState.WAIT_FOR_FIRMWARE;
		Log("Downloading firmware {0}", required_firmware_.Code);
		base.StateMachine.UIDelegate.GetFirmware(required_firmware_).ContinueWith(delegate(Task<byte[]> task)
		{
			BuddyBand2UIState_Upgrade buddyBand2UIState_Upgrade = this;
			Device.BeginInvokeOnMainThread(delegate
			{
				buddyBand2UIState_Upgrade.firmware_ = task.Result;
				buddyBand2UIState_Upgrade.StartUpgrade();
			});
		});
	}

	public override void OnButton1()
	{
		if (upgrade_state_ == UpgradeState.FIRMWARE_FAIL)
		{
			Done();
		}
	}

	public override void OnBluetoothDeviceDisconnected()
	{
		if (upgrade_state_ == UpgradeState.WAIT_FOR_BOOT_DISCONNECT)
		{
			SetStatus(Catalog.Format(Catalog.GetString("Reconnecting to {0}"), base.StateMachine.UIDelegate.DeviceName()));
			upgrade_state_ = UpgradeState.WAIT_FOR_BOOT_RECONNECT;
			base.StateMachine.Bluetooth.connectDevice(device_.BluetoothID, BuddyBand2Constants.svc1, null, null);
		}
	}

	public override void OnBluetoothDeviceConnected()
	{
		if (upgrade_state_ == UpgradeState.WAIT_FOR_BOOT_RECONNECT)
		{
			SetStatus(Catalog.GetString("Reconnected"));
			upgrade_state_ = UpgradeState.WAIT_FOR_VERSION;
			base.StateMachine.Bluetooth.startNotifying(BuddyBand2Constants.read_char);
			RequestVersion();
		}
	}

	private void StartUpgrade()
	{
		SetStatus(Catalog.GetString("Changing to upgrade mode"));
		upgrade_state_ = UpgradeState.UPLOADING;
		SendStart();
		SendSizes();
	}

	private void RequestVersion()
	{
		byte[] data = new byte[1]
		{
			64
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, data);
		SetStatus(Catalog.GetString("Requesting Version"));
	}

	private void SendStart()
	{
		byte[] data = new byte[2]
		{
			1,
			4
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, data);
		SetStatus(Catalog.GetString("Sent Start packet"));
	}

	private void SendSizes()
	{
		int num = firmware_.Length;
		byte[] data = new byte[13]
		{
			18,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			(byte)(num & 0xFF),
			(byte)((num >> 8) & 0xFF),
			(byte)((num >> 16) & 0xFF),
			(byte)((num >> 24) & 0xFF)
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, data);
		SetStatus(Catalog.GetString("Send sizes"));
	}

	private void SendInitStart()
	{
		byte[] data = new byte[2]
		{
			2,
			0
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, data);
		SetStatus(Catalog.GetString("Sent Init Start packet"));
	}

	private void SendInitPacket()
	{
		int num = firmware_.Length;
		byte[] array = new byte[15];
		int cRC = BuddyBand2UI.GetCRC(firmware_);
		array[0] = 18;
		array[1] = byte.MaxValue;
		array[2] = byte.MaxValue;
		array[3] = byte.MaxValue;
		array[4] = byte.MaxValue;
		array[5] = byte.MaxValue;
		array[6] = byte.MaxValue;
		array[7] = 0;
		array[8] = 0;
		array[9] = 1;
		array[10] = 0;
		array[11] = 100;
		array[12] = 0;
		array[13] = (byte)(cRC & 0xFF);
		array[14] = (byte)((cRC >> 8) & 0xFF);
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, array);
		SetStatus(Catalog.GetString("Send Init Packet"));
	}

	private void SendInitEnd()
	{
		byte[] data = new byte[2]
		{
			2,
			1
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, data);
		SetStatus(Catalog.GetString("Sent Init End packet"));
	}

	private void SendInit()
	{
		SendInitStart();
		SendInitPacket();
		SendInitEnd();
	}

	private void SendEnablePacketNotificationRequest()
	{
		byte[] data = new byte[3]
		{
			8,
			10,
			0
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, data);
		SetStatus(Catalog.GetString("Sent Packet Notification Request"));
	}

	private void SendReceiveFirmwareImageCommand()
	{
		byte[] data = new byte[1]
		{
			3
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, data);
		SetStatus(Catalog.GetString("Sent Receive Firmware Request"));
	}

	private void SendPacket()
	{
		int num = firmware_.Length - offset_;
		if (num > 16)
		{
			num = 16;
		}
		if (num != 0)
		{
			byte[] array = new byte[num + 1];
			array[0] = 18;
			for (int i = 0; i < num; i++)
			{
				array[1 + i] = firmware_[offset_ + i];
			}
			base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, array);
			offset_ += num;
		}
	}

	private void SendPackets()
	{
		for (int i = 0; i < 10; i++)
		{
			SendPacket();
		}
		int num = 100 * offset_ / firmware_.Count();
		num /= 2;
		num *= 2;
		if (num != percent_)
		{
			percent_ = num;
			SetStatus(string.Format(Catalog.GetString("Sent Data {0}/{1} {2}%"), new object[3]
			{
				offset_,
				firmware_.Count(),
				percent_
			}));
		}
	}

	private void SendFirmware()
	{
		offset_ = 0;
		percent_ = -1;
		SendEnablePacketNotificationRequest();
		SendReceiveFirmwareImageCommand();
		SendPackets();
	}

	private void Validate()
	{
		byte[] data = new byte[1]
		{
			4
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, data);
		SetStatus(Catalog.GetString("Sent Validate Request"));
	}

	private void Activate()
	{
		byte[] data = new byte[1]
		{
			5
		};
		base.StateMachine.Bluetooth.writeCharacteristic(BuddyBand2Constants.write_char, data);
		SetStatus(Catalog.GetString("Sent Activate Request"));
	}

	public override void OnBluetoothDataReceived(Guid characteristic, byte[] data)
	{
		base.OnBluetoothDataReceived(characteristic, data);
		if (upgrade_state_ == UpgradeState.UPLOADING)
		{
			if (data.Length == 3 && data[0] == 16)
			{
				Log("Received Response {0} {1}", data[1], data[2]);
				if (data[2] != 1)
				{
					SetStatus(Catalog.GetString("Failed"));
					return;
				}
				if (data[1] == 1)
				{
					SendInit();
					return;
				}
				if (data[1] == 2)
				{
					SendFirmware();
					return;
				}
				if (data[1] == 3)
				{
					Validate();
					return;
				}
				if (data[1] == 4)
				{
					Activate();
					SetStatus(Catalog.GetString("Activated Firmware"));
					upgrade_state_ = UpgradeState.WAIT_FOR_BOOT_DISCONNECT;
					return;
				}
			}
			if (data.Length == 5 && data[0] == 17)
			{
				SendPackets();
			}
		}
		else if (upgrade_state_ == UpgradeState.WAIT_FOR_VERSION && data.Length == 4 && data[0] == 64)
		{
			int num = data[3];
			int num2 = data[2];
			Log("Received version {0} code {1}", num, num2);
			if (num2 == 0)
			{
				base.StateMachine.UIDelegate.SetActiveDevice(device_);
				Done();
			}
			else
			{
				base.StateMachine.CurrentDevice = device_;
				base.State = base.StateMachine.State_Pair1;
			}
		}
	}
}

// Activ8rlives.CarerCareeExtensions
using Activ8rlivesBase;
using System.IO;
using Xamarin.Forms;

public static class CarerCareeExtensions
{
	public static ImageSource GetAvatar(this CarerCareeItem login)
	{
		if (login.AvatarData != null)
		{
			return ImageSource.FromStream(() => new MemoryStream(login.AvatarData));
		}
		return null;
	}

	public static string GetNickname(this CarerCareeItem login, string def)
	{
		if (login.UserParams.TryGetValue("user-nickname", out string value))
		{
			return value;
		}
		if (login.UserParams.TryGetValue("user-first-name", out value))
		{
			return value;
		}
		return def;
	}

	public static string GetFullName(this CarerCareeItem login, string def)
	{
		string value = "";
		string value2 = "";
		if (!login.UserParams.TryGetValue("user-first-name", out value))
		{
			return def;
		}
		if (!login.UserParams.TryGetValue("user-last-name", out value2))
		{
			return def;
		}
		return string.Format("{0} {1}", new object[2]
		{
			value,
			value2
		});
	}

	public static string GetAddress(this CarerCareeItem login, string def)
	{
		string value = "";
		if (login.UserParams.TryGetValue("user-address", out value))
		{
			return value;
		}
		return def;
	}

	public static string GetPostcode(this CarerCareeItem login, string def)
	{
		string value = "";
		if (login.UserParams.TryGetValue("user-postcode", out value))
		{
			return value;
		}
		return def;
	}

	public static string GetPhone(this CarerCareeItem login, string def)
	{
		string value = "";
		if (login.UserParams.TryGetValue("user-phone", out value))
		{
			return value;
		}
		return def;
	}

	public static string GetRelationship(this CarerCareeItem login, string def)
	{
		string value = "";
		if (login.UserParams.TryGetValue("user-relationship", out value))
		{
			return value;
		}
		return def;
	}

	public static string GetPin(this CarerCareeItem login, string def)
	{
		string value = "";
		if (login.UserParams.TryGetValue("user-app-pin", out value))
		{
			return value;
		}
		return def;
	}
}

// Activ8rlives.ChildViewBit<T>
using Activ8rlives;
using NGraphics;
using Xamarin.Forms;

public class ChildViewBit<T> : FlexibleRectBit where T : View
{
	private IPlatform platform_;

	public T Child
	{
		get;
		set;
	}

	public ChildViewBit(IPlatform platform)
	{
		platform_ = platform;
	}

	public void Layout()
	{
		if (Child != null)
		{
			double x = platform_.NtoX(base.Position.X);
			double y = platform_.NtoX(base.Position.Y);
			double width = platform_.NtoX(base.Position.Width);
			double height = platform_.NtoX(base.Position.Height);
			Child.Layout(new Xamarin.Forms.Rectangle(x, y, width, height));
		}
	}
}

// Activ8rlives.ChoiceLocalParameterEditor
using Activ8rlives;
using System;
using System.Collections.Generic;

public class ChoiceLocalParameterEditor : Activ8Picker, ILocalParamSubscriber
{
	private DataModel model_;

	private string param_name_;

	private string[] items_;

	private bool refreshing_;

	public ChoiceLocalParameterEditor(string param_name, string[] values, string[] labels)
	{
		model_ = CommonApp.CurrentCommonApp.getDataModel();
		param_name_ = param_name;
		items_ = values;
		MessageCenterUtils.LocalParamsUpdated(this);
		for (int i = 0; i < values.Length; i++)
		{
			base.Items.Add(labels[i]);
		}
		base.SelectedIndexChanged += Update;
		Refresh();
	}

	public void LocalParamsUpdated(ISet<string> names)
	{
		if (names == null || names.Contains(param_name_))
		{
			Refresh();
		}
	}

	private string GetSelectedValue()
	{
		int selectedIndex = base.SelectedIndex;
		if (selectedIndex < 0)
		{
			return items_[0];
		}
		if (selectedIndex >= items_.Length)
		{
			return items_[0];
		}
		return items_[selectedIndex];
	}

	private int GetIndexFor(string value)
	{
		for (int i = 0; i < items_.Length; i++)
		{
			if (items_[i] == value)
			{
				return i;
			}
		}
		return 0;
	}

	private void Update(object sender, EventArgs args)
	{
		if (!refreshing_)
		{
			model_.SetLocalParameter(param_name_, GetSelectedValue(), -1L);
		}
	}

	private void Refresh()
	{
		refreshing_ = true;
		try
		{
			int indexFor = GetIndexFor(model_.GetLocalParameter(param_name_, items_[0], -1L));
			if (indexFor != base.SelectedIndex)
			{
				base.SelectedIndex = indexFor;
			}
		}
		finally
		{
			refreshing_ = false;
		}
	}
}

// Activ8rlives.ChoiceParameterEditor
using Activ8rlives;
using System;
using System.Collections.Generic;

public class ChoiceParameterEditor : Activ8Picker, IParamSubscriber
{
	private DataModel model_;

	private string param_name_;

	private string[] items_;

	private bool refreshing_;

	public bool InputValid => base.SelectedIndex >= 0;

	public ChoiceParameterEditor(string param_name, string[] values, string[] labels)
	{
		model_ = CommonApp.CurrentCommonApp.getDataModel();
		param_name_ = param_name;
		items_ = values;
		MessageCenterUtils.ParamsUpdated(this);
		for (int i = 0; i < values.Length; i++)
		{
			base.Items.Add(labels[i]);
		}
		base.SelectedIndexChanged += Update;
		Refresh();
	}

	public void ParamsUpdated(ISet<string> names)
	{
		if (names == null || names.Contains(param_name_))
		{
			Refresh();
		}
	}

	private string GetSelectedValue()
	{
		int selectedIndex = base.SelectedIndex;
		if (selectedIndex < 0)
		{
			return items_[0];
		}
		if (selectedIndex >= items_.Length)
		{
			return items_[0];
		}
		return items_[selectedIndex];
	}

	private int GetIndexFor(string value)
	{
		for (int i = 0; i < items_.Length; i++)
		{
			if (items_[i] == value)
			{
				return i;
			}
		}
		return 0;
	}

	private void Update(object sender, EventArgs args)
	{
		if (!refreshing_)
		{
			model_.SetParameter(param_name_, GetSelectedValue(), uploaded: false, -1L);
		}
	}

	private void Refresh()
	{
		refreshing_ = true;
		try
		{
			string parameter = model_.GetParameter(param_name_, null, -1L);
			int num = (!string.IsNullOrEmpty(parameter)) ? GetIndexFor(parameter) : (-1);
			if (num != base.SelectedIndex)
			{
				base.SelectedIndex = num;
			}
		}
		finally
		{
			refreshing_ = false;
		}
	}
}

// Activ8rlives.IBluetoothCheckState
using Activ8rlives;

public interface IBluetoothCheckState : IUIState
{
	string Text
	{
		get;
	}

	void OnBluetoothRunning();
}

// Activ8rlives.IActiv8rlives
using Activ8rlives;
using Activ8rlivesBase;
using NGraphics;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xamarin.Forms;

public interface IActiv8rlives
{
	ILogger getLogger();

	IThread getThreadService();

	IPlatform getGraphicsPlatform();

	IBusyHandler getBusyHandler();

	IBluetoothManager getBluetoothManager();

	FirmwareManager getFirmwareChecker();

	IBuddyBand2 getBuddyBand2();

	IBuddyBand2 getPuffClicker(int slot);

	bool AllowBodyAnalysisforU16();

	void MakeMetaData();

	void TopLevel(string route);

	string GetLocalRouteOverride(string route);

	void GotoUploadStatus();

	void GotoDisclaimer(Action complete_action);

	bool hasCamera();

	bool hasPhotoLibrary();

	Task<IMediaFile> getCameraImage();

	Task<IMediaFile> getGalleryImage();

	byte[] ResizeImage(byte[] image, float width, float height);

	void Log(string msg, params object[] args);

	double cmToPx(double cm);

	void sendBugReport();

	void sendSupportContact();

	void sendSupportTel();

	void call112();

	void AsyncReport(Task task);

	bool isWifiConnected();

	string getVersionString();

	void RefreshMenu();

	string getPlatformString();

	string getAppName();

	DataModel getDataModel();

	Synchroniser getSynchroniser();

	void ToggleMenu();

	void CloseMenu();

	Task Push(View view, Direction dir);

	Task Replace(View view, Direction dir);

	double[] getCurrentLocation();

	Task Pop();

	View TopView();

	void MakePushDirect(string route, Direction dir);

	void PushDirect(View view, Direction dir);

	void ReplaceDirect(View view, Direction dir);

	void PopDirect();

	Tuple<string, string> BreakRoute(string route, string default_route);

	void ResetAuthNag();

	Task DisplayAlert1(string title, string message, string button);

	Task<bool> DisplayAlert2(string title, string message, string ok, string cancel);

	void ClearMessageBadge();

	bool IsMessageBadged();

	bool HasEditMedicationPermission();

	Guid AppId();

	void OpenExternal(string url);

	Dictionary<string, Subscription.SubscriptionItem> GetProductSkuData(List<string> sku_list);

	void PurchaseProduct(string sku);

	void CheckNewerSubscription();

	void SetCarerMode(bool carer);

	bool GetCarerMode();

	void sendTelephoneCall(string telNumber);

	void sendEmail(string emAddress, string emSubject, string emBody);

	Task<CommonApp.CameraPermState> RequestCameraPermission(bool silent);
}

// Activ8rlives.IActiv8rlivesEx
using Activ8rlives;
using System;
using Xamarin.Forms;

public static class IActiv8rlivesEx
{
	public static void PushDirectIfNot<RequiredType>(this IActiv8rlives self, Func<View> factory, Direction dir)
	{
		View view = self.TopView();
		if (view != null && view is RequiredType)
		{
			self.Log("Not creating {0}", typeof(RequiredType));
		}
		else
		{
			self.PushDirect(factory(), dir);
		}
	}
}

// Activ8rlives.IBluetoothScalesCheckState
using Activ8rlives;

public interface IBluetoothScalesCheckState : IUIState
{
	void OnNextButton();
}

// Activ8rlivesBase.BluetoothDeviceState
using Activ8rlivesBase;
using System;

public abstract class BluetoothDeviceState : DeviceState
{
	public BluetoothDeviceState(BluetoothStateMachine model, string name = null)
		: base(model, name)
	{
	}

	public virtual void OnBluetoothDiscovered(Guid uuid, string name, Guid[] services, byte[] manufacturer, int rssi)
	{
	}

	public virtual void OnBluetoothDiscoveryFailed()
	{
	}

	public virtual void OnBluetoothDeviceConnected()
	{
	}

	public virtual void OnBluetoothDeviceNotConnected()
	{
	}

	public virtual void OnBluetoothDeviceDisconnected()
	{
	}

	public virtual void OnBluetoothDataReceived(Guid characteristic, byte[] data)
	{
	}

	public virtual void OnBluetoothDataSent(Guid characteristic)
	{
	}

	public virtual void OnBluetoothDescriptorWrite(Guid characteristic)
	{
	}
}

// Activ8rlivesBase.BluetoothDeviceState<M>
using Activ8rlivesBase;
using System.Text;

public abstract class BluetoothDeviceState<M> : BluetoothDeviceState where M : BluetoothStateMachine
{
	public M StateMachine => base.BaseStateMachine as M;

	public BluetoothDeviceState(M machine, string name = null)
		: base(machine, name)
	{
	}

	public void dumpMessage(byte[] data)
	{
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < data.Length; i++)
		{
			stringBuilder.AppendFormat(" {0:X2}", new object[1]
			{
				(int)data[i]
			});
		}
		Log("Received data {0}", stringBuilder.ToString());
	}
}

// Activ8rlivesBase.BluetoothExtensions
using System;

public static class BluetoothExtensions
{
	public static readonly DateTime origin = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);

	public static bool CheckForService(this Guid[] services, Guid service)
	{
		for (int i = 0; i < services.Length; i++)
		{
			if (service.Equals(services[i]))
			{
				return true;
			}
		}
		return false;
	}

	public static Guid AsGuid(this string uuid)
	{
		uuid = uuid.ToLower();
		if (uuid.Length == 4)
		{
			uuid = "0000" + uuid + "-0000-1000-8000-00805f9b34fb";
		}
		return Guid.ParseExact(uuid, "d");
	}

	public static Guid CareSensGlucoseRecord(DateTime date, uint uid)
	{
		uint num = (uint)Math.Floor((date.ToUniversalTime() - origin).TotalSeconds);
		byte[] obj = new byte[16]
		{
			0,
			0,
			0,
			0,
			173,
			222,
			239,
			190,
			238,
			238,
			0,
			0,
			0,
			0,
			0,
			0
		};
		obj[0] = (byte)((uid >> 24) & 0xFF);
		obj[1] = (byte)((uid >> 16) & 0xFF);
		obj[2] = (byte)((uid >> 8) & 0xFF);
		obj[3] = (byte)(uid & 0xFF);
		obj[10] = (byte)(num & 0xFF);
		obj[11] = (byte)((num >> 8) & 0xFF);
		obj[12] = (byte)((num >> 16) & 0xFF);
		obj[13] = (byte)((num >> 24) & 0xFF);
		return new Guid(obj);
	}
}

// Activ8rlivesBase.BluetoothFake
using Activ8rlivesBase;

public class BluetoothFake : IBluetoothManager
{
	public IBluetoothCore openBluetooth(string module_name, IBluetoothDelegate user, bool lockout)
	{
		return null;
	}

	public bool isBluetoothSupported()
	{
		return false;
	}
}

// Activ8rlivesBase.BluetoothStateMachine
using Activ8rlivesBase;
using System;

public abstract class BluetoothStateMachine : StateMachine, IBluetoothDelegate
{
	private IBluetoothManager bt_manager_;

	private bool lockout_;

	public IBluetoothCore Bluetooth
	{
		get;
		private set;
	}

	public bool isBluetoothSupported
	{
		get;
		private set;
	}

	public BluetoothStateMachine(IThread thread, ILogger logger, IBluetoothManager app, string name, IStateMachineDelegate d, bool lockout)
		: base(thread, logger, name, d)
	{
		lockout_ = lockout;
		bt_manager_ = app;
		isBluetoothSupported = bt_manager_.isBluetoothSupported();
	}

	private void startBluetooth()
	{
		if (Bluetooth == null)
		{
			Bluetooth = bt_manager_.openBluetooth(base.Name, this, lockout_);
		}
	}

	private void stopBluetooth()
	{
		if (Bluetooth != null)
		{
			Bluetooth.closeBluetooth();
			Bluetooth = null;
		}
	}

	public override void Shutdown()
	{
		base.Shutdown();
		stopBluetooth();
	}

	protected override void StateWillStart(DeviceState state)
	{
		base.StateWillStart(state);
		if (state is BluetoothDeviceState)
		{
			startBluetooth();
		}
	}

	protected override void StateStarted(DeviceState state)
	{
		base.StateStarted(state);
		if (!(state is BluetoothDeviceState))
		{
			stopBluetooth();
		}
	}

	public void deviceDiscovered(Guid uuid, string name, Guid[] services, byte[] manufacturer, int rssi)
	{
		RunInForeground(delegate
		{
			(base.State as BluetoothDeviceState)?.OnBluetoothDiscovered(uuid, name, services, manufacturer, rssi);
		});
	}

	public void discoveryFailed()
	{
		RunInForeground(delegate
		{
			(base.State as BluetoothDeviceState)?.OnBluetoothDiscoveryFailed();
		});
	}

	public void deviceConnected()
	{
		RunInForeground(delegate
		{
			(base.State as BluetoothDeviceState)?.OnBluetoothDeviceConnected();
		});
	}

	public void deviceNotConnected()
	{
		RunInForeground(delegate
		{
			(base.State as BluetoothDeviceState)?.OnBluetoothDeviceNotConnected();
		});
	}

	public void deviceDisconnected()
	{
		RunInForeground(delegate
		{
			(base.State as BluetoothDeviceState)?.OnBluetoothDeviceDisconnected();
		});
	}

	public void dataReceived(Guid characteristic, byte[] data)
	{
		RunInForeground(delegate
		{
			(base.State as BluetoothDeviceState)?.OnBluetoothDataReceived(characteristic, data);
		});
	}

	public void dataSent(Guid characteristic)
	{
		RunInForeground(delegate
		{
			(base.State as BluetoothDeviceState)?.OnBluetoothDataSent(characteristic);
		});
	}

	public void descriptorWriteCompleted(Guid characteristic)
	{
		RunInForeground(delegate
		{
			(base.State as BluetoothDeviceState)?.OnBluetoothDescriptorWrite(characteristic);
		});
	}
}

// Activ8rlivesBase.IBluetoothCore
using Activ8rlivesBase;
using System;

public interface IBluetoothCore
{
	void closeBluetooth();

	void startScanning();

	void connectDevice(Guid identifier, ServiceDescriptor svc1, ServiceDescriptor svc2, ServiceDescriptor svc3);

	void resetToIdle();

	void startNotifying(Guid characteristic);

	void readCharacteristic(Guid characteristic);

	void writeCharacteristic(Guid characteristic, byte[] data);

	Guid getConnectedDevice();

	bool notAuthorized();

	bool notPowered();

	bool locationRequiredAndNotEnabled();

	void reInitialise();
}

// Activ8rlivesBase.IBluetoothManager
using Activ8rlivesBase;

public interface IBluetoothManager
{
	IBluetoothCore openBluetooth(string module_name, IBluetoothDelegate user, bool lockout);

	bool isBluetoothSupported();
}

// Activ8rlivesBase.IBluetoothDelegate
using System;

public interface IBluetoothDelegate
{
	void deviceDiscovered(Guid identifier, string name, Guid[] services, byte[] manufacturer, int rssi);

	void discoveryFailed();

	void deviceConnected();

	void deviceNotConnected();

	void deviceDisconnected();

	void dataReceived(Guid characteristic, byte[] data);

	void dataSent(Guid characteristic);

	void descriptorWriteCompleted(Guid characteristic);
}

// Activ8rlivesBase.Droid.BluetoothApi18
using Activ8rlivesBase;
using Activ8rlivesBase.Droid;
using Android.Bluetooth;
using Android.Content;
using Android.Runtime;
using Java.Lang;
using System;

public class BluetoothApi18 : Activ8rlivesBase.Droid.BluetoothManager
{
	private class ScanCallback : Java.Lang.Object, BluetoothAdapter.ILeScanCallback, IJavaObject, IDisposable
	{
		private Activ8rlivesBase.Droid.BluetoothManager _manager;

		public ScanCallback(Activ8rlivesBase.Droid.BluetoothManager manager)
		{
			_manager = manager;
		}

		public void OnLeScan(BluetoothDevice bleDevice, int rssi, byte[] scanRecord)
		{
			_manager.OnLeScan(bleDevice, rssi, scanRecord);
		}
	}

	private const int SCAN_CYCLE = 30;

	private const int SCAN_ON = 28;

	private int _scanners;

	private int _scancounter;

	private bool _scanning;

	private ScanCallback _scancallback;

	public BluetoothApi18(Context context, BluetoothAdapter adapter, IThread thread, ILogger logger, IBluetoothInterlock interlock)
		: base(context, adapter, thread, logger, interlock)
	{
		_scancallback = new ScanCallback(this);
		_scanners = 0;
		_scancounter = 0;
		_scanning = false;
		Init();
	}

	public override void addScanner()
	{
		if (_scanners > 0)
		{
			if (_scanning)
			{
				stopScanning();
				_scancounter = 29;
			}
		}
		else
		{
			_scancounter = 0;
		}
		_scanners++;
	}

	public override void removeScanner()
	{
		if (_scanners > 0)
		{
			_scanners--;
		}
		if (_scanners == 0)
		{
			stopScanning();
		}
	}

	private void startScanning()
	{
		if (!_scanning)
		{
			_scanning = true;
			Log("Starting scan");
			base.Adapter.StartLeScan(_scancallback);
		}
	}

	private void stopScanning()
	{
		if (_scanning)
		{
			_scanning = false;
			Log("stopping scan");
			try
			{
				base.Adapter.StopLeScan(_scancallback);
			}
			catch (System.Exception ex)
			{
				Log("Stopping scan: {0}", ex.Message);
			}
		}
	}

	protected override void killScanning()
	{
		stopScanning();
		_scanners = 0;
	}

	protected override void OnTimer()
	{
		base.OnTimer();
		if (_scanners > 0)
		{
			if (_scancounter % 30 == 0)
			{
				startScanning();
			}
			if (_scancounter % 30 == 28)
			{
				stopScanning();
			}
			_scancounter++;
		}
	}
}

// Activ8rlivesBase.Droid.BluetoothApi23
using Activ8rlivesBase;
using Activ8rlivesBase.Droid;
using Android.Bluetooth;
using Android.Bluetooth.LE;
using Android.Content;
using System;

public class BluetoothApi23 : Activ8rlivesBase.Droid.BluetoothManager
{
	private class MyScanCallback : ScanCallback
	{
		private Activ8rlivesBase.Droid.BluetoothManager _manager;

		public MyScanCallback(Activ8rlivesBase.Droid.BluetoothManager manager)
		{
			_manager = manager;
		}

		public override void OnScanResult(ScanCallbackType callbackType, ScanResult result)
		{
			if (callbackType != ScanCallbackType.MatchLost)
			{
				_manager.OnLeScan(result.Device, result.Rssi, result.ScanRecord.GetBytes());
			}
		}
	}

	private const int SCAN_CYCLE = 30;

	private const int SCAN_ON = 28;

	private int _scanners;

	private int _scancounter;

	private bool _scanning;

	private MyScanCallback _scancallback;

	private BluetoothLeScanner _scanner;

	public BluetoothApi23(Context context, BluetoothAdapter adapter, IThread thread, ILogger logger, IBluetoothInterlock interlock)
		: base(context, adapter, thread, logger, interlock)
	{
		if (base.Adapter != null)
		{
			_scancallback = new MyScanCallback(this);
			_scanner = base.Adapter.BluetoothLeScanner;
			_scanners = 0;
			_scancounter = 0;
			_scanning = false;
			Init();
		}
	}

	public override void addScanner()
	{
		if (_scanners > 0)
		{
			if (_scanning)
			{
				stopScanning();
				_scancounter = 29;
			}
		}
		else
		{
			_scancounter = 0;
		}
		_scanners++;
	}

	public override void removeScanner()
	{
		if (_scanners > 0)
		{
			_scanners--;
		}
		if (_scanners == 0)
		{
			stopScanning();
		}
	}

	private void startScanning()
	{
		if (_scanning)
		{
			return;
		}
		if (_scanner == null)
		{
			_scanner = base.Adapter.BluetoothLeScanner;
			if (_scanner == null)
			{
				Log("No Scanner");
				return;
			}
		}
		_scanning = true;
		Log("Starting scan");
		_scanner.StartScan(_scancallback);
	}

	private void stopScanning()
	{
		if (_scanning)
		{
			_scanning = false;
			Log("stopping scan");
			try
			{
				_scanner.StopScan(_scancallback);
			}
			catch (Exception ex)
			{
				Log("Stopping scan: {0}", ex.Message);
			}
		}
	}

	protected override void killScanning()
	{
		stopScanning();
		_scanners = 0;
	}

	protected override void OnTimer()
	{
		base.OnTimer();
		if (_scanners > 0)
		{
			if (_scancounter % 30 == 0)
			{
				startScanning();
			}
			if (_scancounter % 30 == 28)
			{
				stopScanning();
			}
			_scancounter++;
		}
	}
}

// Activ8rlivesBase.Droid.BluetoothHandle
using Activ8rlivesBase;
using Activ8rlivesBase.Droid;
using Android.Bluetooth;
using Java.Util;
using System;
using System.Collections.Generic;
using System.Linq;

public class BluetoothHandle : BluetoothGattCallback, IBluetoothCore
{
	private enum HandleState
	{
		HANDLE_IDLE,
		HANDLE_TURN_ON_PENDING_SCAN,
		HANDLE_TURN_ON_PENDING_CONNECT,
		HANDLE_DEFERRED_CONNECT,
		HANDLE_SCANNING,
		HANDLE_CONNECTING_DIRECT,
		HANDLE_CONNECTING_SCAN,
		HANDLE_ANALYSING_WAIT,
		HANDLE_ANALYSING,
		HANDLE_CONNECTED
	}

	private class DiscoveryKey
	{
		public Guid Name
		{
			get;
			set;
		}

		public byte[] Mfg
		{
			get;
			set;
		}

		public override bool Equals(object obj)
		{
			DiscoveryKey discoveryKey = obj as DiscoveryKey;
			if (discoveryKey == null)
			{
				return false;
			}
			if (!Name.Equals(discoveryKey.Name))
			{
				return false;
			}
			return Mfg.SequenceEqual(discoveryKey.Mfg);
		}

		public override int GetHashCode()
		{
			int hashCode = Name.GetHashCode();
			hashCode ^= Mfg.Length;
			for (int i = 0; i < Mfg.Length; i++)
			{
				hashCode ^= Mfg[i];
			}
			return hashCode;
		}
	}

	private Activ8rlivesBase.Droid.BluetoothManager core_;

	private string module_;

	private HandleState state_;

	private BluetoothDevice peripheral_;

	private BluetoothProxy gatt_;

	private List<DiscoveryKey> discovered_ = new List<DiscoveryKey>();

	private Dictionary<Guid, DateTime> scanned_keys_ = new Dictionary<Guid, DateTime>();

	private WeakReference<IBluetoothDelegate> user_;

	private ServiceDescriptor svc1_;

	private ServiceDescriptor svc2_;

	private ServiceDescriptor svc3_;

	private Dictionary<Guid, BluetoothGattCharacteristic> svc1map_;

	private Dictionary<Guid, BluetoothGattCharacteristic> svc2map_;

	private Dictionary<Guid, BluetoothGattCharacteristic> svc3map_;

	private Guid identifier_;

	private int event_timer_;

	private bool lockout_;

	public const int ANALYSIS_DELAY = 1;

	public const int ANALYSIS_TIMEOUT = 40;

	private const int BLACKLIST_TIME = 2;

	private CommandQueue queue_ = new CommandQueue();

	private JobQueue dispatch_queue_;

	private bool IsConnectedState(HandleState state)
	{
		switch (state)
		{
		case HandleState.HANDLE_IDLE:
			return false;
		case HandleState.HANDLE_TURN_ON_PENDING_SCAN:
			return false;
		case HandleState.HANDLE_TURN_ON_PENDING_CONNECT:
			return false;
		case HandleState.HANDLE_DEFERRED_CONNECT:
			return false;
		case HandleState.HANDLE_SCANNING:
			return false;
		case HandleState.HANDLE_CONNECTING_DIRECT:
			return false;
		case HandleState.HANDLE_CONNECTING_SCAN:
			return false;
		case HandleState.HANDLE_ANALYSING_WAIT:
			return false;
		case HandleState.HANDLE_ANALYSING:
			return false;
		case HandleState.HANDLE_CONNECTED:
			return false;
		default:
			return true;
		}
	}

	public BluetoothHandle(Activ8rlivesBase.Droid.BluetoothManager core, string module_name, IBluetoothDelegate user, bool lockout)
	{
		lockout_ = lockout;
		user_ = new WeakReference<IBluetoothDelegate>(user);
		core_ = core;
		module_ = module_name;
		state_ = HandleState.HANDLE_IDLE;
		dispatch_queue_ = new JobQueue(core.GetThread(), core.GetLogger(), "Bluetooth Handle " + module_name);
	}

	public bool isBluetoothEnabled()
	{
		return true;
	}

	public bool isLockoutHandle()
	{
		return lockout_;
	}

	public bool isBluetoothOn()
	{
		if (core_ == null)
		{
			return false;
		}
		return core_.isBluetoothOn();
	}

	private void visitUser(Action<IBluetoothDelegate> action)
	{
		if (user_.TryGetTarget(out IBluetoothDelegate d))
		{
			dispatch_queue_.Enqueue(delegate
			{
				action(d);
			});
		}
	}

	public void closeBluetooth()
	{
		lock (this)
		{
			core_.Log("Closing Bluetooth Handle for {0}", module_);
			bringToIdle(signal_error: false);
			core_.closeHandle(this);
			dispatch_queue_.Flush();
		}
	}

	public void startScanning()
	{
		lock (this)
		{
			core_.Log("startScanning() for {0}", module_);
			bringToIdle(signal_error: false);
			switch (core_.GetBluetoothState())
			{
			case State.Off:
				SetState(HandleState.HANDLE_TURN_ON_PENDING_SCAN);
				break;
			case State.On:
				discovered_.Clear();
				core_.addScanner();
				SetState(HandleState.HANDLE_SCANNING);
				break;
			case State.TurningOn:
				SetState(HandleState.HANDLE_TURN_ON_PENDING_SCAN);
				break;
			}
		}
	}

	private bool IdentifierWasScanned(Guid identifier)
	{
		if (scanned_keys_.ContainsKey(identifier) && scanned_keys_[identifier] >= DateTime.UtcNow.AddMinutes(-1.0))
		{
			return true;
		}
		return false;
	}

	public void connectDevice(Guid identifier, ServiceDescriptor svc1, ServiceDescriptor svc2, ServiceDescriptor svc3)
	{
		lock (this)
		{
			bringToIdle(signal_error: false);
			core_.Log("Bluetooth Handle for {0} Connect to device {1}", module_, identifier);
			svc1_ = svc1;
			svc2_ = svc2;
			svc3_ = svc3;
			identifier_ = identifier;
			switch (core_.GetBluetoothState())
			{
			case State.Off:
				SetState(HandleState.HANDLE_TURN_ON_PENDING_CONNECT);
				peripheral_ = null;
				break;
			case State.On:
				if (core_.isOnBlackList(identifier))
				{
					core_.Log("{0} Deferring connect to {1} (Blacklisted)", module_, identifier);
					SetState(HandleState.HANDLE_DEFERRED_CONNECT);
				}
				else
				{
					core_.Log("{0} Connecting {1} Auto={2}", module_, identifier_, false);
					peripheral_ = core_.Adapter.GetRemoteDevice(BluetoothUtility.Guid2DeviceAddress(identifier_));
					gatt_ = new BluetoothProxy(this, peripheral_, core_.Context, core_.GetLogger());
					if (!IdentifierWasScanned(identifier_))
					{
						core_.addScanner();
						SetState(HandleState.HANDLE_CONNECTING_SCAN);
					}
					else
					{
						SetState(HandleState.HANDLE_CONNECTING_DIRECT);
					}
				}
				break;
			}
		}
	}

	public void startNotifying(Guid characteristic)
	{
		lock (this)
		{
			if (state_ == HandleState.HANDLE_CONNECTED)
			{
				core_.Log("Android::BluetoothHandle.startNotifying(" + characteristic.ToString() + ")");
				BluetoothGattCharacteristic bluetoothGattCharacteristic = findCharacteristic(characteristic);
				if (bluetoothGattCharacteristic != null)
				{
					UUID uuid = UUID.FromString("00002902-0000-1000-8000-00805f9b34fb");
					gatt_.Gatt.SetCharacteristicNotification(bluetoothGattCharacteristic, enable: true);
					BluetoothGattDescriptor d = bluetoothGattCharacteristic.GetDescriptor(uuid);
					IList<byte> source = ((bluetoothGattCharacteristic.Properties & GattProperty.Indicate) == 0) ? BluetoothGattDescriptor.EnableNotificationValue : BluetoothGattDescriptor.EnableIndicationValue;
					d.SetValue(source.ToArray());
					queue_.Schedule("WriteDescriptor", delegate
					{
						gatt_.Gatt.WriteDescriptor(d);
					});
				}
			}
		}
	}

	public void resetToIdle()
	{
		lock (this)
		{
			core_.Log("Android::BluetoothHandle.resetToIdle()");
			bringToIdle(signal_error: false);
		}
	}

	public void readCharacteristic(Guid characteristic)
	{
		lock (this)
		{
			if (state_ == HandleState.HANDLE_CONNECTED)
			{
				queue_.Schedule("ReadCharacteristic", delegate
				{
					if (state_ == HandleState.HANDLE_CONNECTED)
					{
						BluetoothGattCharacteristic bluetoothGattCharacteristic = findCharacteristic(characteristic);
						if (bluetoothGattCharacteristic != null)
						{
							gatt_.Gatt.ReadCharacteristic(bluetoothGattCharacteristic);
						}
					}
				});
			}
		}
	}

	public void writeCharacteristic(Guid characteristic, byte[] data)
	{
		lock (this)
		{
			if (state_ == HandleState.HANDLE_CONNECTED)
			{
				queue_.Schedule("WriteCharacteristic", delegate
				{
					if (state_ == HandleState.HANDLE_CONNECTED)
					{
						BluetoothGattCharacteristic bluetoothGattCharacteristic = findCharacteristic(characteristic);
						if (bluetoothGattCharacteristic != null)
						{
							if ((bluetoothGattCharacteristic.Properties & GattProperty.WriteNoResponse) != 0)
							{
								bluetoothGattCharacteristic.WriteType = GattWriteType.NoResponse;
							}
							else
							{
								bluetoothGattCharacteristic.WriteType = GattWriteType.Default;
							}
							bluetoothGattCharacteristic.SetValue(data);
							gatt_.Gatt.WriteCharacteristic(bluetoothGattCharacteristic);
						}
					}
				});
			}
		}
	}

	public Guid getConnectedDevice()
	{
		lock (this)
		{
			core_.Log("Android::BluetoothHandle.getConnectedDevice()");
			Guid result = Guid.Empty;
			if (state_ == HandleState.HANDLE_CONNECTED && peripheral_ != null)
			{
				result = BluetoothUtility.DeviceAddress2Guid(peripheral_.Address);
			}
			return result;
		}
	}

	public void OnTimer()
	{
		lock (this)
		{
			if (state_ == HandleState.HANDLE_ANALYSING_WAIT && event_timer_ > 0)
			{
				event_timer_--;
				if (event_timer_ == 0)
				{
					core_.Log("{0} Starting Analysis", module_);
					SetState(HandleState.HANDLE_ANALYSING);
					event_timer_ = 40;
					queue_.Schedule("DiscoverServices", delegate
					{
						if (gatt_ != null)
						{
							gatt_.Gatt.DiscoverServices();
						}
					});
				}
			}
			else if (state_ == HandleState.HANDLE_ANALYSING && event_timer_ > 0)
			{
				event_timer_--;
				if (event_timer_ == 0)
				{
					core_.Log("{0} Analysis timeout", module_);
					bringToIdle(signal_error: true);
				}
			}
			else if (state_ == HandleState.HANDLE_DEFERRED_CONNECT && !core_.isOnBlackList(identifier_))
			{
				peripheral_ = core_.Adapter.GetRemoteDevice(BluetoothUtility.Guid2DeviceAddress(identifier_));
				gatt_ = new BluetoothProxy(this, peripheral_, core_.Context, core_.GetLogger());
				if (!IdentifierWasScanned(identifier_))
				{
					core_.addScanner();
					SetState(HandleState.HANDLE_CONNECTING_SCAN);
				}
				else
				{
					SetState(HandleState.HANDLE_CONNECTING_DIRECT);
				}
			}
		}
	}

	private Guid UUID2Guid(UUID v)
	{
		return Guid.Parse(v.ToString());
	}

	private UUID Guid2UUID(Guid v)
	{
		return UUID.FromString(v.ToString());
	}

	private Dictionary<Guid, BluetoothGattCharacteristic> getServiceMap(ServiceDescriptor svc, BluetoothGattService service)
	{
		Dictionary<Guid, BluetoothGattCharacteristic> dictionary = new Dictionary<Guid, BluetoothGattCharacteristic>();
		List<Guid> list = new List<Guid>(svc.Characteristics);
		foreach (BluetoothGattCharacteristic characteristic in service.Characteristics)
		{
			Guid guid = UUID2Guid(characteristic.Uuid);
			if (list.Contains(guid))
			{
				dictionary.Add(guid, characteristic);
				list.Remove(guid);
			}
		}
		if (list.Count == 0)
		{
			core_.Log("{0} Found all characteristics for service {1}", module_, svc.Service);
			return dictionary;
		}
		core_.Log("Missing characteristics {0} for service {1} for {2}", list, svc.Service, module_);
		return null;
	}

	public override void OnServicesDiscovered(BluetoothGatt gatt, GattStatus status)
	{
		lock (this)
		{
			if (state_ == HandleState.HANDLE_ANALYSING)
			{
				svc1map_ = null;
				svc2map_ = null;
				svc3map_ = null;
				foreach (BluetoothGattService service in gatt.Services)
				{
					Guid guid = UUID2Guid(service.Uuid);
					if (svc1_.Service.Equals(guid))
					{
						core_.Log("Found Service 2 {0}", guid);
						svc1map_ = getServiceMap(svc1_, service);
					}
					if (svc2_ != null && svc2_.Service.Equals(guid))
					{
						core_.Log("Found Service 2 {0}", guid);
						svc2map_ = getServiceMap(svc2_, service);
					}
					if (svc3_ != null && svc3_.Service.Equals(guid))
					{
						core_.Log("Found Service 3 {0}", guid);
						svc3map_ = getServiceMap(svc3_, service);
					}
				}
				if (svc1map_ != null && (svc2map_ != null || svc2_ == null) && (svc3map_ != null || svc3_ == null))
				{
					SetState(HandleState.HANDLE_CONNECTED);
					visitUser(delegate(IBluetoothDelegate obj)
					{
						obj.deviceConnected();
					});
				}
				else
				{
					bringToIdle(signal_error: true);
				}
				queue_.Service("DiscoverServices");
			}
		}
	}

	public override void OnConnectionStateChange(BluetoothGatt gatt, GattStatus status, ProfileState newState)
	{
		lock (this)
		{
			bool flag = newState == ProfileState.Connected;
			core_.Log("Connection State {0} {1} connected={2}", identifier_, newState, flag);
			if (newState != ProfileState.Connecting && newState != ProfileState.Disconnecting)
			{
				if (!flag)
				{
					if (state_ == HandleState.HANDLE_ANALYSING || state_ == HandleState.HANDLE_ANALYSING_WAIT || state_ == HandleState.HANDLE_CONNECTING_DIRECT || state_ == HandleState.HANDLE_CONNECTED)
					{
						core_.Log("Bluetooth Handle {0} disconnected {1}", module_, identifier_);
						bringToIdle(signal_error: true);
					}
					else if (state_ == HandleState.HANDLE_CONNECTING_SCAN)
					{
						core_.Log("Bluetooth Handle {0} initial connection failed {1}", module_, identifier_);
						gatt_.Close();
						gatt_ = null;
					}
				}
				else if (state_ == HandleState.HANDLE_CONNECTING_DIRECT)
				{
					SetState(HandleState.HANDLE_ANALYSING_WAIT);
					event_timer_ = 1;
				}
				else if (state_ == HandleState.HANDLE_CONNECTING_SCAN)
				{
					core_.removeScanner();
					SetState(HandleState.HANDLE_ANALYSING_WAIT);
					event_timer_ = 1;
				}
			}
		}
	}

	public override void OnDescriptorRead(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, GattStatus status)
	{
		lock (this)
		{
			if (state_ == HandleState.HANDLE_CONNECTED)
			{
				queue_.Service("ReadDescriptor");
			}
		}
	}

	public override void OnDescriptorWrite(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, GattStatus status)
	{
		lock (this)
		{
			core_.Log("Destriptor write completed for {0} - {1}", UUID2Guid(descriptor.Characteristic.Uuid), status);
			if (state_ == HandleState.HANDLE_CONNECTED)
			{
				Guid guid = UUID2Guid(descriptor.Characteristic.Uuid);
				visitUser(delegate(IBluetoothDelegate obj)
				{
					obj.descriptorWriteCompleted(guid);
				});
				queue_.Service("WriteDescriptor");
			}
		}
	}

	public override void OnCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, GattStatus status)
	{
		lock (this)
		{
			if (state_ == HandleState.HANDLE_CONNECTED)
			{
				Guid guid = UUID2Guid(characteristic.Uuid);
				byte[] value = characteristic.GetValue();
				visitUser(delegate(IBluetoothDelegate obj)
				{
					obj.dataReceived(guid, value);
				});
				queue_.Service("ReadCharacteristic");
			}
		}
	}

	public override void OnCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, GattStatus status)
	{
		lock (this)
		{
			if (state_ == HandleState.HANDLE_CONNECTED)
			{
				Guid guid = UUID2Guid(characteristic.Uuid);
				visitUser(delegate(IBluetoothDelegate obj)
				{
					obj.dataSent(guid);
				});
				queue_.Service("WriteCharacteristic");
			}
		}
	}

	public override void OnReliableWriteCompleted(BluetoothGatt gatt, GattStatus status)
	{
		lock (this)
		{
			if (state_ == HandleState.HANDLE_CONNECTED)
			{
				queue_.Service("ReliableWrite");
			}
		}
	}

	public override void OnCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic)
	{
		lock (this)
		{
			if (state_ == HandleState.HANDLE_CONNECTED)
			{
				byte[] value = characteristic.GetValue();
				Guid guid = UUID2Guid(characteristic.Uuid);
				visitUser(delegate(IBluetoothDelegate obj)
				{
					obj.dataReceived(guid, value);
				});
			}
		}
	}

	public void discoveredPeripheral(BluetoothDevice device, Guid[] services, byte[] mfg)
	{
		lock (this)
		{
			Guid identifier = BluetoothUtility.DeviceAddress2Guid(device.Address);
			scanned_keys_[identifier] = DateTime.UtcNow;
			if (state_ == HandleState.HANDLE_SCANNING)
			{
				string name = device.Name;
				if (name == null)
				{
					name = "";
				}
				core_.Log("DiscoveredPeripheral: {0} {1}", identifier, name);
				if (state_ == HandleState.HANDLE_SCANNING)
				{
					DiscoveryKey item = new DiscoveryKey
					{
						Name = identifier,
						Mfg = mfg
					};
					if (!discovered_.Contains(item))
					{
						discovered_.Add(item);
						visitUser(delegate(IBluetoothDelegate obj)
						{
							obj.deviceDiscovered(identifier, name, services, mfg, 0);
						});
					}
				}
			}
			else if (state_ == HandleState.HANDLE_CONNECTING_SCAN && identifier.Equals(identifier_))
			{
				core_.removeScanner();
				if (gatt_ != null)
				{
					gatt_.Close();
					gatt_ = null;
				}
				peripheral_ = core_.Adapter.GetRemoteDevice(device.Address);
				gatt_ = new BluetoothProxy(this, peripheral_, core_.Context, core_.GetLogger());
				SetState(HandleState.HANDLE_CONNECTING_DIRECT);
			}
		}
	}

	public void OnBTStateChange(State old_state, State new_state)
	{
		lock (this)
		{
			core_.Log("Bluetooth Handle State now {0}->{1}", old_state, new_state);
			switch (new_state)
			{
			case State.Disconnected:
			case State.Off:
				bluetoothNotAvailable();
				break;
			case State.Connected:
			case State.On:
				bluetoothAvailable();
				break;
			case State.TurningOn:
			case State.TurningOff:
				bluetoothNotAvailable();
				break;
			}
		}
	}

	private void SetState(HandleState new_state)
	{
		core_.Log("Bluetooth Handle for {0} state {1} -> {2}", module_, state_, new_state);
		state_ = new_state;
	}

	public void reInitialise()
	{
		lock (this)
		{
			switch (state_)
			{
			case HandleState.HANDLE_IDLE:
			case HandleState.HANDLE_TURN_ON_PENDING_SCAN:
			case HandleState.HANDLE_TURN_ON_PENDING_CONNECT:
			case HandleState.HANDLE_DEFERRED_CONNECT:
			case HandleState.HANDLE_SCANNING:
			case HandleState.HANDLE_CONNECTING_DIRECT:
			case HandleState.HANDLE_CONNECTING_SCAN:
			case HandleState.HANDLE_ANALYSING_WAIT:
			case HandleState.HANDLE_ANALYSING:
				break;
			case HandleState.HANDLE_CONNECTED:
				svc1map_ = null;
				svc2map_ = null;
				svc3map_ = null;
				SetState(HandleState.HANDLE_ANALYSING_WAIT);
				event_timer_ = 1;
				break;
			}
		}
	}

	private void bringToIdle(bool signal_error)
	{
		HandleState handleState = state_;
		SetState(HandleState.HANDLE_IDLE);
		queue_.Flush();
		discovered_.Clear();
		switch (handleState)
		{
		case HandleState.HANDLE_IDLE:
			break;
		case HandleState.HANDLE_CONNECTING_DIRECT:
		case HandleState.HANDLE_CONNECTING_SCAN:
		case HandleState.HANDLE_ANALYSING_WAIT:
		case HandleState.HANDLE_ANALYSING:
		case HandleState.HANDLE_CONNECTED:
			core_.Blacklist(identifier_, 2);
			if (peripheral_ != null)
			{
				try
				{
					if (gatt_ != null)
					{
						gatt_.Close();
						gatt_ = null;
					}
					peripheral_ = null;
					identifier_ = Guid.Empty;
				}
				catch (Exception ex)
				{
					core_.Log("Closing {0} caught {1}", module_, ex.ToString());
				}
			}
			if (handleState == HandleState.HANDLE_CONNECTING_SCAN)
			{
				core_.removeScanner();
			}
			if (signal_error)
			{
				if (handleState == HandleState.HANDLE_CONNECTED)
				{
					visitUser(delegate(IBluetoothDelegate obj)
					{
						obj.deviceDisconnected();
					});
				}
				else
				{
					visitUser(delegate(IBluetoothDelegate obj)
					{
						obj.deviceNotConnected();
					});
				}
			}
			break;
		case HandleState.HANDLE_SCANNING:
			core_.removeScanner();
			if (signal_error)
			{
				visitUser(delegate(IBluetoothDelegate obj)
				{
					obj.discoveryFailed();
				});
			}
			break;
		case HandleState.HANDLE_TURN_ON_PENDING_CONNECT:
		case HandleState.HANDLE_DEFERRED_CONNECT:
			peripheral_ = null;
			identifier_ = Guid.Empty;
			if (signal_error)
			{
				visitUser(delegate(IBluetoothDelegate obj)
				{
					obj.deviceNotConnected();
				});
			}
			break;
		case HandleState.HANDLE_TURN_ON_PENDING_SCAN:
			if (signal_error)
			{
				visitUser(delegate(IBluetoothDelegate obj)
				{
					obj.discoveryFailed();
				});
			}
			break;
		}
	}

	private BluetoothGattCharacteristic findCharacteristic(Guid uuid)
	{
		if (svc1_ != null && svc1map_.ContainsKey(uuid))
		{
			return svc1map_[uuid];
		}
		if (svc2_ != null && svc2map_.ContainsKey(uuid))
		{
			return svc2map_[uuid];
		}
		if (svc3_ != null && svc3map_.ContainsKey(uuid))
		{
			return svc3map_[uuid];
		}
		return null;
	}

	private void bluetoothAvailable()
	{
		core_.Log("Bluetooth Handle {0} is ready", module_);
		switch (state_)
		{
		case HandleState.HANDLE_IDLE:
		case HandleState.HANDLE_DEFERRED_CONNECT:
		case HandleState.HANDLE_SCANNING:
		case HandleState.HANDLE_CONNECTING_DIRECT:
		case HandleState.HANDLE_CONNECTING_SCAN:
		case HandleState.HANDLE_ANALYSING_WAIT:
		case HandleState.HANDLE_ANALYSING:
		case HandleState.HANDLE_CONNECTED:
			break;
		case HandleState.HANDLE_TURN_ON_PENDING_CONNECT:
			peripheral_ = core_.Adapter.GetRemoteDevice(BluetoothUtility.Guid2DeviceAddress(identifier_));
			gatt_ = new BluetoothProxy(this, peripheral_, core_.Context, core_.GetLogger());
			if (!IdentifierWasScanned(identifier_))
			{
				core_.addScanner();
				SetState(HandleState.HANDLE_CONNECTING_SCAN);
			}
			else
			{
				SetState(HandleState.HANDLE_CONNECTING_DIRECT);
			}
			break;
		case HandleState.HANDLE_TURN_ON_PENDING_SCAN:
			discovered_.Clear();
			core_.addScanner();
			SetState(HandleState.HANDLE_SCANNING);
			break;
		}
	}

	private void bluetoothNotAvailable()
	{
		core_.Log("Bluetooth Handle {0} is not available", module_);
		switch (state_)
		{
		case HandleState.HANDLE_IDLE:
		case HandleState.HANDLE_TURN_ON_PENDING_SCAN:
		case HandleState.HANDLE_TURN_ON_PENDING_CONNECT:
		case HandleState.HANDLE_DEFERRED_CONNECT:
			break;
		case HandleState.HANDLE_ANALYSING_WAIT:
		case HandleState.HANDLE_ANALYSING:
		case HandleState.HANDLE_CONNECTED:
			bringToIdle(signal_error: true);
			break;
		case HandleState.HANDLE_CONNECTING_DIRECT:
		case HandleState.HANDLE_CONNECTING_SCAN:
			bringToIdle(signal_error: false);
			SetState(HandleState.HANDLE_TURN_ON_PENDING_CONNECT);
			break;
		case HandleState.HANDLE_SCANNING:
			bringToIdle(signal_error: false);
			SetState(HandleState.HANDLE_TURN_ON_PENDING_SCAN);
			break;
		}
	}

	public bool notAuthorized()
	{
		return !core_.HasBlutoothPermission();
	}

	public bool notPowered()
	{
		return core_.GetBluetoothState() == State.Off;
	}

	public bool locationRequiredAndNotEnabled()
	{
		return core_.locationRequiredAndNotEnabled();
	}
}

// Activ8rlivesBase.Droid.BluetoothManager
using Activ8rlivesBase;
using Activ8rlivesBase.Droid;
using Android.Bluetooth;
using Android.Content;
using Android.Content.PM;
using Android.Locations;
using Android.OS;
using System;
using System.Collections.Generic;

public abstract class BluetoothManager : IBluetoothManager
{
	private List<BluetoothHandle> handles_ = new List<BluetoothHandle>();

	private Handler timer_;

	private Action timer_handler_;

	private Dictionary<Guid, DateTime> blacklist_ = new Dictionary<Guid, DateTime>();

	private StatusReceiver status_;

	private ILogger logger_;

	private IThread thread_;

	private IBluetoothInterlock interlock_;

	private int lockout_count_;

	private JobQueue dispatch_queue_;

	private const string bluetooth_permission = "android.permission.ACCESS_COARSE_LOCATION";

	public Context Context
	{
		get;
		private set;
	}

	public BluetoothAdapter Adapter
	{
		get;
		private set;
	}

	public ILogger GetLogger()
	{
		return logger_;
	}

	public IThread GetThread()
	{
		return thread_;
	}

	private static BluetoothAdapter GetAdapter(Context context)
	{
		try
		{
			Android.Bluetooth.BluetoothManager bluetoothManager = (Android.Bluetooth.BluetoothManager)context.GetSystemService("bluetooth");
			if (bluetoothManager != null)
			{
				return bluetoothManager.Adapter;
			}
		}
		catch (Exception)
		{
		}
		return null;
	}

	public bool HasBlutoothPermission()
	{
		if (Build.VERSION.SdkInt >= BuildVersionCodes.M)
		{
			return Context.CheckSelfPermission("android.permission.ACCESS_COARSE_LOCATION") == Permission.Granted;
		}
		return true;
	}

	public void RequestBluetoothPermission()
	{
		if (!HasBlutoothPermission())
		{
			interlock_.requestBluetoothPermission("android.permission.ACCESS_COARSE_LOCATION");
		}
	}

	public bool isBluetoothSupported()
	{
		return bluetoothSupported(Context);
	}

	public static bool bluetoothSupported(Context context)
	{
		if (Build.VERSION.SdkInt < BuildVersionCodes.JellyBeanMr2)
		{
			return false;
		}
		if (GetAdapter(context) == null)
		{
			return false;
		}
		return true;
	}

	public static IBluetoothManager CreateBluetooth(Context context, IThread thread, ILogger logger, IBluetoothInterlock interlock)
	{
		if (Build.VERSION.SdkInt < BuildVersionCodes.JellyBeanMr2)
		{
			return new BluetoothFake();
		}
		BluetoothAdapter adapter = GetAdapter(context);
		if (adapter == null)
		{
			return new BluetoothFake();
		}
		if (Build.VERSION.SdkInt >= BuildVersionCodes.M)
		{
			return new BluetoothApi23(context, adapter, thread, logger, interlock);
		}
		return new BluetoothApi18(context, adapter, thread, logger, interlock);
	}

	protected BluetoothManager(Context context, BluetoothAdapter adapter, IThread thread, ILogger logger, IBluetoothInterlock interlock)
	{
		status_ = new StatusReceiver(this);
		logger_ = logger;
		thread_ = thread;
		interlock_ = interlock;
		lockout_count_ = 0;
		Adapter = adapter;
		Context = context;
		dispatch_queue_ = new JobQueue(thread_, logger_, "Bluetooth Manager");
		Context.RegisterReceiver(status_, new IntentFilter("android.bluetooth.adapter.action.STATE_CHANGED"));
	}

	public abstract void addScanner();

	public abstract void removeScanner();

	protected abstract void killScanning();

	public void Log(string msg, params object[] args)
	{
		logger_.Log(msg, args);
	}

	protected void Init()
	{
		timer_ = new Handler();
		timer_handler_ = delegate
		{
			OnTimer();
			if (timer_handler_ != null && timer_ != null)
			{
				timer_.PostDelayed(timer_handler_, 1000L);
			}
		};
		timer_.PostDelayed(timer_handler_, 1000L);
	}

	public State GetBluetoothState()
	{
		if (Adapter != null)
		{
			return Adapter.State;
		}
		return State.Off;
	}

	public void BluetoothStatus(State old_state, State new_state)
	{
		lock (this)
		{
			foreach (BluetoothHandle h in handles_)
			{
				dispatch_queue_.Enqueue(delegate
				{
					h.OnBTStateChange(old_state, new_state);
				}, h);
			}
		}
	}

	public void OnLeScan(BluetoothDevice bleDevice, int rssi, byte[] scanRecord)
	{
		Guid[] services = BluetoothUtility.DecodeAdvertisementGuids(scanRecord);
		byte[] mfg = BluetoothUtility.DecodeAdvertisementData(scanRecord);
		lock (this)
		{
			foreach (BluetoothHandle h in handles_)
			{
				dispatch_queue_.Enqueue(delegate
				{
					h.discoveredPeripheral(bleDevice, services, mfg);
				}, h);
			}
		}
	}

	public void Blacklist(Guid device, int timeout)
	{
		lock (this)
		{
			if (!blacklist_.ContainsKey(device))
			{
				blacklist_.Add(device, DateTime.Now.AddSeconds(timeout));
			}
		}
	}

	public bool isOnBlackList(Guid device)
	{
		lock (this)
		{
			return blacklist_.ContainsKey(device);
		}
	}

	private void AgeBlacklist()
	{
		if (blacklist_.Count != 0)
		{
			Dictionary<Guid, DateTime> dictionary = new Dictionary<Guid, DateTime>();
			DateTime now = DateTime.Now;
			foreach (KeyValuePair<Guid, DateTime> item in blacklist_)
			{
				if (item.Value.CompareTo(now) >= 0)
				{
					dictionary.Add(item.Key, item.Value);
				}
				else
				{
					Log("Remove {0} from blacklist", item.Key);
				}
			}
			blacklist_ = dictionary;
		}
	}

	protected virtual void OnTimer()
	{
		lock (this)
		{
			AgeBlacklist();
			bool flag = false;
			foreach (BluetoothHandle h in handles_)
			{
				dispatch_queue_.Enqueue(delegate
				{
					h.OnTimer();
				}, h);
				if (h.isLockoutHandle())
				{
					flag = true;
				}
			}
			if (!flag && lockout_count_ > 0 && --lockout_count_ == 0 && interlock_ != null)
			{
				interlock_.bluetoothNotActive();
			}
		}
	}

	public bool locationRequiredAndNotEnabled()
	{
		if (Build.VERSION.SdkInt < BuildVersionCodes.M)
		{
			return false;
		}
		try
		{
			bool flag = false;
			bool flag2 = false;
			LocationManager locationManager = (LocationManager)Context.GetSystemService("location");
			try
			{
				flag = locationManager.IsProviderEnabled("gps");
				Log("GPS location provider: {0}", flag);
			}
			catch
			{
			}
			try
			{
				flag2 = locationManager.IsProviderEnabled("network");
				Log("Network location provider: {0}", flag2);
			}
			catch
			{
			}
			try
			{
				bool flag3 = locationManager.IsProviderEnabled("passive");
				Log("Passive location provider: {0}", flag3);
			}
			catch
			{
			}
			if (flag2 | flag)
			{
				return false;
			}
			return true;
		}
		catch (Exception ex)
		{
			Log("Determining location status: {0}", ex);
		}
		return false;
	}

	public bool isBluetoothEnabled()
	{
		return Adapter != null;
	}

	public bool isBluetoothOn()
	{
		if (Adapter == null)
		{
			return false;
		}
		return Adapter.IsEnabled;
	}

	public IBluetoothCore openBluetooth(string module_name, IBluetoothDelegate user, bool lockout)
	{
		if (Adapter == null)
		{
			return null;
		}
		Log("Opening Bluetooth Handle for {0}", module_name);
		RequestBluetoothPermission();
		lock (this)
		{
			bool flag = false;
			foreach (BluetoothHandle item in handles_)
			{
				if (item.isLockoutHandle())
				{
					flag = true;
				}
			}
			if (lockout && !flag)
			{
				if (interlock_ != null)
				{
					interlock_.bluetoothActive();
				}
				lockout_count_ = 10;
			}
			BluetoothHandle bluetoothHandle = new BluetoothHandle(this, module_name, user, lockout);
			handles_.Add(bluetoothHandle);
			return bluetoothHandle;
		}
	}

	public void closeHandle(BluetoothHandle handle)
	{
		lock (this)
		{
			handles_.Remove(handle);
			if (handles_.Count == 0 && handle.isLockoutHandle())
			{
				lockout_count_ = 10;
				killScanning();
			}
			dispatch_queue_.Flush(handle);
		}
	}
}

// Activ8rlivesBase.Droid.BluetoothProxy
using Activ8rlivesBase;
using Activ8rlivesBase.Droid;
using Android.Bluetooth;
using Android.Content;
using Android.OS;
using System;

public class BluetoothProxy : BluetoothGattCallback
{
	public BluetoothGatt Gatt;

	private BluetoothHandle handle_;

	private ProfileState state_;

	private Guid guid_;

	private ILogger logger_;

	public BluetoothProxy(BluetoothHandle handle, BluetoothDevice peripheral, Context context, ILogger logger)
	{
		handle_ = handle;
		state_ = ProfileState.Disconnected;
		guid_ = Guid.NewGuid();
		logger_ = logger;
		if (Build.VERSION.SdkInt >= BuildVersionCodes.M)
		{
			Gatt = peripheral.ConnectGatt(context, autoConnect: false, this, BluetoothTransports.Le);
		}
		else
		{
			Gatt = peripheral.ConnectGatt(context, autoConnect: false, this);
		}
	}

	public void Close()
	{
		if (handle_ != null)
		{
			handle_ = null;
			try
			{
				if (state_ == ProfileState.Connected || state_ == ProfileState.Connecting)
				{
					logger_.Log("Disconnecting Gatt In Proxy (State {0} Id {1})", state_, guid_.ToString());
					Gatt.Disconnect();
				}
				else if (state_ != ProfileState.Disconnecting)
				{
					logger_.Log("Closing Gatt In Proxy (State {0} Id {1})", state_, guid_.ToString());
					Gatt.Close();
				}
			}
			catch (Exception ex)
			{
				logger_.Log("Closing Gatt caught {0}", ex.ToString());
			}
		}
	}

	public override void OnCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic)
	{
		if (handle_ != null)
		{
			handle_.OnCharacteristicChanged(gatt, characteristic);
		}
	}

	public override void OnCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, GattStatus status)
	{
		if (handle_ != null)
		{
			handle_.OnCharacteristicRead(gatt, characteristic, status);
		}
	}

	public override void OnCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, GattStatus status)
	{
		if (handle_ != null)
		{
			handle_.OnCharacteristicWrite(gatt, characteristic, status);
		}
	}

	public override void OnConnectionStateChange(BluetoothGatt gatt, GattStatus status, ProfileState newState)
	{
		BluetoothHandle bluetoothHandle = handle_;
		state_ = newState;
		if (bluetoothHandle == null)
		{
			if (state_ == ProfileState.Disconnected)
			{
				logger_.Log("Closing Gatt in proxy on connection state change (new state {0}, id {1})", newState, guid_.ToString());
				Gatt.Close();
			}
		}
		else
		{
			bluetoothHandle?.OnConnectionStateChange(gatt, status, newState);
		}
	}

	public override void OnDescriptorRead(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, GattStatus status)
	{
		if (handle_ != null)
		{
			handle_.OnDescriptorRead(gatt, descriptor, status);
		}
	}

	public override void OnDescriptorWrite(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, GattStatus status)
	{
		if (handle_ != null)
		{
			handle_.OnDescriptorWrite(gatt, descriptor, status);
		}
	}

	public override void OnMtuChanged(BluetoothGatt gatt, int mtu, GattStatus status)
	{
		if (handle_ != null)
		{
			handle_.OnMtuChanged(gatt, mtu, status);
		}
	}

	public override void OnReadRemoteRssi(BluetoothGatt gatt, int rssi, GattStatus status)
	{
		if (handle_ != null)
		{
			handle_.OnReadRemoteRssi(gatt, rssi, status);
		}
	}

	public override void OnReliableWriteCompleted(BluetoothGatt gatt, GattStatus status)
	{
		if (handle_ != null)
		{
			handle_.OnReliableWriteCompleted(gatt, status);
		}
	}

	public override void OnServicesDiscovered(BluetoothGatt gatt, GattStatus status)
	{
		if (handle_ != null)
		{
			handle_.OnServicesDiscovered(gatt, status);
		}
	}
}

// Activ8rlivesBase.Droid.BluetoothUtility
using Activ8rlivesBase;
using Java.Util;
using System;
using System.Collections.Generic;
using System.Linq;

internal static class BluetoothUtility
{
	public static byte[] Guid2DeviceAddress(Guid guid)
	{
		byte[] array = guid.ToByteArray();
		byte[] array2 = new byte[6];
		for (int i = 0; i < 6; i++)
		{
			array2[i] = array[i + 10];
		}
		return array2;
	}

	public static Guid DeviceAddress2Guid(string address)
	{
		string[] array = address.Split(':');
		int num = array.Count();
		byte[] array2 = new byte[16];
		if (num != 6)
		{
			return Guid.Empty;
		}
		for (int i = 0; i < 16; i++)
		{
			array2[i] = 0;
		}
		for (int j = 0; j < 6; j++)
		{
			array2[j + 10] = Convert.ToByte(array[j], 16);
		}
		return new Guid(array2);
	}

	public static Guid[] DecodeAdvertisementGuids(byte[] scanRecord)
	{
		List<Guid> list = new List<Guid>();
		int num = 0;
		while (num < scanRecord.Length - 2)
		{
			int num3 = scanRecord[num++];
			if (num3 == 0)
			{
				break;
			}
			int num5 = scanRecord[num++];
			if ((uint)(num5 - 2) > 1u)
			{
				if ((uint)(num5 - 6) <= 1u)
				{
					while (num3 >= 16)
					{
						try
						{
							long mostSigBits = BitConverter.ToInt64(scanRecord, num);
							long leastSigBits = BitConverter.ToInt64(scanRecord, num++);
							UUID uUID = new UUID(mostSigBits, leastSigBits);
							list.Add(uUID.ToString().AsGuid());
						}
						catch (Exception)
						{
						}
						finally
						{
							num += 15;
							num3 -= 16;
						}
					}
				}
				else
				{
					num += num3 - 1;
				}
			}
			else
			{
				while (num3 > 1)
				{
					try
					{
						uint num7 = scanRecord[num + 1];
						num7 <<= 8;
						num7 |= scanRecord[num];
						Guid item = $"{num7:X4}".AsGuid();
						list.Add(item);
					}
					catch (Exception)
					{
					}
					finally
					{
						num3 -= 2;
						num += 2;
					}
				}
			}
		}
		return list.ToArray();
	}

	public static byte[] DecodeAdvertisementData(byte[] scanRecord)
	{
		int num2;
		for (int i = 0; i < scanRecord.Length - 2; i += num2 - 1)
		{
			num2 = scanRecord[i++];
			if (num2 == 0)
			{
				break;
			}
			int num4 = scanRecord[i++];
			if (num4 == 255)
			{
				byte[] array = new byte[num2 - 1];
				Array.Copy(scanRecord, i, array, 0, num2 - 1);
				return array;
			}
		}
		return new byte[0];
	}
}
